
Graduation_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000066e  00800060  00003214  000032a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008006ce  008006ce  00003916  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003916  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007a2d  00000000  00000000  00003e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001502  00000000  00000000  0000b849  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003787  00000000  00000000  0000cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b94  00000000  00000000  000104d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f99  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037c1  00000000  00000000  00012001  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  000157c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__vector_4>
      14:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_10>
      2c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_15>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	16 e0       	ldi	r17, 0x06	; 6
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b6 e0       	ldi	r27, 0x06	; 6
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 09 	call	0x1394	; 0x1394 <main>
      8a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Read>:
	return Value;
}

void ADC_Disable(void)
{
	Clear_Bit(ADCSRA, 7);
      92:	97 b1       	in	r25, 0x07	; 7
      94:	90 7e       	andi	r25, 0xE0	; 224
      96:	89 2b       	or	r24, r25
      98:	87 b9       	out	0x07, r24	; 7
      9a:	86 b1       	in	r24, 0x06	; 6
      9c:	80 64       	ori	r24, 0x40	; 64
      9e:	86 b9       	out	0x06, r24	; 6
      a0:	34 9b       	sbis	0x06, 4	; 6
      a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_Read+0xe>
      a4:	84 b1       	in	r24, 0x04	; 4
      a6:	95 b1       	in	r25, 0x05	; 5
      a8:	08 95       	ret

000000aa <__vector_16>:
}

ISR(ADC_vect)
{
      aa:	1f 92       	push	r1
      ac:	0f 92       	push	r0
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	0f 92       	push	r0
      b2:	11 24       	eor	r1, r1
      b4:	2f 93       	push	r18
      b6:	3f 93       	push	r19
      b8:	4f 93       	push	r20
      ba:	5f 93       	push	r21
      bc:	6f 93       	push	r22
      be:	7f 93       	push	r23
      c0:	8f 93       	push	r24
      c2:	9f 93       	push	r25
      c4:	af 93       	push	r26
      c6:	bf 93       	push	r27
      c8:	ef 93       	push	r30
      ca:	ff 93       	push	r31
	// Write the ADC handler here
	Temp = ADC_Read(PIN_7)*50/1024;
      cc:	87 e0       	ldi	r24, 0x07	; 7
      ce:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Read>
      d2:	22 e3       	ldi	r18, 0x32	; 50
      d4:	ac 01       	movw	r20, r24
      d6:	24 9f       	mul	r18, r20
      d8:	c0 01       	movw	r24, r0
      da:	25 9f       	mul	r18, r21
      dc:	90 0d       	add	r25, r0
      de:	11 24       	eor	r1, r1
      e0:	89 2f       	mov	r24, r25
      e2:	99 27       	eor	r25, r25
      e4:	86 95       	lsr	r24
      e6:	86 95       	lsr	r24
      e8:	90 93 cf 06 	sts	0x06CF, r25	; 0x8006cf <__data_end+0x1>
      ec:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <__data_end>
	if(Temp >= 28)
      f0:	4c 97       	sbiw	r24, 0x1c	; 28
      f2:	38 f0       	brcs	.+14     	; 0x102 <__vector_16+0x58>
	DC_Motor1_START(100,Anti_Clock_Wise);
      f4:	41 e0       	ldi	r20, 0x01	; 1
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	88 ec       	ldi	r24, 0xC8	; 200
      fc:	92 e4       	ldi	r25, 0x42	; 66
      fe:	0e 94 ab 00 	call	0x156	; 0x156 <DC_Motor1_START>
	if(Temp <= 21)
     102:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <__data_end>
     106:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <__data_end+0x1>
     10a:	46 97       	sbiw	r24, 0x16	; 22
     10c:	10 f4       	brcc	.+4      	; 0x112 <__vector_16+0x68>
	DC_Motor1_STOP();
     10e:	0e 94 c6 00 	call	0x18c	; 0x18c <DC_Motor1_STOP>
}
     112:	ff 91       	pop	r31
     114:	ef 91       	pop	r30
     116:	bf 91       	pop	r27
     118:	af 91       	pop	r26
     11a:	9f 91       	pop	r25
     11c:	8f 91       	pop	r24
     11e:	7f 91       	pop	r23
     120:	6f 91       	pop	r22
     122:	5f 91       	pop	r21
     124:	4f 91       	pop	r20
     126:	3f 91       	pop	r19
     128:	2f 91       	pop	r18
     12a:	0f 90       	pop	r0
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	0f 90       	pop	r0
     130:	1f 90       	pop	r1
     132:	18 95       	reti

00000134 <Buzzer_ON>:
     134:	40 e0       	ldi	r20, 0x00	; 0
     136:	67 e0       	ldi	r22, 0x07	; 7
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
     13e:	08 95       	ret

00000140 <Buzzer_OFF>:
     140:	41 e0       	ldi	r20, 0x01	; 1
     142:	67 e0       	ldi	r22, 0x07	; 7
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
     14a:	08 95       	ret

0000014c <Buzzer_Toggle>:
     14c:	67 e0       	ldi	r22, 0x07	; 7
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_TogglePin_Value>
     154:	08 95       	ret

00000156 <DC_Motor1_START>:
	//Timer2_Start();
}

void DC_Motor1_START(f32 duty_cycle, DC_Motor_Dir dir)
{
	switch(dir)
     156:	44 23       	and	r20, r20
     158:	19 f0       	breq	.+6      	; 0x160 <DC_Motor1_START+0xa>
     15a:	41 30       	cpi	r20, 0x01	; 1
     15c:	61 f0       	breq	.+24     	; 0x176 <DC_Motor1_START+0x20>
     15e:	08 95       	ret
	{
		case  Clock_Wise:
		DIO_SetPin_Value(M1_PORT, M1_DIR_PIN1, PIN_ON);
     160:	40 e0       	ldi	r20, 0x00	; 0
     162:	63 e0       	ldi	r22, 0x03	; 3
     164:	83 e0       	ldi	r24, 0x03	; 3
     166:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
		DIO_SetPin_Value(M1_PORT, M1_DIR_PIN2, PIN_OFF);
     16a:	41 e0       	ldi	r20, 0x01	; 1
     16c:	66 e0       	ldi	r22, 0x06	; 6
     16e:	83 e0       	ldi	r24, 0x03	; 3
     170:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
		break;
     174:	08 95       	ret
		case Anti_Clock_Wise:
		DIO_SetPin_Value(M1_PORT, M1_DIR_PIN1, PIN_OFF);
     176:	41 e0       	ldi	r20, 0x01	; 1
     178:	63 e0       	ldi	r22, 0x03	; 3
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
		DIO_SetPin_Value(M1_PORT, M1_DIR_PIN2, PIN_ON);
     180:	40 e0       	ldi	r20, 0x00	; 0
     182:	66 e0       	ldi	r22, 0x06	; 6
     184:	83 e0       	ldi	r24, 0x03	; 3
     186:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
     18a:	08 95       	ret

0000018c <DC_Motor1_STOP>:
	//PWM2_Gen(duty_cycle);
}

void DC_Motor1_STOP(void)
{
	DIO_SetPin_Value(M1_PORT, M1_DIR_PIN1, PIN_OFF);
     18c:	41 e0       	ldi	r20, 0x01	; 1
     18e:	63 e0       	ldi	r22, 0x03	; 3
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
	DIO_SetPin_Value(M1_PORT, M1_DIR_PIN2, PIN_OFF);
     196:	41 e0       	ldi	r20, 0x01	; 1
     198:	66 e0       	ldi	r22, 0x06	; 6
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
     1a0:	08 95       	ret

000001a2 <DIO_SetPin_Dir>:
     1a2:	44 23       	and	r20, r20
     1a4:	19 f0       	breq	.+6      	; 0x1ac <DIO_SetPin_Dir+0xa>
     1a6:	41 30       	cpi	r20, 0x01	; 1
     1a8:	c9 f1       	breq	.+114    	; 0x21c <DIO_SetPin_Dir+0x7a>
     1aa:	08 95       	ret
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	91 f0       	breq	.+36     	; 0x1d4 <DIO_SetPin_Dir+0x32>
     1b0:	28 f0       	brcs	.+10     	; 0x1bc <DIO_SetPin_Dir+0x1a>
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	d9 f0       	breq	.+54     	; 0x1ec <DIO_SetPin_Dir+0x4a>
     1b6:	83 30       	cpi	r24, 0x03	; 3
     1b8:	29 f1       	breq	.+74     	; 0x204 <DIO_SetPin_Dir+0x62>
     1ba:	08 95       	ret
     1bc:	2a b3       	in	r18, 0x1a	; 26
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_SetPin_Dir+0x26>
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_SetPin_Dir+0x22>
     1cc:	80 95       	com	r24
     1ce:	82 23       	and	r24, r18
     1d0:	8a bb       	out	0x1a, r24	; 26
     1d2:	08 95       	ret
     1d4:	27 b3       	in	r18, 0x17	; 23
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_SetPin_Dir+0x3e>
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	6a 95       	dec	r22
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_SetPin_Dir+0x3a>
     1e4:	80 95       	com	r24
     1e6:	82 23       	and	r24, r18
     1e8:	87 bb       	out	0x17, r24	; 23
     1ea:	08 95       	ret
     1ec:	24 b3       	in	r18, 0x14	; 20
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_SetPin_Dir+0x56>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	6a 95       	dec	r22
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_SetPin_Dir+0x52>
     1fc:	80 95       	com	r24
     1fe:	82 23       	and	r24, r18
     200:	84 bb       	out	0x14, r24	; 20
     202:	08 95       	ret
     204:	21 b3       	in	r18, 0x11	; 17
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPin_Dir+0x6e>
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	6a 95       	dec	r22
     212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPin_Dir+0x6a>
     214:	80 95       	com	r24
     216:	82 23       	and	r24, r18
     218:	81 bb       	out	0x11, r24	; 17
     21a:	08 95       	ret
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	89 f0       	breq	.+34     	; 0x242 <DIO_SetPin_Dir+0xa0>
     220:	28 f0       	brcs	.+10     	; 0x22c <DIO_SetPin_Dir+0x8a>
     222:	82 30       	cpi	r24, 0x02	; 2
     224:	c9 f0       	breq	.+50     	; 0x258 <DIO_SetPin_Dir+0xb6>
     226:	83 30       	cpi	r24, 0x03	; 3
     228:	11 f1       	breq	.+68     	; 0x26e <DIO_SetPin_Dir+0xcc>
     22a:	08 95       	ret
     22c:	2a b3       	in	r18, 0x1a	; 26
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPin_Dir+0x96>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	6a 95       	dec	r22
     23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPin_Dir+0x92>
     23c:	82 2b       	or	r24, r18
     23e:	8a bb       	out	0x1a, r24	; 26
     240:	08 95       	ret
     242:	27 b3       	in	r18, 0x17	; 23
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPin_Dir+0xac>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	6a 95       	dec	r22
     250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPin_Dir+0xa8>
     252:	82 2b       	or	r24, r18
     254:	87 bb       	out	0x17, r24	; 23
     256:	08 95       	ret
     258:	24 b3       	in	r18, 0x14	; 20
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_SetPin_Dir+0xc2>
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	6a 95       	dec	r22
     266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_SetPin_Dir+0xbe>
     268:	82 2b       	or	r24, r18
     26a:	84 bb       	out	0x14, r24	; 20
     26c:	08 95       	ret
     26e:	21 b3       	in	r18, 0x11	; 17
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPin_Dir+0xd8>
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	6a 95       	dec	r22
     27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPin_Dir+0xd4>
     27e:	82 2b       	or	r24, r18
     280:	81 bb       	out	0x11, r24	; 17
     282:	08 95       	ret

00000284 <DIO_SetPin_Value>:
     284:	44 23       	and	r20, r20
     286:	d9 f1       	breq	.+118    	; 0x2fe <DIO_SetPin_Value+0x7a>
     288:	41 30       	cpi	r20, 0x01	; 1
     28a:	09 f0       	breq	.+2      	; 0x28e <DIO_SetPin_Value+0xa>
     28c:	6b c0       	rjmp	.+214    	; 0x364 <DIO_SetPin_Value+0xe0>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	91 f0       	breq	.+36     	; 0x2b6 <DIO_SetPin_Value+0x32>
     292:	28 f0       	brcs	.+10     	; 0x29e <DIO_SetPin_Value+0x1a>
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	d9 f0       	breq	.+54     	; 0x2ce <DIO_SetPin_Value+0x4a>
     298:	83 30       	cpi	r24, 0x03	; 3
     29a:	29 f1       	breq	.+74     	; 0x2e6 <DIO_SetPin_Value+0x62>
     29c:	08 95       	ret
     29e:	2b b3       	in	r18, 0x1b	; 27
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_SetPin_Value+0x26>
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	6a 95       	dec	r22
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_SetPin_Value+0x22>
     2ae:	80 95       	com	r24
     2b0:	82 23       	and	r24, r18
     2b2:	8b bb       	out	0x1b, r24	; 27
     2b4:	08 95       	ret
     2b6:	28 b3       	in	r18, 0x18	; 24
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_SetPin_Value+0x3e>
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	6a 95       	dec	r22
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_SetPin_Value+0x3a>
     2c6:	80 95       	com	r24
     2c8:	82 23       	and	r24, r18
     2ca:	88 bb       	out	0x18, r24	; 24
     2cc:	08 95       	ret
     2ce:	25 b3       	in	r18, 0x15	; 21
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_SetPin_Value+0x56>
     2d6:	88 0f       	add	r24, r24
     2d8:	99 1f       	adc	r25, r25
     2da:	6a 95       	dec	r22
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_SetPin_Value+0x52>
     2de:	80 95       	com	r24
     2e0:	82 23       	and	r24, r18
     2e2:	85 bb       	out	0x15, r24	; 21
     2e4:	08 95       	ret
     2e6:	22 b3       	in	r18, 0x12	; 18
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_SetPin_Value+0x6e>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	6a 95       	dec	r22
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_SetPin_Value+0x6a>
     2f6:	80 95       	com	r24
     2f8:	82 23       	and	r24, r18
     2fa:	82 bb       	out	0x12, r24	; 18
     2fc:	08 95       	ret
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	89 f0       	breq	.+34     	; 0x324 <DIO_SetPin_Value+0xa0>
     302:	28 f0       	brcs	.+10     	; 0x30e <DIO_SetPin_Value+0x8a>
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	c9 f0       	breq	.+50     	; 0x33a <DIO_SetPin_Value+0xb6>
     308:	83 30       	cpi	r24, 0x03	; 3
     30a:	11 f1       	breq	.+68     	; 0x350 <DIO_SetPin_Value+0xcc>
     30c:	08 95       	ret
     30e:	2b b3       	in	r18, 0x1b	; 27
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_SetPin_Value+0x96>
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	6a 95       	dec	r22
     31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_SetPin_Value+0x92>
     31e:	82 2b       	or	r24, r18
     320:	8b bb       	out	0x1b, r24	; 27
     322:	08 95       	ret
     324:	28 b3       	in	r18, 0x18	; 24
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_SetPin_Value+0xac>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	6a 95       	dec	r22
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_SetPin_Value+0xa8>
     334:	82 2b       	or	r24, r18
     336:	88 bb       	out	0x18, r24	; 24
     338:	08 95       	ret
     33a:	25 b3       	in	r18, 0x15	; 21
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPin_Value+0xc2>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	6a 95       	dec	r22
     348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPin_Value+0xbe>
     34a:	82 2b       	or	r24, r18
     34c:	85 bb       	out	0x15, r24	; 21
     34e:	08 95       	ret
     350:	22 b3       	in	r18, 0x12	; 18
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPin_Value+0xd8>
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	6a 95       	dec	r22
     35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPin_Value+0xd4>
     360:	82 2b       	or	r24, r18
     362:	82 bb       	out	0x12, r24	; 18
     364:	08 95       	ret

00000366 <DIO_GetPin_Value>:
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	79 f0       	breq	.+30     	; 0x388 <DIO_GetPin_Value+0x22>
     36a:	28 f0       	brcs	.+10     	; 0x376 <DIO_GetPin_Value+0x10>
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	a9 f0       	breq	.+42     	; 0x39a <DIO_GetPin_Value+0x34>
     370:	83 30       	cpi	r24, 0x03	; 3
     372:	e1 f0       	breq	.+56     	; 0x3ac <DIO_GetPin_Value+0x46>
     374:	24 c0       	rjmp	.+72     	; 0x3be <DIO_GetPin_Value+0x58>
     376:	89 b3       	in	r24, 0x19	; 25
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_GetPin_Value+0x1a>
     37c:	95 95       	asr	r25
     37e:	87 95       	ror	r24
     380:	6a 95       	dec	r22
     382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_GetPin_Value+0x16>
     384:	81 70       	andi	r24, 0x01	; 1
     386:	08 95       	ret
     388:	86 b3       	in	r24, 0x16	; 22
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_GetPin_Value+0x2c>
     38e:	95 95       	asr	r25
     390:	87 95       	ror	r24
     392:	6a 95       	dec	r22
     394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_GetPin_Value+0x28>
     396:	81 70       	andi	r24, 0x01	; 1
     398:	08 95       	ret
     39a:	83 b3       	in	r24, 0x13	; 19
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_GetPin_Value+0x3e>
     3a0:	95 95       	asr	r25
     3a2:	87 95       	ror	r24
     3a4:	6a 95       	dec	r22
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_GetPin_Value+0x3a>
     3a8:	81 70       	andi	r24, 0x01	; 1
     3aa:	08 95       	ret
     3ac:	80 b3       	in	r24, 0x10	; 16
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_GetPin_Value+0x50>
     3b2:	95 95       	asr	r25
     3b4:	87 95       	ror	r24
     3b6:	6a 95       	dec	r22
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_GetPin_Value+0x4c>
     3ba:	81 70       	andi	r24, 0x01	; 1
     3bc:	08 95       	ret
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	08 95       	ret

000003c2 <DIO_TogglePin_Value>:
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	89 f0       	breq	.+34     	; 0x3e8 <DIO_TogglePin_Value+0x26>
     3c6:	28 f0       	brcs	.+10     	; 0x3d2 <DIO_TogglePin_Value+0x10>
     3c8:	82 30       	cpi	r24, 0x02	; 2
     3ca:	c9 f0       	breq	.+50     	; 0x3fe <DIO_TogglePin_Value+0x3c>
     3cc:	83 30       	cpi	r24, 0x03	; 3
     3ce:	11 f1       	breq	.+68     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3d0:	08 95       	ret
     3d2:	2b b3       	in	r18, 0x1b	; 27
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_TogglePin_Value+0x1c>
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	6a 95       	dec	r22
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_TogglePin_Value+0x18>
     3e2:	82 27       	eor	r24, r18
     3e4:	8b bb       	out	0x1b, r24	; 27
     3e6:	08 95       	ret
     3e8:	28 b3       	in	r18, 0x18	; 24
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_TogglePin_Value+0x32>
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	6a 95       	dec	r22
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_TogglePin_Value+0x2e>
     3f8:	82 27       	eor	r24, r18
     3fa:	88 bb       	out	0x18, r24	; 24
     3fc:	08 95       	ret
     3fe:	25 b3       	in	r18, 0x15	; 21
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	6a 95       	dec	r22
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     40e:	82 27       	eor	r24, r18
     410:	85 bb       	out	0x15, r24	; 21
     412:	08 95       	ret
     414:	22 b3       	in	r18, 0x12	; 18
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	6a 95       	dec	r22
     422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     424:	82 27       	eor	r24, r18
     426:	82 bb       	out	0x12, r24	; 18
     428:	08 95       	ret

0000042a <EEPROM_WriteByte>:
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	16 2f       	mov	r17, r22
     432:	d4 2f       	mov	r29, r20
     434:	88 30       	cpi	r24, 0x08	; 8
     436:	08 f0       	brcs	.+2      	; 0x43a <EEPROM_WriteByte+0x10>
     438:	87 e0       	ldi	r24, 0x07	; 7
     43a:	c8 2f       	mov	r28, r24
     43c:	c0 65       	ori	r28, 0x50	; 80
     43e:	0e 94 b3 07 	call	0xf66	; 0xf66 <I2C_SendStartCond>
     442:	8c 2f       	mov	r24, r28
     444:	0e 94 bf 07 	call	0xf7e	; 0xf7e <I2C_SendSlaveAdd_WriteOP>
     448:	81 2f       	mov	r24, r17
     44a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <I2C_SendData>
     44e:	8d 2f       	mov	r24, r29
     450:	0e 94 db 07 	call	0xfb6	; 0xfb6 <I2C_SendData>
     454:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <I2C_SendStopCond>
     458:	8f e3       	ldi	r24, 0x3F	; 63
     45a:	9c e9       	ldi	r25, 0x9C	; 156
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <EEPROM_WriteByte+0x32>
     460:	00 c0       	rjmp	.+0      	; 0x462 <EEPROM_WriteByte+0x38>
     462:	00 00       	nop
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	1f 91       	pop	r17
     46a:	08 95       	ret

0000046c <EEPROM_ReadByte>:
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	d6 2f       	mov	r29, r22
     472:	88 30       	cpi	r24, 0x08	; 8
     474:	08 f0       	brcs	.+2      	; 0x478 <EEPROM_ReadByte+0xc>
     476:	87 e0       	ldi	r24, 0x07	; 7
     478:	c8 2f       	mov	r28, r24
     47a:	c0 65       	ori	r28, 0x50	; 80
     47c:	0e 94 b3 07 	call	0xf66	; 0xf66 <I2C_SendStartCond>
     480:	8c 2f       	mov	r24, r28
     482:	0e 94 bf 07 	call	0xf7e	; 0xf7e <I2C_SendSlaveAdd_WriteOP>
     486:	8d 2f       	mov	r24, r29
     488:	0e 94 db 07 	call	0xfb6	; 0xfb6 <I2C_SendData>
     48c:	0e 94 b9 07 	call	0xf72	; 0xf72 <I2C_SendRepStartCond>
     490:	8c 2f       	mov	r24, r28
     492:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <I2C_SendSlaveAdd_ReadOP>
     496:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <I2C_ReadData>
     49a:	c8 2f       	mov	r28, r24
     49c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <I2C_SendStopCond>
     4a0:	8c 2f       	mov	r24, r28
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <__vector_1>:

    /*EXT INT0 Trigger*/
    MCUCR |= EXT_INT2_Trigger;
}

ISR(INT0_vect) {
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	2f 92       	push	r2
     4b4:	3f 92       	push	r3
     4b6:	4f 92       	push	r4
     4b8:	5f 92       	push	r5
     4ba:	7f 92       	push	r7
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	2f 93       	push	r18
     4d2:	3f 93       	push	r19
     4d4:	4f 93       	push	r20
     4d6:	5f 93       	push	r21
     4d8:	6f 93       	push	r22
     4da:	7f 93       	push	r23
     4dc:	8f 93       	push	r24
     4de:	9f 93       	push	r25
     4e0:	af 93       	push	r26
     4e2:	bf 93       	push	r27
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	28 97       	sbiw	r28, 0x08	; 8
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	cd bf       	out	0x3d, r28	; 61
    // Write the first external interrupt handler here
    if (!eme_check) {
     4f6:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
     4fa:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <eme_check+0x1>
     4fe:	89 2b       	or	r24, r25
     500:	09 f0       	breq	.+2      	; 0x504 <__vector_1+0x5c>
     502:	d3 c1       	rjmp	.+934    	; 0x8aa <__stack+0x4b>
        Uint8 k = 0;
        Uint8 i = 0;
        Uint8 user[2][4];
        LCD_Clear();
     504:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
        UART_TX_Str("\r\n");
     508:	85 ef       	ldi	r24, 0xF5	; 245
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("The system is busy!\r\n");
     510:	81 e7       	ldi	r24, 0x71	; 113
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        Servoo_Motor(97);
     518:	61 e6       	ldi	r22, 0x61	; 97
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <Servoo_Motor>

        for (Uint8 j = 0; j < 3; j++) {
     524:	71 2c       	mov	r7, r1
}

ISR(INT0_vect) {
    // Write the first external interrupt handler here
    if (!eme_check) {
        Uint8 k = 0;
     526:	00 e0       	ldi	r16, 0x00	; 0
        LCD_Clear();
        UART_TX_Str("\r\n");
        UART_TX_Str("The system is busy!\r\n");
        Servoo_Motor(97);

        for (Uint8 j = 0; j < 3; j++) {
     528:	ac c1       	rjmp	.+856    	; 0x882 <__stack+0x23>
            i = 0;
            LCD_Write_String("user name:");
     52a:	87 e8       	ldi	r24, 0x87	; 135
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
        UART_TX_Str("\r\n");
        UART_TX_Str("The system is busy!\r\n");
        Servoo_Motor(97);

        for (Uint8 j = 0; j < 3; j++) {
            i = 0;
     532:	10 e0       	ldi	r17, 0x00	; 0
            LCD_Write_String("user name:");
            while (i < 4) {
     534:	15 c0       	rjmp	.+42     	; 0x560 <__vector_1+0xb8>
                button = Keypad_GetValue();
     536:	0e 94 ef 07 	call	0xfde	; 0xfde <Keypad_GetValue>
     53a:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <button>

                while (button != NULL_KEYPAD) {
     53e:	0c c0       	rjmp	.+24     	; 0x558 <__vector_1+0xb0>
                    user[0][i] = button;
     540:	e1 e0       	ldi	r30, 0x01	; 1
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	ec 0f       	add	r30, r28
     546:	fd 1f       	adc	r31, r29
     548:	e1 0f       	add	r30, r17
     54a:	f1 1d       	adc	r31, r1
     54c:	80 83       	st	Z, r24
                    LCD_Write_Char(button);
     54e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_Write_Char>
                    button = NULL_KEYPAD;
     552:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <button>
                    i++;
     556:	1f 5f       	subi	r17, 0xFF	; 255
            i = 0;
            LCD_Write_String("user name:");
            while (i < 4) {
                button = Keypad_GetValue();

                while (button != NULL_KEYPAD) {
     558:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <button>
     55c:	81 11       	cpse	r24, r1
     55e:	f0 cf       	rjmp	.-32     	; 0x540 <__vector_1+0x98>
        Servoo_Motor(97);

        for (Uint8 j = 0; j < 3; j++) {
            i = 0;
            LCD_Write_String("user name:");
            while (i < 4) {
     560:	14 30       	cpi	r17, 0x04	; 4
     562:	48 f3       	brcs	.-46     	; 0x536 <__vector_1+0x8e>
                    button = NULL_KEYPAD;
                    i++;
                }
            }
            i = 0;
            LCD_Goto(1, 0);
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
            LCD_Write_String("password:");
     56c:	82 e9       	ldi	r24, 0x92	; 146
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                    LCD_Write_Char(button);
                    button = NULL_KEYPAD;
                    i++;
                }
            }
            i = 0;
     574:	10 e0       	ldi	r17, 0x00	; 0
            LCD_Goto(1, 0);
            LCD_Write_String("password:");
            while (i < 4) {
     576:	16 c0       	rjmp	.+44     	; 0x5a4 <__vector_1+0xfc>
                button = Keypad_GetValue();
     578:	0e 94 ef 07 	call	0xfde	; 0xfde <Keypad_GetValue>
     57c:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <button>
                while (button != NULL_KEYPAD) {
     580:	0d c0       	rjmp	.+26     	; 0x59c <__vector_1+0xf4>
                    user[1][i] = button;
     582:	e5 e0       	ldi	r30, 0x05	; 5
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	ec 0f       	add	r30, r28
     588:	fd 1f       	adc	r31, r29
     58a:	e1 0f       	add	r30, r17
     58c:	f1 1d       	adc	r31, r1
     58e:	80 83       	st	Z, r24
                    LCD_Write_Char('*');
     590:	8a e2       	ldi	r24, 0x2A	; 42
     592:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_Write_Char>
                    button = NULL_KEYPAD;
     596:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <button>
                    i++;
     59a:	1f 5f       	subi	r17, 0xFF	; 255
            i = 0;
            LCD_Goto(1, 0);
            LCD_Write_String("password:");
            while (i < 4) {
                button = Keypad_GetValue();
                while (button != NULL_KEYPAD) {
     59c:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <button>
     5a0:	81 11       	cpse	r24, r1
     5a2:	ef cf       	rjmp	.-34     	; 0x582 <__vector_1+0xda>
                }
            }
            i = 0;
            LCD_Goto(1, 0);
            LCD_Write_String("password:");
            while (i < 4) {
     5a4:	14 30       	cpi	r17, 0x04	; 4
     5a6:	40 f3       	brcs	.-48     	; 0x578 <__vector_1+0xd0>
                    button = NULL_KEYPAD;
                    i++;
                }
            }

            LCD_Clear();
     5a8:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
            LCD_Write_String("Show password *");
     5ac:	8c e9       	ldi	r24, 0x9C	; 156
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
            LCD_Goto(1, 0);
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
            LCD_Write_String("other press #");
     5bc:	8c ea       	ldi	r24, 0xAC	; 172
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>

            while (!(button == '*' || button == '#'))
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <__vector_1+0x126>
                button = Keypad_GetValue();
     5c6:	0e 94 ef 07 	call	0xfde	; 0xfde <Keypad_GetValue>
     5ca:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <button>
            LCD_Clear();
            LCD_Write_String("Show password *");
            LCD_Goto(1, 0);
            LCD_Write_String("other press #");

            while (!(button == '*' || button == '#'))
     5ce:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <button>
     5d2:	8a 32       	cpi	r24, 0x2A	; 42
     5d4:	11 f0       	breq	.+4      	; 0x5da <__vector_1+0x132>
     5d6:	83 32       	cpi	r24, 0x23	; 35
     5d8:	b1 f7       	brne	.-20     	; 0x5c6 <__vector_1+0x11e>
                button = Keypad_GetValue();

            if (button == '*') {
     5da:	8a 32       	cpi	r24, 0x2A	; 42
     5dc:	e9 f4       	brne	.+58     	; 0x618 <__vector_1+0x170>
                LCD_Clear();
     5de:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                LCD_Write_String("password:");
     5e2:	82 e9       	ldi	r24, 0x92	; 146
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                i = 0;
     5ea:	10 e0       	ldi	r17, 0x00	; 0
                while (i < 4) {
     5ec:	0a c0       	rjmp	.+20     	; 0x602 <__vector_1+0x15a>
                    LCD_Write_Char(user[1][i]);
     5ee:	e5 e0       	ldi	r30, 0x05	; 5
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	ec 0f       	add	r30, r28
     5f4:	fd 1f       	adc	r31, r29
     5f6:	e1 0f       	add	r30, r17
     5f8:	f1 1d       	adc	r31, r1
     5fa:	80 81       	ld	r24, Z
     5fc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_Write_Char>
                    i++;
     600:	1f 5f       	subi	r17, 0xFF	; 255

            if (button == '*') {
                LCD_Clear();
                LCD_Write_String("password:");
                i = 0;
                while (i < 4) {
     602:	14 30       	cpi	r17, 0x04	; 4
     604:	a0 f3       	brcs	.-24     	; 0x5ee <__vector_1+0x146>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     606:	2f ef       	ldi	r18, 0xFF	; 255
     608:	89 e6       	ldi	r24, 0x69	; 105
     60a:	98 e1       	ldi	r25, 0x18	; 24
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	80 40       	sbci	r24, 0x00	; 0
     610:	90 40       	sbci	r25, 0x00	; 0
     612:	e1 f7       	brne	.-8      	; 0x60c <__vector_1+0x164>
     614:	00 c0       	rjmp	.+0      	; 0x616 <__vector_1+0x16e>
     616:	00 00       	nop
                    i++;
                }
                _delay_ms(500);

            }
            LCD_Clear();
     618:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>

            for (Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4) {
     61c:	10 e0       	ldi	r17, 0x00	; 0
     61e:	06 c1       	rjmp	.+524    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
                /*----------------->Username Check<------------------*/

                if (user[0][0] == EEPROM_ReadByte(0, Check_Counter + 1) && user[0][1] == EEPROM_ReadByte(0, Check_Counter + 2) && user[0][2] == EEPROM_ReadByte(0, Check_Counter + 3) && user[0][3] == EEPROM_ReadByte(0, Check_Counter + 4))
     620:	a9 80       	ldd	r10, Y+1	; 0x01
     622:	b1 2c       	mov	r11, r1
     624:	e1 2e       	mov	r14, r17
     626:	f1 2c       	mov	r15, r1
     628:	67 01       	movw	r12, r14
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	c2 1a       	sub	r12, r18
     62e:	d2 0a       	sbc	r13, r18
     630:	b6 01       	movw	r22, r12
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
     63a:	a8 16       	cp	r10, r24
     63c:	b9 06       	cpc	r11, r25
     63e:	09 f0       	breq	.+2      	; 0x642 <__vector_1+0x19a>
     640:	f4 c0       	rjmp	.+488    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     642:	aa 80       	ldd	r10, Y+2	; 0x02
     644:	b1 2c       	mov	r11, r1
     646:	47 01       	movw	r8, r14
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	88 0e       	add	r8, r24
     64c:	91 1c       	adc	r9, r1
     64e:	b4 01       	movw	r22, r8
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
     658:	a8 16       	cp	r10, r24
     65a:	b9 06       	cpc	r11, r25
     65c:	09 f0       	breq	.+2      	; 0x660 <__vector_1+0x1b8>
     65e:	e5 c0       	rjmp	.+458    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     660:	ab 80       	ldd	r10, Y+3	; 0x03
     662:	b1 2c       	mov	r11, r1
     664:	17 01       	movw	r2, r14
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	29 0e       	add	r2, r25
     66a:	31 1c       	adc	r3, r1
     66c:	b1 01       	movw	r22, r2
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
     676:	a8 16       	cp	r10, r24
     678:	b9 06       	cpc	r11, r25
     67a:	09 f0       	breq	.+2      	; 0x67e <__vector_1+0x1d6>
     67c:	d6 c0       	rjmp	.+428    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     67e:	4c 80       	ldd	r4, Y+4	; 0x04
     680:	51 2c       	mov	r5, r1
     682:	57 01       	movw	r10, r14
     684:	24 e0       	ldi	r18, 0x04	; 4
     686:	a2 0e       	add	r10, r18
     688:	b1 1c       	adc	r11, r1
     68a:	b5 01       	movw	r22, r10
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
     694:	48 16       	cp	r4, r24
     696:	59 06       	cpc	r5, r25
     698:	09 f0       	breq	.+2      	; 0x69c <__vector_1+0x1f4>
     69a:	c7 c0       	rjmp	.+398    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>

                {
                    /*----------------->Password Check<------------------*/

                    if (user[1][0] == EEPROM_ReadByte(1, Check_Counter + 1) && user[1][1] == EEPROM_ReadByte(1, Check_Counter + 2) && user[1][2] == EEPROM_ReadByte(1, Check_Counter + 3) && user[1][3] == EEPROM_ReadByte(1, Check_Counter + 4))
     69c:	ed 80       	ldd	r14, Y+5	; 0x05
     69e:	f1 2c       	mov	r15, r1
     6a0:	b6 01       	movw	r22, r12
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
     6aa:	e8 16       	cp	r14, r24
     6ac:	f9 06       	cpc	r15, r25
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <__vector_1+0x20a>
     6b0:	bc c0       	rjmp	.+376    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     6b2:	ee 80       	ldd	r14, Y+6	; 0x06
     6b4:	f1 2c       	mov	r15, r1
     6b6:	b4 01       	movw	r22, r8
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
     6c0:	e8 16       	cp	r14, r24
     6c2:	f9 06       	cpc	r15, r25
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <__vector_1+0x220>
     6c6:	b1 c0       	rjmp	.+354    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     6c8:	ef 80       	ldd	r14, Y+7	; 0x07
     6ca:	f1 2c       	mov	r15, r1
     6cc:	b1 01       	movw	r22, r2
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
     6d6:	e8 16       	cp	r14, r24
     6d8:	f9 06       	cpc	r15, r25
     6da:	09 f0       	breq	.+2      	; 0x6de <__vector_1+0x236>
     6dc:	a6 c0       	rjmp	.+332    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     6de:	e8 84       	ldd	r14, Y+8	; 0x08
     6e0:	f1 2c       	mov	r15, r1
     6e2:	b5 01       	movw	r22, r10
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
     6ec:	e8 16       	cp	r14, r24
     6ee:	f9 06       	cpc	r15, r25
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <__vector_1+0x24c>
     6f2:	9b c0       	rjmp	.+310    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
                    {
                        /*----------------->Wright Username & Password<-----------------*/
                        j = 4;
                        k = 4;

                        if (SYS_Check == 0 || SYS_Check == 2) {
     6f4:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <SYS_Check>
     6f8:	88 23       	and	r24, r24
     6fa:	11 f0       	breq	.+4      	; 0x700 <__vector_1+0x258>
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	29 f5       	brne	.+74     	; 0x74a <__vector_1+0x2a2>
                            eme_check = 1;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <eme_check+0x1>
     708:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <eme_check>
							LCD_Write_String("User verified");
     70c:	8a eb       	ldi	r24, 0xBA	; 186
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
							LCD_Goto(1, 0);
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
							LCD_Write_String("Welcome!");
     71c:	88 ec       	ldi	r24, 0xC8	; 200
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
							Check_Counter = KP_Counter + 1;
     724:	10 91 f1 06 	lds	r17, 0x06F1	; 0x8006f1 <KP_Counter>
     728:	1f 5f       	subi	r17, 0xFF	; 255
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	99 e6       	ldi	r25, 0x69	; 105
     72e:	28 e1       	ldi	r18, 0x18	; 24
     730:	81 50       	subi	r24, 0x01	; 1
     732:	90 40       	sbci	r25, 0x00	; 0
     734:	20 40       	sbci	r18, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <__vector_1+0x288>
     738:	00 c0       	rjmp	.+0      	; 0x73a <__vector_1+0x292>
     73a:	00 00       	nop
							_delay_ms(500); 
							LCD_Clear();
     73c:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>

                    if (user[1][0] == EEPROM_ReadByte(1, Check_Counter + 1) && user[1][1] == EEPROM_ReadByte(1, Check_Counter + 2) && user[1][2] == EEPROM_ReadByte(1, Check_Counter + 3) && user[1][3] == EEPROM_ReadByte(1, Check_Counter + 4))

                    {
                        /*----------------->Wright Username & Password<-----------------*/
                        j = 4;
     740:	68 94       	set
     742:	77 24       	eor	r7, r7
     744:	72 f8       	bld	r7, 2
                        k = 4;
     746:	04 e0       	ldi	r16, 0x04	; 4
							LCD_Write_String("User verified");
							LCD_Goto(1, 0);
							LCD_Write_String("Welcome!");
							Check_Counter = KP_Counter + 1;
							_delay_ms(500); 
							LCD_Clear();
     748:	70 c0       	rjmp	.+224    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
                        } else if (SYS_Check == 1) {
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	09 f0       	breq	.+2      	; 0x750 <__vector_1+0x2a8>
     74e:	69 c0       	rjmp	.+210    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
							LCD_Clear();
     750:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
							LCD_Write_String("Asking Admin");
     754:	81 ed       	ldi	r24, 0xD1	; 209
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
     75c:	8f ef       	ldi	r24, 0xFF	; 255
     75e:	99 e6       	ldi	r25, 0x69	; 105
     760:	28 e1       	ldi	r18, 0x18	; 24
     762:	81 50       	subi	r24, 0x01	; 1
     764:	90 40       	sbci	r25, 0x00	; 0
     766:	20 40       	sbci	r18, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <__vector_1+0x2ba>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <__vector_1+0x2c4>
     76c:	00 00       	nop
							_delay_ms(500); 
							LCD_Clear();
     76e:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
							
                            UART_TX_Str("\r\n");
     772:	85 ef       	ldi	r24, 0xF5	; 245
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("1.Accept user request to control the system\r\n");
     77a:	8e ed       	ldi	r24, 0xDE	; 222
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("2.Reject user request to control the system\r\n");
     782:	8c e0       	ldi	r24, 0x0C	; 12
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("\r\n");
     78a:	85 ef       	ldi	r24, 0xF5	; 245
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("\r\n");
     792:	85 ef       	ldi	r24, 0xF5	; 245
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            while (!Get_Bit(UCSRA, 7));
     79a:	5f 9b       	sbis	0x0b, 7	; 11
     79c:	fe cf       	rjmp	.-4      	; 0x79a <__vector_1+0x2f2>
							UART_GetValue = UDR;
     79e:	8c b1       	in	r24, 0x0c	; 12
     7a0:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>
                            UART_TX_Str("\r\n");
     7a4:	85 ef       	ldi	r24, 0xF5	; 245
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            if (UART_GetValue == '1') {
     7ac:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <UART_GetValue>
     7b0:	81 33       	cpi	r24, 0x31	; 49
     7b2:	a9 f4       	brne	.+42     	; 0x7de <__vector_1+0x336>
                                eme_check = 1;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <eme_check+0x1>
     7bc:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <eme_check>
								LCD_Write_String("User verified");
     7c0:	8a eb       	ldi	r24, 0xBA	; 186
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
								LCD_Goto(1, 0);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
								LCD_Write_String("Welcome!");
     7d0:	88 ec       	ldi	r24, 0xC8	; 200
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
								Timer2_Stop();
     7d8:	0e 94 85 0b 	call	0x170a	; 0x170a <Timer2_Stop>
     7dc:	0c c0       	rjmp	.+24     	; 0x7f6 <__vector_1+0x34e>
                            } else if (UART_GetValue == '2') {
     7de:	82 33       	cpi	r24, 0x32	; 50
     7e0:	51 f4       	brne	.+20     	; 0x7f6 <__vector_1+0x34e>
                                eme_check = 0;
     7e2:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <eme_check+0x1>
     7e6:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <eme_check>
								LCD_Clear();
     7ea:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
								LCD_Write_String("Admin Denied");
     7ee:	8a e3       	ldi	r24, 0x3A	; 58
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                            }
							Check_Counter = KP_Counter + 1;
     7f6:	10 91 f1 06 	lds	r17, 0x06F1	; 0x8006f1 <KP_Counter>
     7fa:	1f 5f       	subi	r17, 0xFF	; 255
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	99 e6       	ldi	r25, 0x69	; 105
     800:	28 e1       	ldi	r18, 0x18	; 24
     802:	81 50       	subi	r24, 0x01	; 1
     804:	90 40       	sbci	r25, 0x00	; 0
     806:	20 40       	sbci	r18, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
							_delay_ms(500);
							LCD_Clear();
     80e:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
							UART_GetValue = 8;
     812:	88 e0       	ldi	r24, 0x08	; 8
     814:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>

                    if (user[1][0] == EEPROM_ReadByte(1, Check_Counter + 1) && user[1][1] == EEPROM_ReadByte(1, Check_Counter + 2) && user[1][2] == EEPROM_ReadByte(1, Check_Counter + 3) && user[1][3] == EEPROM_ReadByte(1, Check_Counter + 4))

                    {
                        /*----------------->Wright Username & Password<-----------------*/
                        j = 4;
     818:	68 94       	set
     81a:	77 24       	eor	r7, r7
     81c:	72 f8       	bld	r7, 2
                        k = 4;
     81e:	04 e0       	ldi	r16, 0x04	; 4
     820:	04 c0       	rjmp	.+8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>

                    if (user[1][0] == EEPROM_ReadByte(1, Check_Counter + 1) && user[1][1] == EEPROM_ReadByte(1, Check_Counter + 2) && user[1][2] == EEPROM_ReadByte(1, Check_Counter + 3) && user[1][3] == EEPROM_ReadByte(1, Check_Counter + 4))

                    {
                        /*----------------->Wright Username & Password<-----------------*/
                        j = 4;
     822:	68 94       	set
     824:	77 24       	eor	r7, r7
     826:	72 f8       	bld	r7, 2
                        k = 4;
     828:	04 e0       	ldi	r16, 0x04	; 4
                _delay_ms(500);

            }
            LCD_Clear();

            for (Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4) {
     82a:	1c 5f       	subi	r17, 0xFC	; 252
     82c:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <KP_Counter>
     830:	81 17       	cp	r24, r17
     832:	08 f0       	brcs	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     834:	f5 ce       	rjmp	.-534    	; 0x620 <__vector_1+0x178>
                    }
                }
            }

            /*----------------->Wrong Username or Password<-----------------*/
            if (k != 4) {
     836:	04 30       	cpi	r16, 0x04	; 4
     838:	b9 f0       	breq	.+46     	; 0x868 <__stack+0x9>
                LCD_Write_String("User/Pass Wrong");
     83a:	87 e4       	ldi	r24, 0x47	; 71
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                LCD_Goto(1, 0);
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
                LCD_Write_String("Try again");
     84a:	87 e5       	ldi	r24, 0x57	; 87
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	99 e6       	ldi	r25, 0x69	; 105
     856:	28 e1       	ldi	r18, 0x18	; 24
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	90 40       	sbci	r25, 0x00	; 0
     85c:	20 40       	sbci	r18, 0x00	; 0
     85e:	e1 f7       	brne	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
     862:	00 00       	nop
                _delay_ms(500);
                LCD_Clear();
     864:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
            }
            k++;
     868:	0f 5f       	subi	r16, 0xFF	; 255

            if (k == 3) {
     86a:	03 30       	cpi	r16, 0x03	; 3
     86c:	49 f4       	brne	.+18     	; 0x880 <__stack+0x21>
                LCD_Clear();
     86e:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                LCD_Write_String("Firing Alarm!");
     872:	81 e6       	ldi	r24, 0x61	; 97
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>

                while (1) {
                    Alarm_Fn();
     87a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Alarm_Fn>
     87e:	fd cf       	rjmp	.-6      	; 0x87a <__stack+0x1b>
        LCD_Clear();
        UART_TX_Str("\r\n");
        UART_TX_Str("The system is busy!\r\n");
        Servoo_Motor(97);

        for (Uint8 j = 0; j < 3; j++) {
     880:	73 94       	inc	r7
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	87 15       	cp	r24, r7
     886:	08 f0       	brcs	.+2      	; 0x88a <__stack+0x2b>
     888:	50 ce       	rjmp	.-864    	; 0x52a <__vector_1+0x82>
                    Alarm_Fn();
                }
            }
        }

        UART_TX_Str("System online!\r\n");
     88a:	8f e6       	ldi	r24, 0x6F	; 111
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("Press any key to control the system\r\n");
     892:	80 e8       	ldi	r24, 0x80	; 128
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("\r\n");
     89a:	85 ef       	ldi	r24, 0xF5	; 245
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("\r\n");
     8a2:	85 ef       	ldi	r24, 0xF5	; 245
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    }
     8aa:	28 96       	adiw	r28, 0x08	; 8
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	9f 90       	pop	r9
     8e4:	8f 90       	pop	r8
     8e6:	7f 90       	pop	r7
     8e8:	5f 90       	pop	r5
     8ea:	4f 90       	pop	r4
     8ec:	3f 90       	pop	r3
     8ee:	2f 90       	pop	r2
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <Alarm_Fn>:
     8fa:	0e 94 9a 00 	call	0x134	; 0x134 <Buzzer_ON>
     8fe:	0e 94 a8 09 	call	0x1350	; 0x1350 <LED3_ON>
     902:	0e 94 b9 09 	call	0x1372	; 0x1372 <LED4_ON>
     906:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     90a:	2f ef       	ldi	r18, 0xFF	; 255
     90c:	8d ee       	ldi	r24, 0xED	; 237
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	21 50       	subi	r18, 0x01	; 1
     912:	80 40       	sbci	r24, 0x00	; 0
     914:	90 40       	sbci	r25, 0x00	; 0
     916:	e1 f7       	brne	.-8      	; 0x910 <Alarm_Fn+0x16>
     918:	00 c0       	rjmp	.+0      	; 0x91a <Alarm_Fn+0x20>
     91a:	00 00       	nop
     91c:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     920:	2f ef       	ldi	r18, 0xFF	; 255
     922:	8d ee       	ldi	r24, 0xED	; 237
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	21 50       	subi	r18, 0x01	; 1
     928:	80 40       	sbci	r24, 0x00	; 0
     92a:	90 40       	sbci	r25, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <Alarm_Fn+0x2c>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <Alarm_Fn+0x36>
     930:	00 00       	nop
     932:	0e 94 a8 09 	call	0x1350	; 0x1350 <LED3_ON>
     936:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     93a:	2f ef       	ldi	r18, 0xFF	; 255
     93c:	8d ee       	ldi	r24, 0xED	; 237
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	21 50       	subi	r18, 0x01	; 1
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	90 40       	sbci	r25, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <Alarm_Fn+0x46>
     948:	00 c0       	rjmp	.+0      	; 0x94a <Alarm_Fn+0x50>
     94a:	00 00       	nop
     94c:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     950:	2f ef       	ldi	r18, 0xFF	; 255
     952:	8d ee       	ldi	r24, 0xED	; 237
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	21 50       	subi	r18, 0x01	; 1
     958:	80 40       	sbci	r24, 0x00	; 0
     95a:	90 40       	sbci	r25, 0x00	; 0
     95c:	e1 f7       	brne	.-8      	; 0x956 <Alarm_Fn+0x5c>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <Alarm_Fn+0x66>
     960:	00 00       	nop
     962:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	8d ee       	ldi	r24, 0xED	; 237
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	21 50       	subi	r18, 0x01	; 1
     96e:	80 40       	sbci	r24, 0x00	; 0
     970:	90 40       	sbci	r25, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <Alarm_Fn+0x72>
     974:	00 c0       	rjmp	.+0      	; 0x976 <Alarm_Fn+0x7c>
     976:	00 00       	nop
     978:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     97c:	2f ef       	ldi	r18, 0xFF	; 255
     97e:	8d ee       	ldi	r24, 0xED	; 237
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	21 50       	subi	r18, 0x01	; 1
     984:	80 40       	sbci	r24, 0x00	; 0
     986:	90 40       	sbci	r25, 0x00	; 0
     988:	e1 f7       	brne	.-8      	; 0x982 <Alarm_Fn+0x88>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <Alarm_Fn+0x92>
     98c:	00 00       	nop
     98e:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     992:	2f ef       	ldi	r18, 0xFF	; 255
     994:	8d ee       	ldi	r24, 0xED	; 237
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	21 50       	subi	r18, 0x01	; 1
     99a:	80 40       	sbci	r24, 0x00	; 0
     99c:	90 40       	sbci	r25, 0x00	; 0
     99e:	e1 f7       	brne	.-8      	; 0x998 <Alarm_Fn+0x9e>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <Alarm_Fn+0xa8>
     9a2:	00 00       	nop
     9a4:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     9a8:	2f ef       	ldi	r18, 0xFF	; 255
     9aa:	8d ee       	ldi	r24, 0xED	; 237
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	21 50       	subi	r18, 0x01	; 1
     9b0:	80 40       	sbci	r24, 0x00	; 0
     9b2:	90 40       	sbci	r25, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <Alarm_Fn+0xb4>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <Alarm_Fn+0xbe>
     9b8:	00 00       	nop
     9ba:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     9be:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     9c2:	2f ef       	ldi	r18, 0xFF	; 255
     9c4:	8d ee       	ldi	r24, 0xED	; 237
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	80 40       	sbci	r24, 0x00	; 0
     9cc:	90 40       	sbci	r25, 0x00	; 0
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <Alarm_Fn+0xce>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <Alarm_Fn+0xd8>
     9d2:	00 00       	nop
     9d4:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     9d8:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     9dc:	2f ef       	ldi	r18, 0xFF	; 255
     9de:	8d ee       	ldi	r24, 0xED	; 237
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	21 50       	subi	r18, 0x01	; 1
     9e4:	80 40       	sbci	r24, 0x00	; 0
     9e6:	90 40       	sbci	r25, 0x00	; 0
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <Alarm_Fn+0xe8>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <Alarm_Fn+0xf2>
     9ec:	00 00       	nop
     9ee:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     9f2:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     9f6:	2f ef       	ldi	r18, 0xFF	; 255
     9f8:	8d ee       	ldi	r24, 0xED	; 237
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	21 50       	subi	r18, 0x01	; 1
     9fe:	80 40       	sbci	r24, 0x00	; 0
     a00:	90 40       	sbci	r25, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <Alarm_Fn+0x102>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <Alarm_Fn+0x10c>
     a06:	00 00       	nop
     a08:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     a0c:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	8d ee       	ldi	r24, 0xED	; 237
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	80 40       	sbci	r24, 0x00	; 0
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <Alarm_Fn+0x11c>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <Alarm_Fn+0x126>
     a20:	00 00       	nop
     a22:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     a26:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     a2a:	2f ef       	ldi	r18, 0xFF	; 255
     a2c:	8d ee       	ldi	r24, 0xED	; 237
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	21 50       	subi	r18, 0x01	; 1
     a32:	80 40       	sbci	r24, 0x00	; 0
     a34:	90 40       	sbci	r25, 0x00	; 0
     a36:	e1 f7       	brne	.-8      	; 0xa30 <Alarm_Fn+0x136>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <Alarm_Fn+0x140>
     a3a:	00 00       	nop
     a3c:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	8d ee       	ldi	r24, 0xED	; 237
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	21 50       	subi	r18, 0x01	; 1
     a48:	80 40       	sbci	r24, 0x00	; 0
     a4a:	90 40       	sbci	r25, 0x00	; 0
     a4c:	e1 f7       	brne	.-8      	; 0xa46 <Alarm_Fn+0x14c>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <Alarm_Fn+0x156>
     a50:	00 00       	nop
     a52:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     a56:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	8d ee       	ldi	r24, 0xED	; 237
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	80 40       	sbci	r24, 0x00	; 0
     a64:	90 40       	sbci	r25, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <Alarm_Fn+0x166>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <Alarm_Fn+0x170>
     a6a:	00 00       	nop
     a6c:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	8d ee       	ldi	r24, 0xED	; 237
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <Alarm_Fn+0x17c>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <Alarm_Fn+0x186>
     a80:	00 00       	nop
     a82:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     a86:	2f ef       	ldi	r18, 0xFF	; 255
     a88:	8d ee       	ldi	r24, 0xED	; 237
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	21 50       	subi	r18, 0x01	; 1
     a8e:	80 40       	sbci	r24, 0x00	; 0
     a90:	90 40       	sbci	r25, 0x00	; 0
     a92:	e1 f7       	brne	.-8      	; 0xa8c <Alarm_Fn+0x192>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <Alarm_Fn+0x19c>
     a96:	00 00       	nop
     a98:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     a9c:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	8d ee       	ldi	r24, 0xED	; 237
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	80 40       	sbci	r24, 0x00	; 0
     aaa:	90 40       	sbci	r25, 0x00	; 0
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <Alarm_Fn+0x1ac>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <Alarm_Fn+0x1b6>
     ab0:	00 00       	nop
     ab2:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	8d ee       	ldi	r24, 0xED	; 237
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	90 40       	sbci	r25, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <Alarm_Fn+0x1c2>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <Alarm_Fn+0x1cc>
     ac6:	00 00       	nop
     ac8:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     acc:	2f ef       	ldi	r18, 0xFF	; 255
     ace:	8d ee       	ldi	r24, 0xED	; 237
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	21 50       	subi	r18, 0x01	; 1
     ad4:	80 40       	sbci	r24, 0x00	; 0
     ad6:	90 40       	sbci	r25, 0x00	; 0
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <Alarm_Fn+0x1d8>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <Alarm_Fn+0x1e2>
     adc:	00 00       	nop
     ade:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     ae2:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     ae6:	2f ef       	ldi	r18, 0xFF	; 255
     ae8:	8d ee       	ldi	r24, 0xED	; 237
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	21 50       	subi	r18, 0x01	; 1
     aee:	80 40       	sbci	r24, 0x00	; 0
     af0:	90 40       	sbci	r25, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <Alarm_Fn+0x1f2>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <Alarm_Fn+0x1fc>
     af6:	00 00       	nop
     af8:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     afc:	2f ef       	ldi	r18, 0xFF	; 255
     afe:	8d ee       	ldi	r24, 0xED	; 237
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <Alarm_Fn+0x208>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <Alarm_Fn+0x212>
     b0c:	00 00       	nop
     b0e:	0e 94 a0 00 	call	0x140	; 0x140 <Buzzer_OFF>
     b12:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     b16:	2f ef       	ldi	r18, 0xFF	; 255
     b18:	8d ee       	ldi	r24, 0xED	; 237
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	80 40       	sbci	r24, 0x00	; 0
     b20:	90 40       	sbci	r25, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <Alarm_Fn+0x222>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <Alarm_Fn+0x22c>
     b26:	00 00       	nop
     b28:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     b2c:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	8d ee       	ldi	r24, 0xED	; 237
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <Alarm_Fn+0x23c>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <Alarm_Fn+0x246>
     b40:	00 00       	nop
     b42:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     b46:	2f ef       	ldi	r18, 0xFF	; 255
     b48:	8d ee       	ldi	r24, 0xED	; 237
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	21 50       	subi	r18, 0x01	; 1
     b4e:	80 40       	sbci	r24, 0x00	; 0
     b50:	90 40       	sbci	r25, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <Alarm_Fn+0x252>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <Alarm_Fn+0x25c>
     b56:	00 00       	nop
     b58:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     b5c:	2f ef       	ldi	r18, 0xFF	; 255
     b5e:	8d ee       	ldi	r24, 0xED	; 237
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	21 50       	subi	r18, 0x01	; 1
     b64:	80 40       	sbci	r24, 0x00	; 0
     b66:	90 40       	sbci	r25, 0x00	; 0
     b68:	e1 f7       	brne	.-8      	; 0xb62 <Alarm_Fn+0x268>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <Alarm_Fn+0x272>
     b6c:	00 00       	nop
     b6e:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     b72:	2f ef       	ldi	r18, 0xFF	; 255
     b74:	8d ee       	ldi	r24, 0xED	; 237
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	21 50       	subi	r18, 0x01	; 1
     b7a:	80 40       	sbci	r24, 0x00	; 0
     b7c:	90 40       	sbci	r25, 0x00	; 0
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <Alarm_Fn+0x27e>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <Alarm_Fn+0x288>
     b82:	00 00       	nop
     b84:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	8d ee       	ldi	r24, 0xED	; 237
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <Alarm_Fn+0x294>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <Alarm_Fn+0x29e>
     b98:	00 00       	nop
     b9a:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     b9e:	2f ef       	ldi	r18, 0xFF	; 255
     ba0:	8d ee       	ldi	r24, 0xED	; 237
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	21 50       	subi	r18, 0x01	; 1
     ba6:	80 40       	sbci	r24, 0x00	; 0
     ba8:	90 40       	sbci	r25, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <Alarm_Fn+0x2aa>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <Alarm_Fn+0x2b4>
     bae:	00 00       	nop
     bb0:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     bb4:	2f ef       	ldi	r18, 0xFF	; 255
     bb6:	8d ee       	ldi	r24, 0xED	; 237
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	21 50       	subi	r18, 0x01	; 1
     bbc:	80 40       	sbci	r24, 0x00	; 0
     bbe:	90 40       	sbci	r25, 0x00	; 0
     bc0:	e1 f7       	brne	.-8      	; 0xbba <Alarm_Fn+0x2c0>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <Alarm_Fn+0x2ca>
     bc4:	00 00       	nop
     bc6:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     bca:	2f ef       	ldi	r18, 0xFF	; 255
     bcc:	8d ee       	ldi	r24, 0xED	; 237
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	21 50       	subi	r18, 0x01	; 1
     bd2:	80 40       	sbci	r24, 0x00	; 0
     bd4:	90 40       	sbci	r25, 0x00	; 0
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <Alarm_Fn+0x2d6>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <Alarm_Fn+0x2e0>
     bda:	00 00       	nop
     bdc:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     be0:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     be4:	2f ef       	ldi	r18, 0xFF	; 255
     be6:	8d ee       	ldi	r24, 0xED	; 237
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	80 40       	sbci	r24, 0x00	; 0
     bee:	90 40       	sbci	r25, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <Alarm_Fn+0x2f0>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <Alarm_Fn+0x2fa>
     bf4:	00 00       	nop
     bf6:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     bfa:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     bfe:	2f ef       	ldi	r18, 0xFF	; 255
     c00:	8d ee       	ldi	r24, 0xED	; 237
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	80 40       	sbci	r24, 0x00	; 0
     c08:	90 40       	sbci	r25, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <Alarm_Fn+0x30a>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <Alarm_Fn+0x314>
     c0e:	00 00       	nop
     c10:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     c14:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	8d ee       	ldi	r24, 0xED	; 237
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	80 40       	sbci	r24, 0x00	; 0
     c22:	90 40       	sbci	r25, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <Alarm_Fn+0x324>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <Alarm_Fn+0x32e>
     c28:	00 00       	nop
     c2a:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     c2e:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	8d ee       	ldi	r24, 0xED	; 237
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	21 50       	subi	r18, 0x01	; 1
     c3a:	80 40       	sbci	r24, 0x00	; 0
     c3c:	90 40       	sbci	r25, 0x00	; 0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <Alarm_Fn+0x33e>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <Alarm_Fn+0x348>
     c42:	00 00       	nop
     c44:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     c48:	2f ef       	ldi	r18, 0xFF	; 255
     c4a:	8d ee       	ldi	r24, 0xED	; 237
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	80 40       	sbci	r24, 0x00	; 0
     c52:	90 40       	sbci	r25, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <Alarm_Fn+0x354>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <Alarm_Fn+0x35e>
     c58:	00 00       	nop
     c5a:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     c5e:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	8d ee       	ldi	r24, 0xED	; 237
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	80 40       	sbci	r24, 0x00	; 0
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <Alarm_Fn+0x36e>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <Alarm_Fn+0x378>
     c72:	00 00       	nop
     c74:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	8d ee       	ldi	r24, 0xED	; 237
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	80 40       	sbci	r24, 0x00	; 0
     c82:	90 40       	sbci	r25, 0x00	; 0
     c84:	e1 f7       	brne	.-8      	; 0xc7e <Alarm_Fn+0x384>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <Alarm_Fn+0x38e>
     c88:	00 00       	nop
     c8a:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
     c8e:	2f ef       	ldi	r18, 0xFF	; 255
     c90:	8d ee       	ldi	r24, 0xED	; 237
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	21 50       	subi	r18, 0x01	; 1
     c96:	80 40       	sbci	r24, 0x00	; 0
     c98:	90 40       	sbci	r25, 0x00	; 0
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <Alarm_Fn+0x39a>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <Alarm_Fn+0x3a4>
     c9e:	00 00       	nop
     ca0:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
     ca4:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
     ca8:	2f ef       	ldi	r18, 0xFF	; 255
     caa:	8d ee       	ldi	r24, 0xED	; 237
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	21 50       	subi	r18, 0x01	; 1
     cb0:	80 40       	sbci	r24, 0x00	; 0
     cb2:	90 40       	sbci	r25, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <Alarm_Fn+0x3b4>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <Alarm_Fn+0x3be>
     cb8:	00 00       	nop
     cba:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
     cbe:	2f ef       	ldi	r18, 0xFF	; 255
     cc0:	8d ee       	ldi	r24, 0xED	; 237
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	80 40       	sbci	r24, 0x00	; 0
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <Alarm_Fn+0x3ca>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <Alarm_Fn+0x3d4>
     cce:	00 00       	nop
     cd0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     cd4:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     cd8:	2f ef       	ldi	r18, 0xFF	; 255
     cda:	8d ee       	ldi	r24, 0xED	; 237
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	80 40       	sbci	r24, 0x00	; 0
     ce2:	90 40       	sbci	r25, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <Alarm_Fn+0x3e4>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <Alarm_Fn+0x3ee>
     ce8:	00 00       	nop
     cea:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     cee:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     cf2:	2f ef       	ldi	r18, 0xFF	; 255
     cf4:	83 ec       	ldi	r24, 0xC3	; 195
     cf6:	99 e0       	ldi	r25, 0x09	; 9
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	80 40       	sbci	r24, 0x00	; 0
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <Alarm_Fn+0x3fe>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <Alarm_Fn+0x408>
     d02:	00 00       	nop
     d04:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     d08:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     d0c:	2f ef       	ldi	r18, 0xFF	; 255
     d0e:	89 e6       	ldi	r24, 0x69	; 105
     d10:	98 e1       	ldi	r25, 0x18	; 24
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	80 40       	sbci	r24, 0x00	; 0
     d16:	90 40       	sbci	r25, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <Alarm_Fn+0x418>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <Alarm_Fn+0x422>
     d1c:	00 00       	nop
     d1e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     d22:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     d26:	2f ef       	ldi	r18, 0xFF	; 255
     d28:	81 ee       	ldi	r24, 0xE1	; 225
     d2a:	94 e0       	ldi	r25, 0x04	; 4
     d2c:	21 50       	subi	r18, 0x01	; 1
     d2e:	80 40       	sbci	r24, 0x00	; 0
     d30:	90 40       	sbci	r25, 0x00	; 0
     d32:	e1 f7       	brne	.-8      	; 0xd2c <Alarm_Fn+0x432>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <Alarm_Fn+0x43c>
     d36:	00 00       	nop
     d38:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     d3c:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     d40:	2f ef       	ldi	r18, 0xFF	; 255
     d42:	8d ee       	ldi	r24, 0xED	; 237
     d44:	92 e0       	ldi	r25, 0x02	; 2
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	80 40       	sbci	r24, 0x00	; 0
     d4a:	90 40       	sbci	r25, 0x00	; 0
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <Alarm_Fn+0x44c>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <Alarm_Fn+0x456>
     d50:	00 00       	nop
     d52:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     d56:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     d5a:	2f ef       	ldi	r18, 0xFF	; 255
     d5c:	8d ee       	ldi	r24, 0xED	; 237
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	21 50       	subi	r18, 0x01	; 1
     d62:	80 40       	sbci	r24, 0x00	; 0
     d64:	90 40       	sbci	r25, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <Alarm_Fn+0x466>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <Alarm_Fn+0x470>
     d6a:	00 00       	nop
     d6c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     d70:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     d74:	8f e3       	ldi	r24, 0x3F	; 63
     d76:	9c e9       	ldi	r25, 0x9C	; 156
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <Alarm_Fn+0x47e>
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <Alarm_Fn+0x484>
     d7e:	00 00       	nop
     d80:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     d84:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     d88:	9f ef       	ldi	r25, 0xFF	; 255
     d8a:	2d ee       	ldi	r18, 0xED	; 237
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	91 50       	subi	r25, 0x01	; 1
     d90:	20 40       	sbci	r18, 0x00	; 0
     d92:	80 40       	sbci	r24, 0x00	; 0
     d94:	e1 f7       	brne	.-8      	; 0xd8e <Alarm_Fn+0x494>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <Alarm_Fn+0x49e>
     d98:	00 00       	nop
     d9a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     d9e:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     da2:	9f ef       	ldi	r25, 0xFF	; 255
     da4:	2d ee       	ldi	r18, 0xED	; 237
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	91 50       	subi	r25, 0x01	; 1
     daa:	20 40       	sbci	r18, 0x00	; 0
     dac:	80 40       	sbci	r24, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <Alarm_Fn+0x4ae>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <Alarm_Fn+0x4b8>
     db2:	00 00       	nop
     db4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     db8:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     dbc:	9f ef       	ldi	r25, 0xFF	; 255
     dbe:	2d ee       	ldi	r18, 0xED	; 237
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	91 50       	subi	r25, 0x01	; 1
     dc4:	20 40       	sbci	r18, 0x00	; 0
     dc6:	80 40       	sbci	r24, 0x00	; 0
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <Alarm_Fn+0x4c8>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <Alarm_Fn+0x4d2>
     dcc:	00 00       	nop
     dce:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
     dd2:	0e 94 b4 09 	call	0x1368	; 0x1368 <LED3_Toggle>
     dd6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     dda:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
     dde:	0e 94 c5 09 	call	0x138a	; 0x138a <LED4_Toggle>
     de2:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     de6:	9f ef       	ldi	r25, 0xFF	; 255
     de8:	23 ec       	ldi	r18, 0xC3	; 195
     dea:	89 e0       	ldi	r24, 0x09	; 9
     dec:	91 50       	subi	r25, 0x01	; 1
     dee:	20 40       	sbci	r18, 0x00	; 0
     df0:	80 40       	sbci	r24, 0x00	; 0
     df2:	e1 f7       	brne	.-8      	; 0xdec <Alarm_Fn+0x4f2>
     df4:	00 c0       	rjmp	.+0      	; 0xdf6 <Alarm_Fn+0x4fc>
     df6:	00 00       	nop
     df8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     dfc:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
     e00:	0e 94 b4 09 	call	0x1368	; 0x1368 <LED3_Toggle>
     e04:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
     e08:	0e 94 c5 09 	call	0x138a	; 0x138a <LED4_Toggle>
     e0c:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     e10:	9f ef       	ldi	r25, 0xFF	; 255
     e12:	2d ee       	ldi	r18, 0xED	; 237
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	91 50       	subi	r25, 0x01	; 1
     e18:	20 40       	sbci	r18, 0x00	; 0
     e1a:	80 40       	sbci	r24, 0x00	; 0
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <Alarm_Fn+0x51c>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <Alarm_Fn+0x526>
     e20:	00 00       	nop
     e22:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
     e26:	0e 94 b4 09 	call	0x1368	; 0x1368 <LED3_Toggle>
     e2a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     e2e:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
     e32:	0e 94 c5 09 	call	0x138a	; 0x138a <LED4_Toggle>
     e36:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     e3a:	9f ef       	ldi	r25, 0xFF	; 255
     e3c:	21 ee       	ldi	r18, 0xE1	; 225
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	91 50       	subi	r25, 0x01	; 1
     e42:	20 40       	sbci	r18, 0x00	; 0
     e44:	80 40       	sbci	r24, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <Alarm_Fn+0x546>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <Alarm_Fn+0x550>
     e4a:	00 00       	nop
     e4c:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
     e50:	0e 94 b4 09 	call	0x1368	; 0x1368 <LED3_Toggle>
     e54:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     e58:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
     e5c:	0e 94 c5 09 	call	0x138a	; 0x138a <LED4_Toggle>
     e60:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     e64:	9f ef       	ldi	r25, 0xFF	; 255
     e66:	2d ee       	ldi	r18, 0xED	; 237
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	91 50       	subi	r25, 0x01	; 1
     e6c:	20 40       	sbci	r18, 0x00	; 0
     e6e:	80 40       	sbci	r24, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <Alarm_Fn+0x570>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <Alarm_Fn+0x57a>
     e74:	00 00       	nop
     e76:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
     e7a:	0e 94 b4 09 	call	0x1368	; 0x1368 <LED3_Toggle>
     e7e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     e82:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
     e86:	0e 94 c5 09 	call	0x138a	; 0x138a <LED4_Toggle>
     e8a:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     e8e:	9f ef       	ldi	r25, 0xFF	; 255
     e90:	23 ed       	ldi	r18, 0xD3	; 211
     e92:	80 e3       	ldi	r24, 0x30	; 48
     e94:	91 50       	subi	r25, 0x01	; 1
     e96:	20 40       	sbci	r18, 0x00	; 0
     e98:	80 40       	sbci	r24, 0x00	; 0
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <Alarm_Fn+0x59a>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <Alarm_Fn+0x5a4>
     e9e:	00 00       	nop
     ea0:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
     ea4:	0e 94 b4 09 	call	0x1368	; 0x1368 <LED3_Toggle>
     ea8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     eac:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
     eb0:	0e 94 c5 09 	call	0x138a	; 0x138a <LED4_Toggle>
     eb4:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     eb8:	8f e3       	ldi	r24, 0x3F	; 63
     eba:	9c e9       	ldi	r25, 0x9C	; 156
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <Alarm_Fn+0x5c2>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <Alarm_Fn+0x5c8>
     ec2:	00 00       	nop
     ec4:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
     ec8:	0e 94 b4 09 	call	0x1368	; 0x1368 <LED3_Toggle>
     ecc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     ed0:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
     ed4:	0e 94 c5 09 	call	0x138a	; 0x138a <LED4_Toggle>
     ed8:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     edc:	8f e3       	ldi	r24, 0x3F	; 63
     ede:	9c e9       	ldi	r25, 0x9C	; 156
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <Alarm_Fn+0x5e6>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <Alarm_Fn+0x5ec>
     ee6:	00 00       	nop
     ee8:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
     eec:	0e 94 b4 09 	call	0x1368	; 0x1368 <LED3_Toggle>
     ef0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     ef4:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
     ef8:	0e 94 c5 09 	call	0x138a	; 0x138a <LED4_Toggle>
     efc:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     f00:	9f ef       	ldi	r25, 0xFF	; 255
     f02:	21 ee       	ldi	r18, 0xE1	; 225
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	20 40       	sbci	r18, 0x00	; 0
     f0a:	80 40       	sbci	r24, 0x00	; 0
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <Alarm_Fn+0x60c>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <Alarm_Fn+0x616>
     f10:	00 00       	nop
     f12:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     f16:	0e 94 9a 00 	call	0x134	; 0x134 <Buzzer_ON>
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	24 e3       	ldi	r18, 0x34	; 52
     f1e:	8c e0       	ldi	r24, 0x0C	; 12
     f20:	91 50       	subi	r25, 0x01	; 1
     f22:	20 40       	sbci	r18, 0x00	; 0
     f24:	80 40       	sbci	r24, 0x00	; 0
     f26:	e1 f7       	brne	.-8      	; 0xf20 <Alarm_Fn+0x626>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <Alarm_Fn+0x630>
     f2a:	00 00       	nop
     f2c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     f30:	0e 94 a6 00 	call	0x14c	; 0x14c <Buzzer_Toggle>
     f34:	9f ef       	ldi	r25, 0xFF	; 255
     f36:	24 e3       	ldi	r18, 0x34	; 52
     f38:	8c e0       	ldi	r24, 0x0C	; 12
     f3a:	91 50       	subi	r25, 0x01	; 1
     f3c:	20 40       	sbci	r18, 0x00	; 0
     f3e:	80 40       	sbci	r24, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <Alarm_Fn+0x640>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <Alarm_Fn+0x64a>
     f44:	00 00       	nop
     f46:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
     f4a:	0e 94 9a 00 	call	0x134	; 0x134 <Buzzer_ON>
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	2d ee       	ldi	r18, 0xED	; 237
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	91 50       	subi	r25, 0x01	; 1
     f56:	20 40       	sbci	r18, 0x00	; 0
     f58:	80 40       	sbci	r24, 0x00	; 0
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <Alarm_Fn+0x65a>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <Alarm_Fn+0x664>
     f5e:	00 00       	nop
     f60:	0e 94 a0 00 	call	0x140	; 0x140 <Buzzer_OFF>
     f64:	08 95       	ret

00000f66 <I2C_SendStartCond>:
     f66:	84 ea       	ldi	r24, 0xA4	; 164
     f68:	86 bf       	out	0x36, r24	; 54
     f6a:	06 b6       	in	r0, 0x36	; 54
     f6c:	07 fe       	sbrs	r0, 7
     f6e:	fd cf       	rjmp	.-6      	; 0xf6a <I2C_SendStartCond+0x4>
     f70:	08 95       	ret

00000f72 <I2C_SendRepStartCond>:
     f72:	84 ea       	ldi	r24, 0xA4	; 164
     f74:	86 bf       	out	0x36, r24	; 54
     f76:	06 b6       	in	r0, 0x36	; 54
     f78:	07 fe       	sbrs	r0, 7
     f7a:	fd cf       	rjmp	.-6      	; 0xf76 <I2C_SendRepStartCond+0x4>
     f7c:	08 95       	ret

00000f7e <I2C_SendSlaveAdd_WriteOP>:
     f7e:	88 0f       	add	r24, r24
     f80:	83 b9       	out	0x03, r24	; 3
     f82:	84 e8       	ldi	r24, 0x84	; 132
     f84:	86 bf       	out	0x36, r24	; 54
     f86:	06 b6       	in	r0, 0x36	; 54
     f88:	07 fe       	sbrs	r0, 7
     f8a:	fd cf       	rjmp	.-6      	; 0xf86 <I2C_SendSlaveAdd_WriteOP+0x8>
     f8c:	2f ef       	ldi	r18, 0xFF	; 255
     f8e:	81 ee       	ldi	r24, 0xE1	; 225
     f90:	94 e0       	ldi	r25, 0x04	; 4
     f92:	21 50       	subi	r18, 0x01	; 1
     f94:	80 40       	sbci	r24, 0x00	; 0
     f96:	90 40       	sbci	r25, 0x00	; 0
     f98:	e1 f7       	brne	.-8      	; 0xf92 <I2C_SendSlaveAdd_WriteOP+0x14>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <I2C_SendSlaveAdd_WriteOP+0x1e>
     f9c:	00 00       	nop
     f9e:	08 95       	ret

00000fa0 <I2C_SendSlaveAdd_ReadOP>:
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	81 60       	ori	r24, 0x01	; 1
     fa8:	83 b9       	out	0x03, r24	; 3
     faa:	84 e8       	ldi	r24, 0x84	; 132
     fac:	86 bf       	out	0x36, r24	; 54
     fae:	06 b6       	in	r0, 0x36	; 54
     fb0:	07 fe       	sbrs	r0, 7
     fb2:	fd cf       	rjmp	.-6      	; 0xfae <I2C_SendSlaveAdd_ReadOP+0xe>
     fb4:	08 95       	ret

00000fb6 <I2C_SendData>:
     fb6:	83 b9       	out	0x03, r24	; 3
     fb8:	84 e8       	ldi	r24, 0x84	; 132
     fba:	86 bf       	out	0x36, r24	; 54
     fbc:	06 b6       	in	r0, 0x36	; 54
     fbe:	07 fe       	sbrs	r0, 7
     fc0:	fd cf       	rjmp	.-6      	; 0xfbc <I2C_SendData+0x6>
     fc2:	08 95       	ret

00000fc4 <I2C_ReadData>:
     fc4:	84 e8       	ldi	r24, 0x84	; 132
     fc6:	86 bf       	out	0x36, r24	; 54
     fc8:	06 b6       	in	r0, 0x36	; 54
     fca:	07 fe       	sbrs	r0, 7
     fcc:	fd cf       	rjmp	.-6      	; 0xfc8 <I2C_ReadData+0x4>
     fce:	83 b1       	in	r24, 0x03	; 3
     fd0:	08 95       	ret

00000fd2 <I2C_SendStopCond>:
     fd2:	84 e9       	ldi	r24, 0x94	; 148
     fd4:	86 bf       	out	0x36, r24	; 54
     fd6:	86 b7       	in	r24, 0x36	; 54
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	86 bf       	out	0x36, r24	; 54
     fdc:	08 95       	ret

00000fde <Keypad_GetValue>:
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	28 c0       	rjmp	.+80     	; 0x103a <Keypad_GetValue+0x5c>
     fea:	41 e0       	ldi	r20, 0x01	; 1
     fec:	6d 2f       	mov	r22, r29
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
     ff4:	c3 e0       	ldi	r28, 0x03	; 3
     ff6:	19 c0       	rjmp	.+50     	; 0x102a <Keypad_GetValue+0x4c>
     ff8:	6c 2f       	mov	r22, r28
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_GetPin_Value>
    1000:	81 11       	cpse	r24, r1
    1002:	12 c0       	rjmp	.+36     	; 0x1028 <Keypad_GetValue+0x4a>
    1004:	ec 2f       	mov	r30, r28
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	33 97       	sbiw	r30, 0x03	; 3
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	e0 5a       	subi	r30, 0xA0	; 160
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	ed 0f       	add	r30, r29
    1018:	f1 1d       	adc	r31, r1
    101a:	10 81       	ld	r17, Z
    101c:	6c 2f       	mov	r22, r28
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	0e 94 b3 01 	call	0x366	; 0x366 <DIO_GetPin_Value>
    1024:	88 23       	and	r24, r24
    1026:	d1 f3       	breq	.-12     	; 0x101c <Keypad_GetValue+0x3e>
    1028:	cf 5f       	subi	r28, 0xFF	; 255
    102a:	c7 30       	cpi	r28, 0x07	; 7
    102c:	28 f3       	brcs	.-54     	; 0xff8 <Keypad_GetValue+0x1a>
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	6d 2f       	mov	r22, r29
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1038:	df 5f       	subi	r29, 0xFF	; 255
    103a:	d3 30       	cpi	r29, 0x03	; 3
    103c:	b0 f2       	brcs	.-84     	; 0xfea <Keypad_GetValue+0xc>
    103e:	81 2f       	mov	r24, r17
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	08 95       	ret

00001048 <LCD_Write_CMD>:
    1048:	cf 93       	push	r28
    104a:	c8 2f       	mov	r28, r24
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	62 e0       	ldi	r22, 0x02	; 2
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    106a:	88 b3       	in	r24, 0x18	; 24
    106c:	9c 2f       	mov	r25, r28
    106e:	90 7f       	andi	r25, 0xF0	; 240
    1070:	8f 70       	andi	r24, 0x0F	; 15
    1072:	89 2b       	or	r24, r25
    1074:	88 bb       	out	0x18, r24	; 24
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	62 e0       	ldi	r22, 0x02	; 2
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1080:	8f e9       	ldi	r24, 0x9F	; 159
    1082:	9f e0       	ldi	r25, 0x0F	; 15
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <LCD_Write_CMD+0x3c>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <LCD_Write_CMD+0x42>
    108a:	00 00       	nop
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	62 e0       	ldi	r22, 0x02	; 2
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1096:	20 e1       	ldi	r18, 0x10	; 16
    1098:	c2 9f       	mul	r28, r18
    109a:	c0 01       	movw	r24, r0
    109c:	11 24       	eor	r1, r1
    109e:	98 b3       	in	r25, 0x18	; 24
    10a0:	9f 70       	andi	r25, 0x0F	; 15
    10a2:	89 2b       	or	r24, r25
    10a4:	88 bb       	out	0x18, r24	; 24
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	62 e0       	ldi	r22, 0x02	; 2
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    10b0:	8f e9       	ldi	r24, 0x9F	; 159
    10b2:	9f e0       	ldi	r25, 0x0F	; 15
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <LCD_Write_CMD+0x6c>
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <LCD_Write_CMD+0x72>
    10ba:	00 00       	nop
    10bc:	41 e0       	ldi	r20, 0x01	; 1
    10be:	62 e0       	ldi	r22, 0x02	; 2
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    10c6:	8f e1       	ldi	r24, 0x1F	; 31
    10c8:	9e e4       	ldi	r25, 0x4E	; 78
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <LCD_Write_CMD+0x82>
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <LCD_Write_CMD+0x88>
    10d0:	00 00       	nop
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <LCD_Write_Char>:
    10d6:	cf 93       	push	r28
    10d8:	c8 2f       	mov	r28, r24
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    10e4:	41 e0       	ldi	r20, 0x01	; 1
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	62 e0       	ldi	r22, 0x02	; 2
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    10f8:	88 b3       	in	r24, 0x18	; 24
    10fa:	9c 2f       	mov	r25, r28
    10fc:	90 7f       	andi	r25, 0xF0	; 240
    10fe:	8f 70       	andi	r24, 0x0F	; 15
    1100:	89 2b       	or	r24, r25
    1102:	88 bb       	out	0x18, r24	; 24
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	62 e0       	ldi	r22, 0x02	; 2
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    110e:	8f e9       	ldi	r24, 0x9F	; 159
    1110:	9f e0       	ldi	r25, 0x0F	; 15
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <LCD_Write_Char+0x3c>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <LCD_Write_Char+0x42>
    1118:	00 00       	nop
    111a:	41 e0       	ldi	r20, 0x01	; 1
    111c:	62 e0       	ldi	r22, 0x02	; 2
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1124:	20 e1       	ldi	r18, 0x10	; 16
    1126:	c2 9f       	mul	r28, r18
    1128:	c0 01       	movw	r24, r0
    112a:	11 24       	eor	r1, r1
    112c:	98 b3       	in	r25, 0x18	; 24
    112e:	9f 70       	andi	r25, 0x0F	; 15
    1130:	89 2b       	or	r24, r25
    1132:	88 bb       	out	0x18, r24	; 24
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	62 e0       	ldi	r22, 0x02	; 2
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    113e:	8f e9       	ldi	r24, 0x9F	; 159
    1140:	9f e0       	ldi	r25, 0x0F	; 15
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <LCD_Write_Char+0x6c>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <LCD_Write_Char+0x72>
    1148:	00 00       	nop
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	62 e0       	ldi	r22, 0x02	; 2
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <LCD_Write_String>:
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	8c 01       	movw	r16, r24
    1160:	c0 e0       	ldi	r28, 0x00	; 0
    1162:	03 c0       	rjmp	.+6      	; 0x116a <LCD_Write_String+0x12>
    1164:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_Write_Char>
    1168:	cf 5f       	subi	r28, 0xFF	; 255
    116a:	f8 01       	movw	r30, r16
    116c:	ec 0f       	add	r30, r28
    116e:	f1 1d       	adc	r31, r1
    1170:	80 81       	ld	r24, Z
    1172:	81 11       	cpse	r24, r1
    1174:	f7 cf       	rjmp	.-18     	; 0x1164 <LCD_Write_String+0xc>
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <LCD_Write_Integer>:
    117e:	8f 92       	push	r8
    1180:	9f 92       	push	r9
    1182:	af 92       	push	r10
    1184:	bf 92       	push	r11
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	4b 01       	movw	r8, r22
    1194:	5c 01       	movw	r10, r24
    1196:	67 2b       	or	r22, r23
    1198:	68 2b       	or	r22, r24
    119a:	69 2b       	or	r22, r25
    119c:	19 f4       	brne	.+6      	; 0x11a4 <LCD_Write_Integer+0x26>
    119e:	80 e3       	ldi	r24, 0x30	; 48
    11a0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_Write_Char>
    11a4:	01 e0       	ldi	r16, 0x01	; 1
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	e1 2c       	mov	r14, r1
    11aa:	f1 2c       	mov	r15, r1
    11ac:	2f c0       	rjmp	.+94     	; 0x120c <LCD_Write_Integer+0x8e>
    11ae:	c7 01       	movw	r24, r14
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	b7 01       	movw	r22, r14
    11b6:	66 0f       	add	r22, r22
    11b8:	77 1f       	adc	r23, r23
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	66 0f       	add	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	7c 01       	movw	r14, r24
    11c4:	e6 0e       	add	r14, r22
    11c6:	f7 1e       	adc	r15, r23
    11c8:	c5 01       	movw	r24, r10
    11ca:	b4 01       	movw	r22, r8
    11cc:	2a e0       	ldi	r18, 0x0A	; 10
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	0e 94 b8 18 	call	0x3170	; 0x3170 <__udivmodsi4>
    11d8:	e6 0e       	add	r14, r22
    11da:	f7 1e       	adc	r15, r23
    11dc:	e1 14       	cp	r14, r1
    11de:	f1 04       	cpc	r15, r1
    11e0:	59 f4       	brne	.+22     	; 0x11f8 <LCD_Write_Integer+0x7a>
    11e2:	c8 01       	movw	r24, r16
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	00 0f       	add	r16, r16
    11ea:	11 1f       	adc	r17, r17
    11ec:	00 0f       	add	r16, r16
    11ee:	11 1f       	adc	r17, r17
    11f0:	00 0f       	add	r16, r16
    11f2:	11 1f       	adc	r17, r17
    11f4:	08 0f       	add	r16, r24
    11f6:	19 1f       	adc	r17, r25
    11f8:	c5 01       	movw	r24, r10
    11fa:	b4 01       	movw	r22, r8
    11fc:	2a e0       	ldi	r18, 0x0A	; 10
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	0e 94 b8 18 	call	0x3170	; 0x3170 <__udivmodsi4>
    1208:	49 01       	movw	r8, r18
    120a:	5a 01       	movw	r10, r20
    120c:	81 14       	cp	r8, r1
    120e:	91 04       	cpc	r9, r1
    1210:	a1 04       	cpc	r10, r1
    1212:	b1 04       	cpc	r11, r1
    1214:	61 f6       	brne	.-104    	; 0x11ae <LCD_Write_Integer+0x30>
    1216:	a1 2c       	mov	r10, r1
    1218:	b1 2c       	mov	r11, r1
    121a:	16 c0       	rjmp	.+44     	; 0x1248 <LCD_Write_Integer+0xca>
    121c:	c7 01       	movw	r24, r14
    121e:	6a e0       	ldi	r22, 0x0A	; 10
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	0e 94 a4 18 	call	0x3148	; 0x3148 <__divmodhi4>
    1226:	d6 2f       	mov	r29, r22
    1228:	c7 2f       	mov	r28, r23
    122a:	80 5d       	subi	r24, 0xD0	; 208
    122c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_Write_Char>
    1230:	ed 2e       	mov	r14, r29
    1232:	fc 2e       	mov	r15, r28
    1234:	e1 14       	cp	r14, r1
    1236:	f1 04       	cpc	r15, r1
    1238:	39 f4       	brne	.+14     	; 0x1248 <LCD_Write_Integer+0xca>
    123a:	0a 30       	cpi	r16, 0x0A	; 10
    123c:	11 05       	cpc	r17, r1
    123e:	24 f0       	brlt	.+8      	; 0x1248 <LCD_Write_Integer+0xca>
    1240:	78 01       	movw	r14, r16
    1242:	aa 24       	eor	r10, r10
    1244:	a3 94       	inc	r10
    1246:	b1 2c       	mov	r11, r1
    1248:	ea 14       	cp	r14, r10
    124a:	fb 04       	cpc	r15, r11
    124c:	39 f7       	brne	.-50     	; 0x121c <LCD_Write_Integer+0x9e>
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	bf 90       	pop	r11
    125c:	af 90       	pop	r10
    125e:	9f 90       	pop	r9
    1260:	8f 90       	pop	r8
    1262:	08 95       	ret

00001264 <LCD_Clear>:
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_Write_CMD>
    126a:	08 95       	ret

0000126c <LCD_Goto>:
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	00 d0       	rcall	.+0      	; 0x1272 <LCD_Goto+0x6>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	90 e8       	ldi	r25, 0x80	; 128
    1278:	99 83       	std	Y+1, r25	; 0x01
    127a:	90 ec       	ldi	r25, 0xC0	; 192
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	08 f0       	brcs	.+2      	; 0x1284 <LCD_Goto+0x18>
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	68 32       	cpi	r22, 0x28	; 40
    1286:	08 f0       	brcs	.+2      	; 0x128a <LCD_Goto+0x1e>
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	e1 e0       	ldi	r30, 0x01	; 1
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	ec 0f       	add	r30, r28
    1290:	fd 1f       	adc	r31, r29
    1292:	e8 0f       	add	r30, r24
    1294:	f1 1d       	adc	r31, r1
    1296:	80 81       	ld	r24, Z
    1298:	86 0f       	add	r24, r22
    129a:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_Write_CMD>
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <LED0_Init>:
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	62 e0       	ldi	r22, 0x02	; 2
    12ac:	82 e0       	ldi	r24, 0x02	; 2
    12ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPin_Dir>
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	62 e0       	ldi	r22, 0x02	; 2
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    12bc:	08 95       	ret

000012be <LED0_ON>:
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	62 e0       	ldi	r22, 0x02	; 2
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    12c8:	08 95       	ret

000012ca <LED0_OFF>:
    12ca:	41 e0       	ldi	r20, 0x01	; 1
    12cc:	62 e0       	ldi	r22, 0x02	; 2
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    12d4:	08 95       	ret

000012d6 <LED0_Toggle>:
    12d6:	62 e0       	ldi	r22, 0x02	; 2
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_TogglePin_Value>
    12de:	08 95       	ret

000012e0 <LED1_Init>:
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	63 e0       	ldi	r22, 0x03	; 3
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPin_Dir>
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	63 e0       	ldi	r22, 0x03	; 3
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    12f4:	08 95       	ret

000012f6 <LED1_ON>:
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	63 e0       	ldi	r22, 0x03	; 3
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1300:	08 95       	ret

00001302 <LED1_OFF>:
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	63 e0       	ldi	r22, 0x03	; 3
    1306:	82 e0       	ldi	r24, 0x02	; 2
    1308:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    130c:	08 95       	ret

0000130e <LED1_Toggle>:
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_TogglePin_Value>
    1316:	08 95       	ret

00001318 <LED2_Init>:
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	64 e0       	ldi	r22, 0x04	; 4
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPin_Dir>
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	64 e0       	ldi	r22, 0x04	; 4
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    132c:	08 95       	ret

0000132e <LED2_ON>:
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	64 e0       	ldi	r22, 0x04	; 4
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1338:	08 95       	ret

0000133a <LED2_OFF>:
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	64 e0       	ldi	r22, 0x04	; 4
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1344:	08 95       	ret

00001346 <LED2_Toggle>:
    1346:	64 e0       	ldi	r22, 0x04	; 4
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_TogglePin_Value>
    134e:	08 95       	ret

00001350 <LED3_ON>:
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	65 e0       	ldi	r22, 0x05	; 5
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    135a:	08 95       	ret

0000135c <LED3_OFF>:
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	65 e0       	ldi	r22, 0x05	; 5
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1366:	08 95       	ret

00001368 <LED3_Toggle>:
    1368:	65 e0       	ldi	r22, 0x05	; 5
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_TogglePin_Value>
    1370:	08 95       	ret

00001372 <LED4_ON>:
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	66 e0       	ldi	r22, 0x06	; 6
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    137c:	08 95       	ret

0000137e <LED4_OFF>:
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	66 e0       	ldi	r22, 0x06	; 6
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	0e 94 42 01 	call	0x284	; 0x284 <DIO_SetPin_Value>
    1388:	08 95       	ret

0000138a <LED4_Toggle>:
    138a:	66 e0       	ldi	r22, 0x06	; 6
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_TogglePin_Value>
    1392:	08 95       	ret

00001394 <main>:

int main(void)
{	

    
	LED0_Init();
    1394:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LED0_Init>
	LED1_Init();
    1398:	0e 94 70 09 	call	0x12e0	; 0x12e0 <LED1_Init>
	LED2_Init();
    139c:	0e 94 8c 09 	call	0x1318	; 0x1318 <LED2_Init>
	
	Timer0_Init();
    13a0:	0e 94 02 0a 	call	0x1404	; 0x1404 <Timer0_Init>
	Timer0_Start();
    13a4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <Timer0_Start>
	Timer0_SetDelay(5);
    13a8:	65 e0       	ldi	r22, 0x05	; 5
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer0_SetDelay>
		
	while (1)
	
	{		
		
		if(x==1)
    13b4:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <x>
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <main+0x30>
		{
			LED0_Toggle();
    13bc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LED0_Toggle>
			x=0;
    13c0:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <x>
		}
		if(y==1)
    13c4:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <y>
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <main+0x40>
		{
			LED1_Toggle();
    13cc:	0e 94 87 09 	call	0x130e	; 0x130e <LED1_Toggle>
			y=0;
    13d0:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <y>
		}
		if(z==1)
    13d4:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <z>
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	61 f7       	brne	.-40     	; 0x13b4 <main+0x20>
		{
			LED2_Toggle();
    13dc:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED2_Toggle>
			z=0;
    13e0:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <z>
    13e4:	e7 cf       	rjmp	.-50     	; 0x13b4 <main+0x20>

000013e6 <Servoo_Motor>:
    13e6:	1d bc       	out	0x2d, r1	; 45
    13e8:	1c bc       	out	0x2c, r1	; 44
    13ea:	27 e8       	ldi	r18, 0x87	; 135
    13ec:	33 e1       	ldi	r19, 0x13	; 19
    13ee:	37 bd       	out	0x27, r19	; 39
    13f0:	26 bd       	out	0x26, r18	; 38
    13f2:	7b bd       	out	0x2b, r23	; 43
    13f4:	6a bd       	out	0x2a, r22	; 42
    13f6:	8f b5       	in	r24, 0x2f	; 47
    13f8:	82 6a       	ori	r24, 0xA2	; 162
    13fa:	8f bd       	out	0x2f, r24	; 47
    13fc:	8e b5       	in	r24, 0x2e	; 46
    13fe:	8b 61       	ori	r24, 0x1B	; 27
    1400:	8e bd       	out	0x2e, r24	; 46
    1402:	08 95       	ret

00001404 <Timer0_Init>:
{
	TCCR2 &= 0XF8;
}

void PWM2_Gen(f32 Duty_Cycle)
{
    1404:	8f b7       	in	r24, 0x3f	; 63
    1406:	80 68       	ori	r24, 0x80	; 128
    1408:	8f bf       	out	0x3f, r24	; 63
    140a:	83 b7       	in	r24, 0x33	; 51
    140c:	87 7f       	andi	r24, 0xF7	; 247
    140e:	83 bf       	out	0x33, r24	; 51
    1410:	83 b7       	in	r24, 0x33	; 51
    1412:	8f 7b       	andi	r24, 0xBF	; 191
    1414:	83 bf       	out	0x33, r24	; 51
    1416:	89 b7       	in	r24, 0x39	; 57
    1418:	81 60       	ori	r24, 0x01	; 1
    141a:	89 bf       	out	0x39, r24	; 57
    141c:	08 95       	ret

0000141e <Timer0_SetDelay>:
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	9b 01       	movw	r18, r22
    1424:	ac 01       	movw	r20, r24
    1426:	a8 ee       	ldi	r26, 0xE8	; 232
    1428:	b3 e0       	ldi	r27, 0x03	; 3
    142a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__muluhisi3>
    142e:	8b 01       	movw	r16, r22
    1430:	9c 01       	movw	r18, r24
    1432:	68 94       	set
    1434:	15 f8       	bld	r1, 5
    1436:	36 95       	lsr	r19
    1438:	27 95       	ror	r18
    143a:	17 95       	ror	r17
    143c:	07 95       	ror	r16
    143e:	16 94       	lsr	r1
    1440:	d1 f7       	brne	.-12     	; 0x1436 <Timer0_SetDelay+0x18>
    1442:	01 30       	cpi	r16, 0x01	; 1
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	14 07       	cpc	r17, r20
    1448:	21 05       	cpc	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	60 f4       	brcc	.+24     	; 0x1466 <Timer0_SetDelay+0x48>
    144e:	80 2f       	mov	r24, r16
    1450:	81 95       	neg	r24
    1452:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <Timer0_Init_Value>
    1456:	82 bf       	out	0x32, r24	; 50
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	90 93 e8 06 	sts	0x06E8, r25	; 0x8006e8 <Timer0_Num_OVF+0x1>
    1460:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <Timer0_Num_OVF>
    1464:	24 c0       	rjmp	.+72     	; 0x14ae <Timer0_SetDelay+0x90>
    1466:	01 11       	cpse	r16, r1
    1468:	0c c0       	rjmp	.+24     	; 0x1482 <Timer0_SetDelay+0x64>
    146a:	ab 01       	movw	r20, r22
    146c:	bc 01       	movw	r22, r24
    146e:	03 2e       	mov	r0, r19
    1470:	3e e0       	ldi	r19, 0x0E	; 14
    1472:	76 95       	lsr	r23
    1474:	67 95       	ror	r22
    1476:	57 95       	ror	r21
    1478:	47 95       	ror	r20
    147a:	3a 95       	dec	r19
    147c:	d1 f7       	brne	.-12     	; 0x1472 <Timer0_SetDelay+0x54>
    147e:	30 2d       	mov	r19, r0
    1480:	0d c0       	rjmp	.+26     	; 0x149c <Timer0_SetDelay+0x7e>
    1482:	ab 01       	movw	r20, r22
    1484:	bc 01       	movw	r22, r24
    1486:	03 2e       	mov	r0, r19
    1488:	3e e0       	ldi	r19, 0x0E	; 14
    148a:	76 95       	lsr	r23
    148c:	67 95       	ror	r22
    148e:	57 95       	ror	r21
    1490:	47 95       	ror	r20
    1492:	3a 95       	dec	r19
    1494:	d1 f7       	brne	.-12     	; 0x148a <Timer0_SetDelay+0x6c>
    1496:	30 2d       	mov	r19, r0
    1498:	4f 5f       	subi	r20, 0xFF	; 255
    149a:	5f 4f       	sbci	r21, 0xFF	; 255
    149c:	50 93 e8 06 	sts	0x06E8, r21	; 0x8006e8 <Timer0_Num_OVF+0x1>
    14a0:	40 93 e7 06 	sts	0x06E7, r20	; 0x8006e7 <Timer0_Num_OVF>
    14a4:	80 2f       	mov	r24, r16
    14a6:	81 95       	neg	r24
    14a8:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <Timer0_Init_Value>
    14ac:	82 bf       	out	0x32, r24	; 50
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	08 95       	ret

000014b4 <PWM0_Gen>:
    14b4:	08 95       	ret

000014b6 <Timer0_Start>:
    14b6:	83 b7       	in	r24, 0x33	; 51
    14b8:	88 7f       	andi	r24, 0xF8	; 248
    14ba:	85 60       	ori	r24, 0x05	; 5
    14bc:	83 bf       	out	0x33, r24	; 51
    14be:	08 95       	ret

000014c0 <__vector_11>:
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 93       	push	r18
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <Count.1712>
    14e0:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <Count.1712+0x1>
    14e4:	a0 91 dd 06 	lds	r26, 0x06DD	; 0x8006dd <Count.1712+0x2>
    14e8:	b0 91 de 06 	lds	r27, 0x06DE	; 0x8006de <Count.1712+0x3>
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	a1 1d       	adc	r26, r1
    14f0:	b1 1d       	adc	r27, r1
    14f2:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <Count.1712>
    14f6:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <Count.1712+0x1>
    14fa:	a0 93 dd 06 	sts	0x06DD, r26	; 0x8006dd <Count.1712+0x2>
    14fe:	b0 93 de 06 	sts	0x06DE, r27	; 0x8006de <Count.1712+0x3>
    1502:	40 91 e7 06 	lds	r20, 0x06E7	; 0x8006e7 <Timer0_Num_OVF>
    1506:	50 91 e8 06 	lds	r21, 0x06E8	; 0x8006e8 <Timer0_Num_OVF+0x1>
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	84 17       	cp	r24, r20
    1510:	95 07       	cpc	r25, r21
    1512:	a6 07       	cpc	r26, r22
    1514:	b7 07       	cpc	r27, r23
    1516:	a9 f5       	brne	.+106    	; 0x1582 <__vector_11+0xc2>
    1518:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <i>
    151c:	9f 5f       	subi	r25, 0xFF	; 255
    151e:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <i>
    1522:	89 2f       	mov	r24, r25
    1524:	83 70       	andi	r24, 0x03	; 3
    1526:	19 f4       	brne	.+6      	; 0x152e <__vector_11+0x6e>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <x>
    152e:	8d ec       	ldi	r24, 0xCD	; 205
    1530:	98 9f       	mul	r25, r24
    1532:	81 2d       	mov	r24, r1
    1534:	11 24       	eor	r1, r1
    1536:	86 95       	lsr	r24
    1538:	86 95       	lsr	r24
    153a:	28 2f       	mov	r18, r24
    153c:	22 0f       	add	r18, r18
    153e:	22 0f       	add	r18, r18
    1540:	82 0f       	add	r24, r18
    1542:	98 13       	cpse	r25, r24
    1544:	03 c0       	rjmp	.+6      	; 0x154c <__vector_11+0x8c>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <y>
    154c:	8b ea       	ldi	r24, 0xAB	; 171
    154e:	98 9f       	mul	r25, r24
    1550:	81 2d       	mov	r24, r1
    1552:	11 24       	eor	r1, r1
    1554:	86 95       	lsr	r24
    1556:	86 95       	lsr	r24
    1558:	28 2f       	mov	r18, r24
    155a:	22 0f       	add	r18, r18
    155c:	82 0f       	add	r24, r18
    155e:	28 2f       	mov	r18, r24
    1560:	22 0f       	add	r18, r18
    1562:	92 13       	cpse	r25, r18
    1564:	03 c0       	rjmp	.+6      	; 0x156c <__vector_11+0xac>
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <z>
    156c:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <Count.1712>
    1570:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <Count.1712+0x1>
    1574:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <Count.1712+0x2>
    1578:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <Count.1712+0x3>
    157c:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <Timer0_Init_Value>
    1580:	82 bf       	out	0x32, r24	; 50
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	7f 91       	pop	r23
    158c:	6f 91       	pop	r22
    158e:	5f 91       	pop	r21
    1590:	4f 91       	pop	r20
    1592:	2f 91       	pop	r18
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	1f 90       	pop	r1
    159c:	18 95       	reti

0000159e <__vector_10>:
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <Count.1718>
    15bc:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <Count.1718+0x1>
    15c0:	a0 91 d9 06 	lds	r26, 0x06D9	; 0x8006d9 <Count.1718+0x2>
    15c4:	b0 91 da 06 	lds	r27, 0x06DA	; 0x8006da <Count.1718+0x3>
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	a1 1d       	adc	r26, r1
    15cc:	b1 1d       	adc	r27, r1
    15ce:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <Count.1718>
    15d2:	90 93 d8 06 	sts	0x06D8, r25	; 0x8006d8 <Count.1718+0x1>
    15d6:	a0 93 d9 06 	sts	0x06D9, r26	; 0x8006d9 <Count.1718+0x2>
    15da:	b0 93 da 06 	sts	0x06DA, r27	; 0x8006da <Count.1718+0x3>
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	a1 05       	cpc	r26, r1
    15e4:	b1 05       	cpc	r27, r1
    15e6:	b9 f4       	brne	.+46     	; 0x1616 <__vector_10+0x78>
    15e8:	40 91 e7 06 	lds	r20, 0x06E7	; 0x8006e7 <Timer0_Num_OVF>
    15ec:	50 91 e8 06 	lds	r21, 0x06E8	; 0x8006e8 <Timer0_Num_OVF+0x1>
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	84 17       	cp	r24, r20
    15f6:	95 07       	cpc	r25, r21
    15f8:	a6 07       	cpc	r26, r22
    15fa:	b7 07       	cpc	r27, r23
    15fc:	61 f4       	brne	.+24     	; 0x1616 <__vector_10+0x78>
    15fe:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <Count.1718>
    1602:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <Count.1718+0x1>
    1606:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <Count.1718+0x2>
    160a:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <Count.1718+0x3>
    160e:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <Timer0_Init_Value>
    1612:	8c bf       	out	0x3c, r24	; 60
    1614:	1e c0       	rjmp	.+60     	; 0x1652 <__vector_10+0xb4>
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	a1 05       	cpc	r26, r1
    161c:	b1 05       	cpc	r27, r1
    161e:	19 f4       	brne	.+6      	; 0x1626 <__vector_10+0x88>
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	8c bf       	out	0x3c, r24	; 60
    1624:	16 c0       	rjmp	.+44     	; 0x1652 <__vector_10+0xb4>
    1626:	40 91 e7 06 	lds	r20, 0x06E7	; 0x8006e7 <Timer0_Num_OVF>
    162a:	50 91 e8 06 	lds	r21, 0x06E8	; 0x8006e8 <Timer0_Num_OVF+0x1>
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	84 17       	cp	r24, r20
    1634:	95 07       	cpc	r25, r21
    1636:	a6 07       	cpc	r26, r22
    1638:	b7 07       	cpc	r27, r23
    163a:	59 f4       	brne	.+22     	; 0x1652 <__vector_10+0xb4>
    163c:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <Count.1718>
    1640:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <Count.1718+0x1>
    1644:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <Count.1718+0x2>
    1648:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <Count.1718+0x3>
    164c:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <Timer0_Init_Value>
    1650:	8c bf       	out	0x3c, r24	; 60
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	0f 90       	pop	r0
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	0f 90       	pop	r0
    1668:	1f 90       	pop	r1
    166a:	18 95       	reti

0000166c <Timer2_SetDelay>:
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	a8 ee       	ldi	r26, 0xE8	; 232
    1676:	b3 e0       	ldi	r27, 0x03	; 3
    1678:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__muluhisi3>
    167c:	8b 01       	movw	r16, r22
    167e:	9c 01       	movw	r18, r24
    1680:	68 94       	set
    1682:	15 f8       	bld	r1, 5
    1684:	36 95       	lsr	r19
    1686:	27 95       	ror	r18
    1688:	17 95       	ror	r17
    168a:	07 95       	ror	r16
    168c:	16 94       	lsr	r1
    168e:	d1 f7       	brne	.-12     	; 0x1684 <Timer2_SetDelay+0x18>
    1690:	01 30       	cpi	r16, 0x01	; 1
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	14 07       	cpc	r17, r20
    1696:	21 05       	cpc	r18, r1
    1698:	31 05       	cpc	r19, r1
    169a:	60 f4       	brcc	.+24     	; 0x16b4 <Timer2_SetDelay+0x48>
    169c:	80 2f       	mov	r24, r16
    169e:	81 95       	neg	r24
    16a0:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <Timer2_Init_Value>
    16a4:	84 bd       	out	0x24, r24	; 36
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <Timer2_Num_OVF+0x1>
    16ae:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <Timer2_Num_OVF>
    16b2:	24 c0       	rjmp	.+72     	; 0x16fc <Timer2_SetDelay+0x90>
    16b4:	01 11       	cpse	r16, r1
    16b6:	0c c0       	rjmp	.+24     	; 0x16d0 <Timer2_SetDelay+0x64>
    16b8:	ab 01       	movw	r20, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	03 2e       	mov	r0, r19
    16be:	3e e0       	ldi	r19, 0x0E	; 14
    16c0:	76 95       	lsr	r23
    16c2:	67 95       	ror	r22
    16c4:	57 95       	ror	r21
    16c6:	47 95       	ror	r20
    16c8:	3a 95       	dec	r19
    16ca:	d1 f7       	brne	.-12     	; 0x16c0 <Timer2_SetDelay+0x54>
    16cc:	30 2d       	mov	r19, r0
    16ce:	0d c0       	rjmp	.+26     	; 0x16ea <Timer2_SetDelay+0x7e>
    16d0:	ab 01       	movw	r20, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	03 2e       	mov	r0, r19
    16d6:	3e e0       	ldi	r19, 0x0E	; 14
    16d8:	76 95       	lsr	r23
    16da:	67 95       	ror	r22
    16dc:	57 95       	ror	r21
    16de:	47 95       	ror	r20
    16e0:	3a 95       	dec	r19
    16e2:	d1 f7       	brne	.-12     	; 0x16d8 <Timer2_SetDelay+0x6c>
    16e4:	30 2d       	mov	r19, r0
    16e6:	4f 5f       	subi	r20, 0xFF	; 255
    16e8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ea:	50 93 e5 06 	sts	0x06E5, r21	; 0x8006e5 <Timer2_Num_OVF+0x1>
    16ee:	40 93 e4 06 	sts	0x06E4, r20	; 0x8006e4 <Timer2_Num_OVF>
    16f2:	80 2f       	mov	r24, r16
    16f4:	81 95       	neg	r24
    16f6:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <Timer2_Init_Value>
    16fa:	84 bd       	out	0x24, r24	; 36
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	08 95       	ret

00001702 <Timer2_Start>:
    1702:	85 b5       	in	r24, 0x25	; 37
    1704:	87 60       	ori	r24, 0x07	; 7
    1706:	85 bd       	out	0x25, r24	; 37
    1708:	08 95       	ret

0000170a <Timer2_Stop>:
    170a:	85 b5       	in	r24, 0x25	; 37
    170c:	88 7f       	andi	r24, 0xF8	; 248
    170e:	85 bd       	out	0x25, r24	; 37
    1710:	08 95       	ret

00001712 <__vector_5>:
	#endif
	#endif
}

ISR(TIMER2_OVF_vect)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
	
	
}
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1726:	1f 92       	push	r1
    1728:	0f 92       	push	r0
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	0f 92       	push	r0
    172e:	11 24       	eor	r1, r1
    1730:	4f 93       	push	r20
    1732:	5f 93       	push	r21
    1734:	6f 93       	push	r22
    1736:	7f 93       	push	r23
    1738:	8f 93       	push	r24
    173a:	9f 93       	push	r25
    173c:	af 93       	push	r26
    173e:	bf 93       	push	r27
	static Uint32 Count = 0;
	Count++;
    1740:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <Count.1767>
    1744:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <Count.1767+0x1>
    1748:	a0 91 d5 06 	lds	r26, 0x06D5	; 0x8006d5 <Count.1767+0x2>
    174c:	b0 91 d6 06 	lds	r27, 0x06D6	; 0x8006d6 <Count.1767+0x3>
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	a1 1d       	adc	r26, r1
    1754:	b1 1d       	adc	r27, r1
    1756:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <Count.1767>
    175a:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <Count.1767+0x1>
    175e:	a0 93 d5 06 	sts	0x06D5, r26	; 0x8006d5 <Count.1767+0x2>
    1762:	b0 93 d6 06 	sts	0x06D6, r27	; 0x8006d6 <Count.1767+0x3>
	if(Count == 1 && Timer2_Num_OVF == Count)
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	91 05       	cpc	r25, r1
    176a:	a1 05       	cpc	r26, r1
    176c:	b1 05       	cpc	r27, r1
    176e:	b9 f4       	brne	.+46     	; 0x179e <__vector_4+0x78>
    1770:	40 91 e4 06 	lds	r20, 0x06E4	; 0x8006e4 <Timer2_Num_OVF>
    1774:	50 91 e5 06 	lds	r21, 0x06E5	; 0x8006e5 <Timer2_Num_OVF+0x1>
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	84 17       	cp	r24, r20
    177e:	95 07       	cpc	r25, r21
    1780:	a6 07       	cpc	r26, r22
    1782:	b7 07       	cpc	r27, r23
    1784:	61 f4       	brne	.+24     	; 0x179e <__vector_4+0x78>
	{
		// Write CMP of Timer_2 handler here
		
		
		Count = 0;
    1786:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <Count.1767>
    178a:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <Count.1767+0x1>
    178e:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <Count.1767+0x2>
    1792:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <Count.1767+0x3>
		OCR2 = Timer2_Init_Value;
    1796:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Timer2_Init_Value>
    179a:	83 bd       	out	0x23, r24	; 35
    179c:	1e c0       	rjmp	.+60     	; 0x17da <__vector_4+0xb4>
	}
	else if(Count == 1)
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 05       	cpc	r25, r1
    17a2:	a1 05       	cpc	r26, r1
    17a4:	b1 05       	cpc	r27, r1
    17a6:	19 f4       	brne	.+6      	; 0x17ae <__vector_4+0x88>
	OCR2 = 255;
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	83 bd       	out	0x23, r24	; 35
    17ac:	16 c0       	rjmp	.+44     	; 0x17da <__vector_4+0xb4>
	else if(Timer2_Num_OVF == Count)
    17ae:	40 91 e4 06 	lds	r20, 0x06E4	; 0x8006e4 <Timer2_Num_OVF>
    17b2:	50 91 e5 06 	lds	r21, 0x06E5	; 0x8006e5 <Timer2_Num_OVF+0x1>
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	84 17       	cp	r24, r20
    17bc:	95 07       	cpc	r25, r21
    17be:	a6 07       	cpc	r26, r22
    17c0:	b7 07       	cpc	r27, r23
    17c2:	59 f4       	brne	.+22     	; 0x17da <__vector_4+0xb4>
	{
		// Write CMP of Timer_2 handler here
		
		
		Count = 0;
    17c4:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <Count.1767>
    17c8:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <Count.1767+0x1>
    17cc:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <Count.1767+0x2>
    17d0:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <Count.1767+0x3>
		OCR2 = Timer2_Init_Value;
    17d4:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Timer2_Init_Value>
    17d8:	83 bd       	out	0x23, r24	; 35
	}
}
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	0f 90       	pop	r0
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	0f 90       	pop	r0
    17f0:	1f 90       	pop	r1
    17f2:	18 95       	reti

000017f4 <UART_TX_Char>:
    UBRRH = (UART_Baud_Rate >> 8);
}

void UART_TX_Char(Uint8 data) {
    // Sending Data
    UDR = data;
    17f4:	8c b9       	out	0x0c, r24	; 12

    // Checking the data is sent
    while (!Get_Bit(UCSRA, 5));
    17f6:	5d 9b       	sbis	0x0b, 5	; 11
    17f8:	fe cf       	rjmp	.-4      	; 0x17f6 <UART_TX_Char+0x2>
}
    17fa:	08 95       	ret

000017fc <UART_TX_Str>:

void UART_TX_Str(Uint8 * str) {
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	8c 01       	movw	r16, r24
    for (Uint8 i = 0; str[i] != '\n'; i++) {
    1804:	c0 e0       	ldi	r28, 0x00	; 0
    1806:	03 c0       	rjmp	.+6      	; 0x180e <UART_TX_Str+0x12>
        UART_TX_Char(str[i]);
    1808:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <UART_TX_Char>
    // Checking the data is sent
    while (!Get_Bit(UCSRA, 5));
}

void UART_TX_Str(Uint8 * str) {
    for (Uint8 i = 0; str[i] != '\n'; i++) {
    180c:	cf 5f       	subi	r28, 0xFF	; 255
    180e:	f8 01       	movw	r30, r16
    1810:	ec 0f       	add	r30, r28
    1812:	f1 1d       	adc	r31, r1
    1814:	80 81       	ld	r24, Z
    1816:	8a 30       	cpi	r24, 0x0A	; 10
    1818:	b9 f7       	brne	.-18     	; 0x1808 <UART_TX_Str+0xc>
        UART_TX_Char(str[i]);
    }
}
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <UART_RX_Char>:

Uint8 UART_RX_Char(void) {
    Uint8 Value = 0;
    while (!Get_Bit(UCSRA, 5));
    1822:	5d 9b       	sbis	0x0b, 5	; 11
    1824:	fe cf       	rjmp	.-4      	; 0x1822 <UART_RX_Char>
    Value = UDR;
    1826:	8c b1       	in	r24, 0x0c	; 12
    return Value;
}
    1828:	08 95       	ret

0000182a <__vector_13>:

ISR(USART_RXC_vect) {
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	4f 92       	push	r4
    1836:	5f 92       	push	r5
    1838:	6f 92       	push	r6
    183a:	7f 92       	push	r7
    183c:	8f 92       	push	r8
    183e:	9f 92       	push	r9
    1840:	af 92       	push	r10
    1842:	bf 92       	push	r11
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	2f 93       	push	r18
    1852:	3f 93       	push	r19
    1854:	4f 93       	push	r20
    1856:	5f 93       	push	r21
    1858:	6f 93       	push	r22
    185a:	7f 93       	push	r23
    185c:	8f 93       	push	r24
    185e:	9f 93       	push	r25
    1860:	af 93       	push	r26
    1862:	bf 93       	push	r27
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	64 97       	sbiw	r28, 0x14	; 20
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	cd bf       	out	0x3d, r28	; 61
    Uint8 KP_User[4] = {
    1876:	19 82       	std	Y+1, r1	; 0x01
    1878:	1a 82       	std	Y+2, r1	; 0x02
    187a:	1b 82       	std	Y+3, r1	; 0x03
    187c:	1c 82       	std	Y+4, r1	; 0x04
        0
    };
    Uint8 KP_Pass[4] = {
        0
    };
    Uint8 PC_User[4] = {
    187e:	1d 82       	std	Y+5, r1	; 0x05
    1880:	1e 82       	std	Y+6, r1	; 0x06
    1882:	1f 82       	std	Y+7, r1	; 0x07
    1884:	18 86       	std	Y+8, r1	; 0x08
        0
    };
    Uint8 PC_Pass[4] = {
    1886:	19 86       	std	Y+9, r1	; 0x09
    1888:	1a 86       	std	Y+10, r1	; 0x0a
    188a:	1b 86       	std	Y+11, r1	; 0x0b
    188c:	1c 86       	std	Y+12, r1	; 0x0c
        0
    };
    Uint8 AD_User[4] = {
    188e:	1d 86       	std	Y+13, r1	; 0x0d
    1890:	1e 86       	std	Y+14, r1	; 0x0e
    1892:	1f 86       	std	Y+15, r1	; 0x0f
    1894:	18 8a       	std	Y+16, r1	; 0x10
        0
    };
    Uint8 AD_Pass[4] = {
    1896:	19 8a       	std	Y+17, r1	; 0x11
    1898:	1a 8a       	std	Y+18, r1	; 0x12
    189a:	1b 8a       	std	Y+19, r1	; 0x13
    189c:	1c 8a       	std	Y+20, r1	; 0x14
        0
    };

    if (!eme_check)
    189e:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    18a2:	81 11       	cpse	r24, r1
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <__vector_13+0x80>
        Timer2_Start();
    18a6:	0e 94 81 0b 	call	0x1702	; 0x1702 <Timer2_Start>
    // Write UART receive handler here
    if (!SYS_Check) {
    18aa:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <SYS_Check>
    18ae:	81 11       	cpse	r24, r1
    18b0:	0b c2       	rjmp	.+1046   	; 0x1cc8 <__vector_13+0x49e>
		while (!Get_Bit(UCSRA, 7));
    18b2:	5f 9b       	sbis	0x0b, 7	; 11
    18b4:	fe cf       	rjmp	.-4      	; 0x18b2 <__vector_13+0x88>
		A_U_Check = UDR;
    18b6:	8c b1       	in	r24, 0x0c	; 12
    18b8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <A_U_Check>
		
        // Commands check
        for (Uint8 i = 0; i < 3; i++) {
    18bc:	91 2c       	mov	r9, r1
    18be:	00 c2       	rjmp	.+1024   	; 0x1cc0 <__vector_13+0x496>
            
            if (A_U_Check == '1') {
    18c0:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <A_U_Check>
    18c4:	81 33       	cpi	r24, 0x31	; 49
    18c6:	09 f0       	breq	.+2      	; 0x18ca <__vector_13+0xa0>
    18c8:	e4 c0       	rjmp	.+456    	; 0x1a92 <__vector_13+0x268>
                // Admin enter the system
                /*------------->Entering Username<-------------*/
                UART_TX_Str("\r\n");
    18ca:	85 ef       	ldi	r24, 0xF5	; 245
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
				UART_TX_Str("\r\n");
    18d2:	85 ef       	ldi	r24, 0xF5	; 245
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter your username\r\n");
    18da:	86 ea       	ldi	r24, 0xA6	; 166
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    18e2:	85 ef       	ldi	r24, 0xF5	; 245
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

                for (Uint8 i = 0; i < 4; i++) {
    18ea:	10 e0       	ldi	r17, 0x00	; 0
    18ec:	0e c0       	rjmp	.+28     	; 0x190a <__vector_13+0xe0>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    18ee:	5f 9b       	sbis	0x0b, 7	; 11
    18f0:	fe cf       	rjmp	.-4      	; 0x18ee <__vector_13+0xc4>
                    AD_User[i] = UART_RX_Char(); // Receiving the character in username array
    18f2:	e1 2e       	mov	r14, r17
    18f4:	f1 2c       	mov	r15, r1
    18f6:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    18fa:	ed e0       	ldi	r30, 0x0D	; 13
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	ec 0f       	add	r30, r28
    1900:	fd 1f       	adc	r31, r29
    1902:	ee 0d       	add	r30, r14
    1904:	ff 1d       	adc	r31, r15
    1906:	80 83       	st	Z, r24
                UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
                UART_TX_Str("Please enter your username\r\n");
                UART_TX_Str("\r\n");

                for (Uint8 i = 0; i < 4; i++) {
    1908:	1f 5f       	subi	r17, 0xFF	; 255
    190a:	14 30       	cpi	r17, 0x04	; 4
    190c:	80 f3       	brcs	.-32     	; 0x18ee <__vector_13+0xc4>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
                    AD_User[i] = UART_RX_Char(); // Receiving the character in username array
                }

                /*------------->Entering Password<-------------*/
                UART_TX_Str("\r\n");
    190e:	85 ef       	ldi	r24, 0xF5	; 245
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1916:	85 ef       	ldi	r24, 0xF5	; 245
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter your password\r\n");
    191e:	83 ec       	ldi	r24, 0xC3	; 195
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1926:	85 ef       	ldi	r24, 0xF5	; 245
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

                for (Uint8 i = 0; i < 4; i++) {
    192e:	10 e0       	ldi	r17, 0x00	; 0
    1930:	0e c0       	rjmp	.+28     	; 0x194e <__vector_13+0x124>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    1932:	5f 9b       	sbis	0x0b, 7	; 11
    1934:	fe cf       	rjmp	.-4      	; 0x1932 <__vector_13+0x108>
                    AD_Pass[i] = UART_RX_Char(); // Receiving the character in password array
    1936:	e1 2e       	mov	r14, r17
    1938:	f1 2c       	mov	r15, r1
    193a:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    193e:	e1 e1       	ldi	r30, 0x11	; 17
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	ec 0f       	add	r30, r28
    1944:	fd 1f       	adc	r31, r29
    1946:	ee 0d       	add	r30, r14
    1948:	ff 1d       	adc	r31, r15
    194a:	80 83       	st	Z, r24
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter your password\r\n");
                UART_TX_Str("\r\n");

                for (Uint8 i = 0; i < 4; i++) {
    194c:	1f 5f       	subi	r17, 0xFF	; 255
    194e:	14 30       	cpi	r17, 0x04	; 4
    1950:	80 f3       	brcs	.-32     	; 0x1932 <__vector_13+0x108>
    1952:	81 2c       	mov	r8, r1
    1954:	84 c0       	rjmp	.+264    	; 0x1a5e <__vector_13+0x234>

                /*---------------> Checking Username & Password<---------------*/

                for (Uint8 Check_Counter = 0; Check_Counter <= AD_Counter; Check_Counter += 4) {
                    /*----------------->Username Check<------------------*/
                    if (AD_User[0] == EEPROM_ReadByte(5, Check_Counter + 1) && AD_User[1] == EEPROM_ReadByte(5, Check_Counter + 2) && AD_User[2] == EEPROM_ReadByte(5, Check_Counter + 3) && AD_User[3] == EEPROM_ReadByte(5, Check_Counter + 4)) {
    1956:	cd 84       	ldd	r12, Y+13	; 0x0d
    1958:	d1 2c       	mov	r13, r1
    195a:	08 2d       	mov	r16, r8
    195c:	10 e0       	ldi	r17, 0x00	; 0
    195e:	78 01       	movw	r14, r16
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	e8 1a       	sub	r14, r24
    1964:	f8 0a       	sbc	r15, r24
    1966:	b7 01       	movw	r22, r14
    1968:	85 e0       	ldi	r24, 0x05	; 5
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1970:	c8 16       	cp	r12, r24
    1972:	d9 06       	cpc	r13, r25
    1974:	09 f0       	breq	.+2      	; 0x1978 <__vector_13+0x14e>
    1976:	71 c0       	rjmp	.+226    	; 0x1a5a <__vector_13+0x230>
    1978:	ce 84       	ldd	r12, Y+14	; 0x0e
    197a:	d1 2c       	mov	r13, r1
    197c:	38 01       	movw	r6, r16
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	68 0e       	add	r6, r24
    1982:	71 1c       	adc	r7, r1
    1984:	b3 01       	movw	r22, r6
    1986:	85 e0       	ldi	r24, 0x05	; 5
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    198e:	c8 16       	cp	r12, r24
    1990:	d9 06       	cpc	r13, r25
    1992:	09 f0       	breq	.+2      	; 0x1996 <__vector_13+0x16c>
    1994:	62 c0       	rjmp	.+196    	; 0x1a5a <__vector_13+0x230>
    1996:	af 84       	ldd	r10, Y+15	; 0x0f
    1998:	b1 2c       	mov	r11, r1
    199a:	68 01       	movw	r12, r16
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	c8 0e       	add	r12, r24
    19a0:	d1 1c       	adc	r13, r1
    19a2:	b6 01       	movw	r22, r12
    19a4:	85 e0       	ldi	r24, 0x05	; 5
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    19ac:	a8 16       	cp	r10, r24
    19ae:	b9 06       	cpc	r11, r25
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <__vector_13+0x18a>
    19b2:	53 c0       	rjmp	.+166    	; 0x1a5a <__vector_13+0x230>
    19b4:	a8 88       	ldd	r10, Y+16	; 0x10
    19b6:	b1 2c       	mov	r11, r1
    19b8:	0c 5f       	subi	r16, 0xFC	; 252
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	b8 01       	movw	r22, r16
    19be:	85 e0       	ldi	r24, 0x05	; 5
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    19c6:	a8 16       	cp	r10, r24
    19c8:	b9 06       	cpc	r11, r25
    19ca:	09 f0       	breq	.+2      	; 0x19ce <__vector_13+0x1a4>
    19cc:	46 c0       	rjmp	.+140    	; 0x1a5a <__vector_13+0x230>
                        /*----------------->Password Check<------------------*/

                        if (AD_Pass[0] == EEPROM_ReadByte(6, Check_Counter + 1) && AD_Pass[1] == EEPROM_ReadByte(6, Check_Counter + 2) && AD_Pass[2] == EEPROM_ReadByte(6, Check_Counter + 3) && AD_Pass[3] == EEPROM_ReadByte(6, Check_Counter + 4)) {
    19ce:	a9 88       	ldd	r10, Y+17	; 0x11
    19d0:	b1 2c       	mov	r11, r1
    19d2:	b7 01       	movw	r22, r14
    19d4:	86 e0       	ldi	r24, 0x06	; 6
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    19dc:	a8 16       	cp	r10, r24
    19de:	b9 06       	cpc	r11, r25
    19e0:	e1 f5       	brne	.+120    	; 0x1a5a <__vector_13+0x230>
    19e2:	ea 88       	ldd	r14, Y+18	; 0x12
    19e4:	f1 2c       	mov	r15, r1
    19e6:	b3 01       	movw	r22, r6
    19e8:	86 e0       	ldi	r24, 0x06	; 6
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    19f0:	e8 16       	cp	r14, r24
    19f2:	f9 06       	cpc	r15, r25
    19f4:	91 f5       	brne	.+100    	; 0x1a5a <__vector_13+0x230>
    19f6:	eb 88       	ldd	r14, Y+19	; 0x13
    19f8:	f1 2c       	mov	r15, r1
    19fa:	b6 01       	movw	r22, r12
    19fc:	86 e0       	ldi	r24, 0x06	; 6
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1a04:	e8 16       	cp	r14, r24
    1a06:	f9 06       	cpc	r15, r25
    1a08:	41 f5       	brne	.+80     	; 0x1a5a <__vector_13+0x230>
    1a0a:	ec 88       	ldd	r14, Y+20	; 0x14
    1a0c:	f1 2c       	mov	r15, r1
    1a0e:	b8 01       	movw	r22, r16
    1a10:	86 e0       	ldi	r24, 0x06	; 6
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1a18:	e8 16       	cp	r14, r24
    1a1a:	f9 06       	cpc	r15, r25
    1a1c:	f1 f4       	brne	.+60     	; 0x1a5a <__vector_13+0x230>
                            /*----------------->Wright Username & Password<-----------------*/
                            UART_TX_Str("\r\n");
    1a1e:	85 ef       	ldi	r24, 0xF5	; 245
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("\r\n");
    1a26:	85 ef       	ldi	r24, 0xF5	; 245
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("Admin exist, Welcome!\r\n");
    1a2e:	80 ee       	ldi	r24, 0xE0	; 224
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("\r\n");
    1a36:	85 ef       	ldi	r24, 0xF5	; 245
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            Check_Counter = AD_Counter + 1;
    1a3e:	80 90 70 00 	lds	r8, 0x0070	; 0x800070 <AD_Counter>
    1a42:	83 94       	inc	r8
                            SYS_Check = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <SYS_Check>
                            CMD_Check = 1;
    1a4a:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <CMD_Check>
                            i = 5;
                            A_U_Check = 0;
    1a4e:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <A_U_Check>
                            UART_TX_Str("Admin exist, Welcome!\r\n");
                            UART_TX_Str("\r\n");
                            Check_Counter = AD_Counter + 1;
                            SYS_Check = 1;
                            CMD_Check = 1;
                            i = 5;
    1a52:	0f 2e       	mov	r0, r31
    1a54:	f5 e0       	ldi	r31, 0x05	; 5
    1a56:	9f 2e       	mov	r9, r31
    1a58:	f0 2d       	mov	r31, r0
                    AD_Pass[i] = UART_RX_Char(); // Receiving the character in password array
                }

                /*---------------> Checking Username & Password<---------------*/

                for (Uint8 Check_Counter = 0; Check_Counter <= AD_Counter; Check_Counter += 4) {
    1a5a:	84 e0       	ldi	r24, 0x04	; 4
    1a5c:	88 0e       	add	r8, r24
    1a5e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <AD_Counter>
    1a62:	88 15       	cp	r24, r8
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <__vector_13+0x23e>
    1a66:	77 cf       	rjmp	.-274    	; 0x1956 <__vector_13+0x12c>
                        }
                    }
                }

                /*----------------->Wrong Username or Password<-----------------*/
                if (!SYS_Check) {
    1a68:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <SYS_Check>
    1a6c:	81 11       	cpse	r24, r1
    1a6e:	1b c1       	rjmp	.+566    	; 0x1ca6 <__vector_13+0x47c>
                    UART_TX_Str("\r\n");
    1a70:	85 ef       	ldi	r24, 0xF5	; 245
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("\r\n");
    1a78:	85 ef       	ldi	r24, 0xF5	; 245
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("Admin does not exist. Please try again\r\n");
    1a80:	88 ef       	ldi	r24, 0xF8	; 248
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("\r\n");
    1a88:	85 ef       	ldi	r24, 0xF5	; 245
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    1a90:	0a c1       	rjmp	.+532    	; 0x1ca6 <__vector_13+0x47c>
                }
            } else if (A_U_Check == '2') {
    1a92:	82 33       	cpi	r24, 0x32	; 50
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <__vector_13+0x26e>
    1a96:	e1 c0       	rjmp	.+450    	; 0x1c5a <__vector_13+0x430>
                // PC user enter the system
                /*------------->Entering Username<-------------*/
                UART_TX_Str("\r\n");
    1a98:	85 ef       	ldi	r24, 0xF5	; 245
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter your username\r\n");
    1aa0:	86 ea       	ldi	r24, 0xA6	; 166
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1aa8:	85 ef       	ldi	r24, 0xF5	; 245
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

                for (Uint8 i = 0; i < 4; i++) {
    1ab0:	10 e0       	ldi	r17, 0x00	; 0
    1ab2:	0e c0       	rjmp	.+28     	; 0x1ad0 <__vector_13+0x2a6>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    1ab4:	5f 9b       	sbis	0x0b, 7	; 11
    1ab6:	fe cf       	rjmp	.-4      	; 0x1ab4 <__vector_13+0x28a>
                    PC_User[i] = UART_RX_Char(); // Receiving the character in username array
    1ab8:	e1 2e       	mov	r14, r17
    1aba:	f1 2c       	mov	r15, r1
    1abc:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    1ac0:	e5 e0       	ldi	r30, 0x05	; 5
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	ec 0f       	add	r30, r28
    1ac6:	fd 1f       	adc	r31, r29
    1ac8:	ee 0d       	add	r30, r14
    1aca:	ff 1d       	adc	r31, r15
    1acc:	80 83       	st	Z, r24
                /*------------->Entering Username<-------------*/
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter your username\r\n");
                UART_TX_Str("\r\n");

                for (Uint8 i = 0; i < 4; i++) {
    1ace:	1f 5f       	subi	r17, 0xFF	; 255
    1ad0:	14 30       	cpi	r17, 0x04	; 4
    1ad2:	80 f3       	brcs	.-32     	; 0x1ab4 <__vector_13+0x28a>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
                    PC_User[i] = UART_RX_Char(); // Receiving the character in username array
                }

                /*------------->Entering Password<-------------*/
                UART_TX_Str("\r\n");
    1ad4:	85 ef       	ldi	r24, 0xF5	; 245
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1adc:	85 ef       	ldi	r24, 0xF5	; 245
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter your password\r\n");
    1ae4:	83 ec       	ldi	r24, 0xC3	; 195
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1aec:	85 ef       	ldi	r24, 0xF5	; 245
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

                for (Uint8 i = 0; i < 4; i++) {
    1af4:	10 e0       	ldi	r17, 0x00	; 0
    1af6:	0e c0       	rjmp	.+28     	; 0x1b14 <__vector_13+0x2ea>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    1af8:	5f 9b       	sbis	0x0b, 7	; 11
    1afa:	fe cf       	rjmp	.-4      	; 0x1af8 <__vector_13+0x2ce>
                    PC_Pass[i] = UART_RX_Char(); // Receiving the character in password array
    1afc:	e1 2e       	mov	r14, r17
    1afe:	f1 2c       	mov	r15, r1
    1b00:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    1b04:	e9 e0       	ldi	r30, 0x09	; 9
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	ec 0f       	add	r30, r28
    1b0a:	fd 1f       	adc	r31, r29
    1b0c:	ee 0d       	add	r30, r14
    1b0e:	ff 1d       	adc	r31, r15
    1b10:	80 83       	st	Z, r24
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter your password\r\n");
                UART_TX_Str("\r\n");

                for (Uint8 i = 0; i < 4; i++) {
    1b12:	1f 5f       	subi	r17, 0xFF	; 255
    1b14:	14 30       	cpi	r17, 0x04	; 4
    1b16:	80 f3       	brcs	.-32     	; 0x1af8 <__vector_13+0x2ce>
    1b18:	b1 2c       	mov	r11, r1
    1b1a:	85 c0       	rjmp	.+266    	; 0x1c26 <__vector_13+0x3fc>
                }

                /*---------------> Checking Username & Password<---------------*/
                for (Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4) {
                    /*----------------->Username Check<------------------*/
                    if (PC_User[0] == EEPROM_ReadByte(2, Check_Counter + 1) && PC_User[1] == EEPROM_ReadByte(2, Check_Counter + 2) && PC_User[2] == EEPROM_ReadByte(2, Check_Counter + 3) && PC_User[3] == EEPROM_ReadByte(2, Check_Counter + 4)) {
    1b1c:	cd 80       	ldd	r12, Y+5	; 0x05
    1b1e:	d1 2c       	mov	r13, r1
    1b20:	0b 2d       	mov	r16, r11
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	78 01       	movw	r14, r16
    1b26:	8f ef       	ldi	r24, 0xFF	; 255
    1b28:	e8 1a       	sub	r14, r24
    1b2a:	f8 0a       	sbc	r15, r24
    1b2c:	b7 01       	movw	r22, r14
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1b36:	c8 16       	cp	r12, r24
    1b38:	d9 06       	cpc	r13, r25
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <__vector_13+0x314>
    1b3c:	72 c0       	rjmp	.+228    	; 0x1c22 <__vector_13+0x3f8>
    1b3e:	ce 80       	ldd	r12, Y+6	; 0x06
    1b40:	d1 2c       	mov	r13, r1
    1b42:	28 01       	movw	r4, r16
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	48 0e       	add	r4, r24
    1b48:	51 1c       	adc	r5, r1
    1b4a:	b2 01       	movw	r22, r4
    1b4c:	82 e0       	ldi	r24, 0x02	; 2
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1b54:	c8 16       	cp	r12, r24
    1b56:	d9 06       	cpc	r13, r25
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <__vector_13+0x332>
    1b5a:	63 c0       	rjmp	.+198    	; 0x1c22 <__vector_13+0x3f8>
    1b5c:	cf 80       	ldd	r12, Y+7	; 0x07
    1b5e:	d1 2c       	mov	r13, r1
    1b60:	38 01       	movw	r6, r16
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	68 0e       	add	r6, r24
    1b66:	71 1c       	adc	r7, r1
    1b68:	b3 01       	movw	r22, r6
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1b72:	c8 16       	cp	r12, r24
    1b74:	d9 06       	cpc	r13, r25
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <__vector_13+0x350>
    1b78:	54 c0       	rjmp	.+168    	; 0x1c22 <__vector_13+0x3f8>
    1b7a:	c8 84       	ldd	r12, Y+8	; 0x08
    1b7c:	d1 2c       	mov	r13, r1
    1b7e:	0c 5f       	subi	r16, 0xFC	; 252
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	b8 01       	movw	r22, r16
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1b8c:	c8 16       	cp	r12, r24
    1b8e:	d9 06       	cpc	r13, r25
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <__vector_13+0x36a>
    1b92:	47 c0       	rjmp	.+142    	; 0x1c22 <__vector_13+0x3f8>
                        /*----------------->Password Check<------------------*/
                        if (PC_Pass[0] == EEPROM_ReadByte(3, Check_Counter + 1) && PC_Pass[1] == EEPROM_ReadByte(3, Check_Counter + 2) && PC_Pass[2] == EEPROM_ReadByte(3, Check_Counter + 3) && PC_Pass[3] == EEPROM_ReadByte(3, Check_Counter + 4)) {
    1b94:	c9 84       	ldd	r12, Y+9	; 0x09
    1b96:	d1 2c       	mov	r13, r1
    1b98:	b7 01       	movw	r22, r14
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1ba2:	c8 16       	cp	r12, r24
    1ba4:	d9 06       	cpc	r13, r25
    1ba6:	e9 f5       	brne	.+122    	; 0x1c22 <__vector_13+0x3f8>
    1ba8:	ea 84       	ldd	r14, Y+10	; 0x0a
    1baa:	f1 2c       	mov	r15, r1
    1bac:	b2 01       	movw	r22, r4
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1bb6:	e8 16       	cp	r14, r24
    1bb8:	f9 06       	cpc	r15, r25
    1bba:	99 f5       	brne	.+102    	; 0x1c22 <__vector_13+0x3f8>
    1bbc:	eb 84       	ldd	r14, Y+11	; 0x0b
    1bbe:	f1 2c       	mov	r15, r1
    1bc0:	b3 01       	movw	r22, r6
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1bca:	e8 16       	cp	r14, r24
    1bcc:	f9 06       	cpc	r15, r25
    1bce:	49 f5       	brne	.+82     	; 0x1c22 <__vector_13+0x3f8>
    1bd0:	ec 84       	ldd	r14, Y+12	; 0x0c
    1bd2:	f1 2c       	mov	r15, r1
    1bd4:	b8 01       	movw	r22, r16
    1bd6:	83 e0       	ldi	r24, 0x03	; 3
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    1bde:	e8 16       	cp	r14, r24
    1be0:	f9 06       	cpc	r15, r25
    1be2:	f9 f4       	brne	.+62     	; 0x1c22 <__vector_13+0x3f8>
                            /*----------------->Wright Username & Password<-----------------*/
                            UART_TX_Str("\r\n");
    1be4:	85 ef       	ldi	r24, 0xF5	; 245
    1be6:	91 e0       	ldi	r25, 0x01	; 1
    1be8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("\r\n");
    1bec:	85 ef       	ldi	r24, 0xF5	; 245
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("User exist, Welcome!\r\n");
    1bf4:	81 e2       	ldi	r24, 0x21	; 33
    1bf6:	92 e0       	ldi	r25, 0x02	; 2
    1bf8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            UART_TX_Str("\r\n");
    1bfc:	85 ef       	ldi	r24, 0xF5	; 245
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                            Check_Counter = PC_Counter + 1;
    1c04:	b0 90 f0 06 	lds	r11, 0x06F0	; 0x8006f0 <PC_Counter>
    1c08:	b3 94       	inc	r11
                            SYS_Check = 2;
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <SYS_Check>
                            CMD_Check = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <CMD_Check>
                            i = 5;
                            A_U_Check = 0;
    1c16:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <A_U_Check>
                            UART_TX_Str("User exist, Welcome!\r\n");
                            UART_TX_Str("\r\n");
                            Check_Counter = PC_Counter + 1;
                            SYS_Check = 2;
                            CMD_Check = 1;
                            i = 5;
    1c1a:	0f 2e       	mov	r0, r31
    1c1c:	f5 e0       	ldi	r31, 0x05	; 5
    1c1e:	9f 2e       	mov	r9, r31
    1c20:	f0 2d       	mov	r31, r0
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
                    PC_Pass[i] = UART_RX_Char(); // Receiving the character in password array
                }

                /*---------------> Checking Username & Password<---------------*/
                for (Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4) {
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	b8 0e       	add	r11, r24
    1c26:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <PC_Counter>
    1c2a:	8b 15       	cp	r24, r11
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <__vector_13+0x406>
    1c2e:	76 cf       	rjmp	.-276    	; 0x1b1c <__vector_13+0x2f2>
                        }
                    }
                }

                /*----------------->Wrong Username or Password<-----------------*/
                if (!SYS_Check) {
    1c30:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <SYS_Check>
    1c34:	81 11       	cpse	r24, r1
    1c36:	37 c0       	rjmp	.+110    	; 0x1ca6 <__vector_13+0x47c>
                    UART_TX_Str("\r\n");
    1c38:	85 ef       	ldi	r24, 0xF5	; 245
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("\r\n");
    1c40:	85 ef       	ldi	r24, 0xF5	; 245
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("User does not exist. Please try again\r\n");
    1c48:	88 e3       	ldi	r24, 0x38	; 56
    1c4a:	92 e0       	ldi	r25, 0x02	; 2
    1c4c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("\r\n");
    1c50:	85 ef       	ldi	r24, 0xF5	; 245
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    1c58:	26 c0       	rjmp	.+76     	; 0x1ca6 <__vector_13+0x47c>
                }
            } else {
                UART_TX_Str("\r\n");
    1c5a:	85 ef       	ldi	r24, 0xF5	; 245
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1c62:	85 ef       	ldi	r24, 0xF5	; 245
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter command number\r\n");
    1c6a:	80 e6       	ldi	r24, 0x60	; 96
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1c72:	85 ef       	ldi	r24, 0xF5	; 245
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1c7a:	85 ef       	ldi	r24, 0xF5	; 245
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("1.Enter Admin\r\n");
    1c82:	8e e7       	ldi	r24, 0x7E	; 126
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("2.Enter User\r\n");
    1c8a:	8e e8       	ldi	r24, 0x8E	; 142
    1c8c:	92 e0       	ldi	r25, 0x02	; 2
    1c8e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    1c92:	85 ef       	ldi	r24, 0xF5	; 245
    1c94:	91 e0       	ldi	r25, 0x01	; 1
    1c96:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                i--;
    1c9a:	9a 94       	dec	r9
				while (!Get_Bit(UCSRA, 7));
    1c9c:	5f 9b       	sbis	0x0b, 7	; 11
    1c9e:	fe cf       	rjmp	.-4      	; 0x1c9c <__vector_13+0x472>
				A_U_Check = UDR;
    1ca0:	8c b1       	in	r24, 0x0c	; 12
    1ca2:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <A_U_Check>
            }

            if (i == 2) {
    1ca6:	82 e0       	ldi	r24, 0x02	; 2
    1ca8:	98 12       	cpse	r9, r24
    1caa:	09 c0       	rjmp	.+18     	; 0x1cbe <__vector_13+0x494>
                LCD_Clear();
    1cac:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                LCD_Write_String("Firing Alarm!");
    1cb0:	81 e6       	ldi	r24, 0x61	; 97
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>

                while (1) {
                    Alarm_Fn();
    1cb8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <Alarm_Fn>
    1cbc:	fd cf       	rjmp	.-6      	; 0x1cb8 <__vector_13+0x48e>
    if (!SYS_Check) {
		while (!Get_Bit(UCSRA, 7));
		A_U_Check = UDR;
		
        // Commands check
        for (Uint8 i = 0; i < 3; i++) {
    1cbe:	93 94       	inc	r9
    1cc0:	82 e0       	ldi	r24, 0x02	; 2
    1cc2:	89 15       	cp	r24, r9
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <__vector_13+0x49e>
    1cc6:	fc cd       	rjmp	.-1032   	; 0x18c0 <__vector_13+0x96>
                    Alarm_Fn();
                }
            }
        }
    }
    if (SYS_Check == 1) {
    1cc8:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <SYS_Check>
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <__vector_13+0x4a8>
    1cd0:	f4 c5       	rjmp	.+3048   	; 0x28ba <__vector_13+0x1090>
		if(!CMD_Check){
    1cd2:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <CMD_Check>
    1cd6:	81 11       	cpse	r24, r1
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <__vector_13+0x4b8>
			UART_GetValue = UDR;
    1cda:	8c b1       	in	r24, 0x0c	; 12
    1cdc:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <__vector_13+0x4c2>
        }else {
            UART_GetValue = 8;
    1ce2:	88 e0       	ldi	r24, 0x08	; 8
    1ce4:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>
            CMD_Check = 0;
    1ce8:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <CMD_Check>
        }

        if (UART_GetValue == '1') {
    1cec:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <UART_GetValue>
    1cf0:	81 33       	cpi	r24, 0x31	; 49
    1cf2:	b9 f4       	brne	.+46     	; 0x1d22 <__vector_13+0x4f8>
            // Open the door
            Servoo_Motor(316);
    1cf4:	6c e3       	ldi	r22, 0x3C	; 60
    1cf6:	71 e0       	ldi	r23, 0x01	; 1
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <Servoo_Motor>
            if (!eme_check) {
    1d00:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1d04:	81 11       	cpse	r24, r1
    1d06:	6f c5       	rjmp	.+2782   	; 0x27e6 <__vector_13+0xfbc>
                LCD_Clear();
    1d08:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                LCD_Write_String("Door Opened!");
    1d0c:	8d e9       	ldi	r24, 0x9D	; 157
    1d0e:	92 e0       	ldi	r25, 0x02	; 2
    1d10:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                Timer2_SetDelay(2000);
    1d14:	60 ed       	ldi	r22, 0xD0	; 208
    1d16:	77 e0       	ldi	r23, 0x07	; 7
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 36 0b 	call	0x166c	; 0x166c <Timer2_SetDelay>
    1d20:	62 c5       	rjmp	.+2756   	; 0x27e6 <__vector_13+0xfbc>
            }
        } else if (UART_GetValue == '2') {
    1d22:	82 33       	cpi	r24, 0x32	; 50
    1d24:	b9 f4       	brne	.+46     	; 0x1d54 <__vector_13+0x52a>
            // Close the door
            Servoo_Motor(97);
    1d26:	61 e6       	ldi	r22, 0x61	; 97
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <Servoo_Motor>
            if (!eme_check) {
    1d32:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1d36:	81 11       	cpse	r24, r1
    1d38:	56 c5       	rjmp	.+2732   	; 0x27e6 <__vector_13+0xfbc>
                LCD_Clear();
    1d3a:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                LCD_Write_String("Door Closed!");
    1d3e:	8a ea       	ldi	r24, 0xAA	; 170
    1d40:	92 e0       	ldi	r25, 0x02	; 2
    1d42:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                Timer2_SetDelay(2000);
    1d46:	60 ed       	ldi	r22, 0xD0	; 208
    1d48:	77 e0       	ldi	r23, 0x07	; 7
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 36 0b 	call	0x166c	; 0x166c <Timer2_SetDelay>
    1d52:	49 c5       	rjmp	.+2706   	; 0x27e6 <__vector_13+0xfbc>
            }
        } else if (UART_GetValue == '3') {
    1d54:	83 33       	cpi	r24, 0x33	; 51
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <__vector_13+0x530>
    1d58:	8a c0       	rjmp	.+276    	; 0x1e6e <__vector_13+0x644>
            // Open lamps
            UART_TX_Str("\r\n");
    1d5a:	85 ef       	ldi	r24, 0xF5	; 245
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    1d62:	85 ef       	ldi	r24, 0xF5	; 245
    1d64:	91 e0       	ldi	r25, 0x01	; 1
    1d66:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Which lamp do you want to be opened(From 1 to 5)\r\n");
    1d6a:	87 eb       	ldi	r24, 0xB7	; 183
    1d6c:	92 e0       	ldi	r25, 0x02	; 2
    1d6e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("6.All Lamps\r\n");
    1d72:	8a ee       	ldi	r24, 0xEA	; 234
    1d74:	92 e0       	ldi	r25, 0x02	; 2
    1d76:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    1d7a:	85 ef       	ldi	r24, 0xF5	; 245
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

            while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    1d82:	5f 9b       	sbis	0x0b, 7	; 11
    1d84:	fe cf       	rjmp	.-4      	; 0x1d82 <__vector_13+0x558>
            UART_GetValue = UART_RX_Char(); // Receiving the command
    1d86:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    1d8a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>

            if (UART_GetValue == '1') {
    1d8e:	81 33       	cpi	r24, 0x31	; 49
    1d90:	69 f4       	brne	.+26     	; 0x1dac <__vector_13+0x582>
                LED0_ON();
    1d92:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
                if (!eme_check) {
    1d96:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	61 c0       	rjmp	.+194    	; 0x1e60 <__vector_13+0x636>
                    LCD_Clear();
    1d9e:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(1) Opened");
    1da2:	88 ef       	ldi	r24, 0xF8	; 248
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1daa:	5a c0       	rjmp	.+180    	; 0x1e60 <__vector_13+0x636>
                }
            } else if (UART_GetValue == '2') {
    1dac:	82 33       	cpi	r24, 0x32	; 50
    1dae:	69 f4       	brne	.+26     	; 0x1dca <__vector_13+0x5a0>
                LED1_ON();
    1db0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <LED1_ON>
                if (!eme_check) {
    1db4:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1db8:	81 11       	cpse	r24, r1
    1dba:	52 c0       	rjmp	.+164    	; 0x1e60 <__vector_13+0x636>
                    LCD_Clear();
    1dbc:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(2) Opened");
    1dc0:	87 e0       	ldi	r24, 0x07	; 7
    1dc2:	93 e0       	ldi	r25, 0x03	; 3
    1dc4:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1dc8:	4b c0       	rjmp	.+150    	; 0x1e60 <__vector_13+0x636>
                }
            } else if (UART_GetValue == '3') {
    1dca:	83 33       	cpi	r24, 0x33	; 51
    1dcc:	69 f4       	brne	.+26     	; 0x1de8 <__vector_13+0x5be>
                LED2_ON();
    1dce:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
                if (!eme_check) {
    1dd2:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	43 c0       	rjmp	.+134    	; 0x1e60 <__vector_13+0x636>
                    LCD_Clear();
    1dda:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(3) Opened");
    1dde:	86 e1       	ldi	r24, 0x16	; 22
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1de6:	3c c0       	rjmp	.+120    	; 0x1e60 <__vector_13+0x636>
                }
            } else if (UART_GetValue == '4') {
    1de8:	84 33       	cpi	r24, 0x34	; 52
    1dea:	69 f4       	brne	.+26     	; 0x1e06 <__vector_13+0x5dc>
                LED3_ON();
    1dec:	0e 94 a8 09 	call	0x1350	; 0x1350 <LED3_ON>
                if (!eme_check) {
    1df0:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1df4:	81 11       	cpse	r24, r1
    1df6:	34 c0       	rjmp	.+104    	; 0x1e60 <__vector_13+0x636>
                    LCD_Clear();
    1df8:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(4) Opened");
    1dfc:	85 e2       	ldi	r24, 0x25	; 37
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1e04:	2d c0       	rjmp	.+90     	; 0x1e60 <__vector_13+0x636>
                }
            } else if (UART_GetValue == '5') {
    1e06:	85 33       	cpi	r24, 0x35	; 53
    1e08:	69 f4       	brne	.+26     	; 0x1e24 <__vector_13+0x5fa>
                LED4_ON();
    1e0a:	0e 94 b9 09 	call	0x1372	; 0x1372 <LED4_ON>
                if (!eme_check) {
    1e0e:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1e12:	81 11       	cpse	r24, r1
    1e14:	25 c0       	rjmp	.+74     	; 0x1e60 <__vector_13+0x636>
                    LCD_Clear();
    1e16:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(5) Opened");
    1e1a:	84 e3       	ldi	r24, 0x34	; 52
    1e1c:	93 e0       	ldi	r25, 0x03	; 3
    1e1e:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1e22:	1e c0       	rjmp	.+60     	; 0x1e60 <__vector_13+0x636>
                }
            } else if (UART_GetValue == '6') {
    1e24:	86 33       	cpi	r24, 0x36	; 54
    1e26:	e1 f4       	brne	.+56     	; 0x1e60 <__vector_13+0x636>
                LED0_ON();
    1e28:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
                LED1_ON();
    1e2c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <LED1_ON>
                LED2_ON();
    1e30:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
                LED3_ON();
    1e34:	0e 94 a8 09 	call	0x1350	; 0x1350 <LED3_ON>
                LED4_ON();
    1e38:	0e 94 b9 09 	call	0x1372	; 0x1372 <LED4_ON>
                if (!eme_check) {
    1e3c:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1e40:	81 11       	cpse	r24, r1
    1e42:	0e c0       	rjmp	.+28     	; 0x1e60 <__vector_13+0x636>
                    LCD_Clear();
    1e44:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("All Lamps Are");
    1e48:	83 e4       	ldi	r24, 0x43	; 67
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                    LCD_Goto(1, 0);
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
                    LCD_Write_String("Opened");
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                }
            }
            Timer2_SetDelay(2000);
    1e60:	60 ed       	ldi	r22, 0xD0	; 208
    1e62:	77 e0       	ldi	r23, 0x07	; 7
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 36 0b 	call	0x166c	; 0x166c <Timer2_SetDelay>
    1e6c:	bc c4       	rjmp	.+2424   	; 0x27e6 <__vector_13+0xfbc>
        } else if (UART_GetValue == '4') {
    1e6e:	84 33       	cpi	r24, 0x34	; 52
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <__vector_13+0x64a>
    1e72:	8a c0       	rjmp	.+276    	; 0x1f88 <__vector_13+0x75e>
            // Close lamps
            UART_TX_Str("\r\n");
    1e74:	85 ef       	ldi	r24, 0xF5	; 245
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    1e7c:	85 ef       	ldi	r24, 0xF5	; 245
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Which lamp do you want to be Closed(From 1 to 5)\r\n");
    1e84:	81 e5       	ldi	r24, 0x51	; 81
    1e86:	93 e0       	ldi	r25, 0x03	; 3
    1e88:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("6.All Lamps\r\n");
    1e8c:	8a ee       	ldi	r24, 0xEA	; 234
    1e8e:	92 e0       	ldi	r25, 0x02	; 2
    1e90:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    1e94:	85 ef       	ldi	r24, 0xF5	; 245
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

            while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    1e9c:	5f 9b       	sbis	0x0b, 7	; 11
    1e9e:	fe cf       	rjmp	.-4      	; 0x1e9c <__vector_13+0x672>
            UART_GetValue = UART_RX_Char(); // Receiving the command
    1ea0:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    1ea4:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>

            if (UART_GetValue == '1') {
    1ea8:	81 33       	cpi	r24, 0x31	; 49
    1eaa:	69 f4       	brne	.+26     	; 0x1ec6 <__vector_13+0x69c>
                LED0_OFF();
    1eac:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
                if (!eme_check) {
    1eb0:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1eb4:	81 11       	cpse	r24, r1
    1eb6:	61 c0       	rjmp	.+194    	; 0x1f7a <__vector_13+0x750>
                    LCD_Clear();
    1eb8:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(1) Closed");
    1ebc:	84 e8       	ldi	r24, 0x84	; 132
    1ebe:	93 e0       	ldi	r25, 0x03	; 3
    1ec0:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1ec4:	5a c0       	rjmp	.+180    	; 0x1f7a <__vector_13+0x750>
                }
            } else if (UART_GetValue == '2') {
    1ec6:	82 33       	cpi	r24, 0x32	; 50
    1ec8:	69 f4       	brne	.+26     	; 0x1ee4 <__vector_13+0x6ba>
                LED1_OFF();
    1eca:	0e 94 81 09 	call	0x1302	; 0x1302 <LED1_OFF>
                if (!eme_check) {
    1ece:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	52 c0       	rjmp	.+164    	; 0x1f7a <__vector_13+0x750>
                    LCD_Clear();
    1ed6:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(2) Closed");
    1eda:	83 e9       	ldi	r24, 0x93	; 147
    1edc:	93 e0       	ldi	r25, 0x03	; 3
    1ede:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1ee2:	4b c0       	rjmp	.+150    	; 0x1f7a <__vector_13+0x750>
                }
            } else if (UART_GetValue == '3') {
    1ee4:	83 33       	cpi	r24, 0x33	; 51
    1ee6:	69 f4       	brne	.+26     	; 0x1f02 <__vector_13+0x6d8>
                LED2_OFF();
    1ee8:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
                if (!eme_check) {
    1eec:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1ef0:	81 11       	cpse	r24, r1
    1ef2:	43 c0       	rjmp	.+134    	; 0x1f7a <__vector_13+0x750>
                    LCD_Clear();
    1ef4:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(3) Closed");
    1ef8:	82 ea       	ldi	r24, 0xA2	; 162
    1efa:	93 e0       	ldi	r25, 0x03	; 3
    1efc:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1f00:	3c c0       	rjmp	.+120    	; 0x1f7a <__vector_13+0x750>
                }
            } else if (UART_GetValue == '4') {
    1f02:	84 33       	cpi	r24, 0x34	; 52
    1f04:	69 f4       	brne	.+26     	; 0x1f20 <__vector_13+0x6f6>
                LED3_OFF();
    1f06:	0e 94 ae 09 	call	0x135c	; 0x135c <LED3_OFF>
                if (!eme_check) {
    1f0a:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1f0e:	81 11       	cpse	r24, r1
    1f10:	34 c0       	rjmp	.+104    	; 0x1f7a <__vector_13+0x750>
                    LCD_Clear();
    1f12:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(4) Closed");
    1f16:	81 eb       	ldi	r24, 0xB1	; 177
    1f18:	93 e0       	ldi	r25, 0x03	; 3
    1f1a:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1f1e:	2d c0       	rjmp	.+90     	; 0x1f7a <__vector_13+0x750>
                }
            } else if (UART_GetValue == '5') {
    1f20:	85 33       	cpi	r24, 0x35	; 53
    1f22:	69 f4       	brne	.+26     	; 0x1f3e <__vector_13+0x714>
                LED4_OFF();
    1f24:	0e 94 bf 09 	call	0x137e	; 0x137e <LED4_OFF>
                if (!eme_check) {
    1f28:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	25 c0       	rjmp	.+74     	; 0x1f7a <__vector_13+0x750>
                    LCD_Clear();
    1f30:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(5) Closed");
    1f34:	80 ec       	ldi	r24, 0xC0	; 192
    1f36:	93 e0       	ldi	r25, 0x03	; 3
    1f38:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    1f3c:	1e c0       	rjmp	.+60     	; 0x1f7a <__vector_13+0x750>
                }
            } else if (UART_GetValue == '6') {
    1f3e:	86 33       	cpi	r24, 0x36	; 54
    1f40:	e1 f4       	brne	.+56     	; 0x1f7a <__vector_13+0x750>
                LED0_OFF();
    1f42:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
                LED1_OFF();
    1f46:	0e 94 81 09 	call	0x1302	; 0x1302 <LED1_OFF>
                LED2_OFF();
    1f4a:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
                LED3_OFF();
    1f4e:	0e 94 ae 09 	call	0x135c	; 0x135c <LED3_OFF>
                LED4_OFF();
    1f52:	0e 94 bf 09 	call	0x137e	; 0x137e <LED4_OFF>
                LCD_Clear();
    1f56:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                if (!eme_check) {
    1f5a:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    1f5e:	81 11       	cpse	r24, r1
    1f60:	0c c0       	rjmp	.+24     	; 0x1f7a <__vector_13+0x750>
                    LCD_Write_String("All Lamps Are");
    1f62:	83 e4       	ldi	r24, 0x43	; 67
    1f64:	93 e0       	ldi	r25, 0x03	; 3
    1f66:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                    LCD_Goto(1, 0);
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
                    LCD_Write_String("Closed");
    1f72:	8c e8       	ldi	r24, 0x8C	; 140
    1f74:	93 e0       	ldi	r25, 0x03	; 3
    1f76:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                }
            }
            Timer2_SetDelay(2000);
    1f7a:	60 ed       	ldi	r22, 0xD0	; 208
    1f7c:	77 e0       	ldi	r23, 0x07	; 7
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 36 0b 	call	0x166c	; 0x166c <Timer2_SetDelay>
    1f86:	2f c4       	rjmp	.+2142   	; 0x27e6 <__vector_13+0xfbc>
        } else if (UART_GetValue == '5') {
    1f88:	85 33       	cpi	r24, 0x35	; 53
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <__vector_13+0x764>
    1f8c:	cf c0       	rjmp	.+414    	; 0x212c <__vector_13+0x902>
            /*Dimmer circuit*/
            UART_TX_Str("\r\n");
    1f8e:	85 ef       	ldi	r24, 0xF5	; 245
    1f90:	91 e0       	ldi	r25, 0x01	; 1
    1f92:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    1f96:	85 ef       	ldi	r24, 0xF5	; 245
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Please enter the percentage of the lamp\r\n");
    1f9e:	8f ec       	ldi	r24, 0xCF	; 207
    1fa0:	93 e0       	ldi	r25, 0x03	; 3
    1fa2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    1fa6:	85 ef       	ldi	r24, 0xF5	; 245
    1fa8:	91 e0       	ldi	r25, 0x01	; 1
    1faa:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

            Dimmer_Value = 0;
    1fae:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <Dimmer_Value>
    1fb2:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <Dimmer_Value+0x1>
    1fb6:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <Dimmer_Value+0x2>
    1fba:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <Dimmer_Value+0x3>

            for (Uint8 i = 0; i < 3; i++) {
    1fbe:	00 e0       	ldi	r16, 0x00	; 0
    1fc0:	38 c0       	rjmp	.+112    	; 0x2032 <__vector_13+0x808>
                while (!Get_Bit(UCSRA, 7));
    1fc2:	5f 9b       	sbis	0x0b, 7	; 11
    1fc4:	fe cf       	rjmp	.-4      	; 0x1fc2 <__vector_13+0x798>
                Dimmer_Array[i] = UART_RX_Char();
    1fc6:	e0 2e       	mov	r14, r16
    1fc8:	f1 2c       	mov	r15, r1
    1fca:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    1fce:	18 2f       	mov	r17, r24
    1fd0:	f7 01       	movw	r30, r14
    1fd2:	e3 51       	subi	r30, 0x13	; 19
    1fd4:	f9 4f       	sbci	r31, 0xF9	; 249
    1fd6:	80 83       	st	Z, r24

                if (Dimmer_Array[i] >= 48 && Dimmer_Array[i] <= 57) {
    1fd8:	80 ed       	ldi	r24, 0xD0	; 208
    1fda:	81 0f       	add	r24, r17
    1fdc:	8a 30       	cpi	r24, 0x0A	; 10
    1fde:	38 f5       	brcc	.+78     	; 0x202e <__vector_13+0x804>
                    Dimmer_Value = Dimmer_Value * 10 + (Dimmer_Array[i] - 48);
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	60 91 e9 06 	lds	r22, 0x06E9	; 0x8006e9 <Dimmer_Value>
    1fec:	70 91 ea 06 	lds	r23, 0x06EA	; 0x8006ea <Dimmer_Value+0x1>
    1ff0:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <Dimmer_Value+0x2>
    1ff4:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <Dimmer_Value+0x3>
    1ff8:	0e 94 37 18 	call	0x306e	; 0x306e <__mulsf3>
    1ffc:	6b 01       	movw	r12, r22
    1ffe:	7c 01       	movw	r14, r24
    2000:	61 2f       	mov	r22, r17
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	60 53       	subi	r22, 0x30	; 48
    2006:	71 09       	sbc	r23, r1
    2008:	07 2e       	mov	r0, r23
    200a:	00 0c       	add	r0, r0
    200c:	88 0b       	sbc	r24, r24
    200e:	99 0b       	sbc	r25, r25
    2010:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__floatsisf>
    2014:	a7 01       	movw	r20, r14
    2016:	96 01       	movw	r18, r12
    2018:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__addsf3>
    201c:	60 93 e9 06 	sts	0x06E9, r22	; 0x8006e9 <Dimmer_Value>
    2020:	70 93 ea 06 	sts	0x06EA, r23	; 0x8006ea <Dimmer_Value+0x1>
    2024:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <Dimmer_Value+0x2>
    2028:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <Dimmer_Value+0x3>
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <__vector_13+0x806>
                } else {
                    i = 5;
    202e:	05 e0       	ldi	r16, 0x05	; 5
            UART_TX_Str("Please enter the percentage of the lamp\r\n");
            UART_TX_Str("\r\n");

            Dimmer_Value = 0;

            for (Uint8 i = 0; i < 3; i++) {
    2030:	0f 5f       	subi	r16, 0xFF	; 255
    2032:	03 30       	cpi	r16, 0x03	; 3
    2034:	30 f2       	brcs	.-116    	; 0x1fc2 <__vector_13+0x798>
                    i = 5;
                }

            }

            if (!eme_check) {
    2036:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    203a:	81 11       	cpse	r24, r1
    203c:	23 c0       	rjmp	.+70     	; 0x2084 <__vector_13+0x85a>
                LCD_Clear();
    203e:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                LCD_Write_String("Lamp ON!");
    2042:	89 ef       	ldi	r24, 0xF9	; 249
    2044:	93 e0       	ldi	r25, 0x03	; 3
    2046:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                LCD_Goto(1, 0);
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
                LCD_Write_String("Percentage:");
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	94 e0       	ldi	r25, 0x04	; 4
    2056:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                LCD_Write_Integer(Dimmer_Value);
    205a:	60 91 e9 06 	lds	r22, 0x06E9	; 0x8006e9 <Dimmer_Value>
    205e:	70 91 ea 06 	lds	r23, 0x06EA	; 0x8006ea <Dimmer_Value+0x1>
    2062:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <Dimmer_Value+0x2>
    2066:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <Dimmer_Value+0x3>
    206a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__fixunssfsi>
    206e:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_Write_Integer>
                LCD_Write_Char('%');
    2072:	85 e2       	ldi	r24, 0x25	; 37
    2074:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_Write_Char>
                Timer2_SetDelay(2000);
    2078:	60 ed       	ldi	r22, 0xD0	; 208
    207a:	77 e0       	ldi	r23, 0x07	; 7
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 36 0b 	call	0x166c	; 0x166c <Timer2_SetDelay>
            }

            if (Dimmer_Value >= 58 && Dimmer_Value <= 60) {
    2084:	c0 90 e9 06 	lds	r12, 0x06E9	; 0x8006e9 <Dimmer_Value>
    2088:	d0 90 ea 06 	lds	r13, 0x06EA	; 0x8006ea <Dimmer_Value+0x1>
    208c:	e0 90 eb 06 	lds	r14, 0x06EB	; 0x8006eb <Dimmer_Value+0x2>
    2090:	f0 90 ec 06 	lds	r15, 0x06EC	; 0x8006ec <Dimmer_Value+0x3>
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	48 e6       	ldi	r20, 0x68	; 104
    209a:	52 e4       	ldi	r21, 0x42	; 66
    209c:	c7 01       	movw	r24, r14
    209e:	b6 01       	movw	r22, r12
    20a0:	0e 94 32 18 	call	0x3064	; 0x3064 <__gesf2>
    20a4:	88 23       	and	r24, r24
    20a6:	bc f0       	brlt	.+46     	; 0x20d6 <__vector_13+0x8ac>
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e7       	ldi	r20, 0x70	; 112
    20ae:	52 e4       	ldi	r21, 0x42	; 66
    20b0:	c7 01       	movw	r24, r14
    20b2:	b6 01       	movw	r22, r12
    20b4:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__cmpsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	6c f0       	brlt	.+26     	; 0x20d6 <__vector_13+0x8ac>
                Dimmer_Value = 55;
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	ac e5       	ldi	r26, 0x5C	; 92
    20c2:	b2 e4       	ldi	r27, 0x42	; 66
    20c4:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <Dimmer_Value>
    20c8:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <Dimmer_Value+0x1>
    20cc:	a0 93 eb 06 	sts	0x06EB, r26	; 0x8006eb <Dimmer_Value+0x2>
    20d0:	b0 93 ec 06 	sts	0x06EC, r27	; 0x8006ec <Dimmer_Value+0x3>
    20d4:	20 c0       	rjmp	.+64     	; 0x2116 <__vector_13+0x8ec>
            } else if (Dimmer_Value > 60 && Dimmer_Value <= 62) {
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e7       	ldi	r20, 0x70	; 112
    20dc:	52 e4       	ldi	r21, 0x42	; 66
    20de:	c7 01       	movw	r24, r14
    20e0:	b6 01       	movw	r22, r12
    20e2:	0e 94 32 18 	call	0x3064	; 0x3064 <__gesf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	b4 f4       	brge	.+44     	; 0x2116 <__vector_13+0x8ec>
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	48 e7       	ldi	r20, 0x78	; 120
    20f0:	52 e4       	ldi	r21, 0x42	; 66
    20f2:	c7 01       	movw	r24, r14
    20f4:	b6 01       	movw	r22, r12
    20f6:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__cmpsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	64 f0       	brlt	.+24     	; 0x2116 <__vector_13+0x8ec>
                Dimmer_Value = 65;
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a2 e8       	ldi	r26, 0x82	; 130
    2104:	b2 e4       	ldi	r27, 0x42	; 66
    2106:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <Dimmer_Value>
    210a:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <Dimmer_Value+0x1>
    210e:	a0 93 eb 06 	sts	0x06EB, r26	; 0x8006eb <Dimmer_Value+0x2>
    2112:	b0 93 ec 06 	sts	0x06EC, r27	; 0x8006ec <Dimmer_Value+0x3>
            }

            PWM0_Gen(Dimmer_Value);
    2116:	60 91 e9 06 	lds	r22, 0x06E9	; 0x8006e9 <Dimmer_Value>
    211a:	70 91 ea 06 	lds	r23, 0x06EA	; 0x8006ea <Dimmer_Value+0x1>
    211e:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <Dimmer_Value+0x2>
    2122:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <Dimmer_Value+0x3>
    2126:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <PWM0_Gen>
    212a:	5d c3       	rjmp	.+1722   	; 0x27e6 <__vector_13+0xfbc>
        } else if (UART_GetValue == '6') {
    212c:	86 33       	cpi	r24, 0x36	; 54
    212e:	09 f0       	breq	.+2      	; 0x2132 <__vector_13+0x908>
    2130:	10 c1       	rjmp	.+544    	; 0x2352 <__vector_13+0xb28>
            // Add new user

            /*-------------->Determine The Type of User<---------------*/
            UART_TX_Str("\r\n");
    2132:	85 ef       	ldi	r24, 0xF5	; 245
    2134:	91 e0       	ldi	r25, 0x01	; 1
    2136:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    213a:	85 ef       	ldi	r24, 0xF5	; 245
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("1.Keypad user\r\n");
    2142:	8e e0       	ldi	r24, 0x0E	; 14
    2144:	94 e0       	ldi	r25, 0x04	; 4
    2146:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("2.PC user\r\n");
    214a:	8e e1       	ldi	r24, 0x1E	; 30
    214c:	94 e0       	ldi	r25, 0x04	; 4
    214e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("3.AD user\r\n");
    2152:	8a e2       	ldi	r24, 0x2A	; 42
    2154:	94 e0       	ldi	r25, 0x04	; 4
    2156:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

            while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    215a:	5f 9b       	sbis	0x0b, 7	; 11
    215c:	fe cf       	rjmp	.-4      	; 0x215a <__vector_13+0x930>
            UART_GetValue = UART_RX_Char(); // Receiving the command
    215e:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    2162:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>

            if (UART_GetValue == '1') {
    2166:	81 33       	cpi	r24, 0x31	; 49
    2168:	09 f0       	breq	.+2      	; 0x216c <__vector_13+0x942>
    216a:	4b c0       	rjmp	.+150    	; 0x2202 <__vector_13+0x9d8>
                /*--------------->Adding Keypad User<-------------------*/
                Uint8 j = 0;

                /*----------------->Adding New Username<-----------------*/
                UART_TX_Str("\r\n");
    216c:	85 ef       	ldi	r24, 0xF5	; 245
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    2174:	85 ef       	ldi	r24, 0xF5	; 245
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter 4 numbers as username\r\n");
    217c:	86 e3       	ldi	r24, 0x36	; 54
    217e:	94 e0       	ldi	r25, 0x04	; 4
    2180:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                for (Uint8 i = 0; i < 4; i++) {
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <__vector_13+0x97c>
                    j = i + 1;
    2188:	1f 5f       	subi	r17, 0xFF	; 255
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    218a:	5f 9b       	sbis	0x0b, 7	; 11
    218c:	fe cf       	rjmp	.-4      	; 0x218a <__vector_13+0x960>
                    KP_User[i] = UART_RX_Char(); // Receiving the character in username array
    218e:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
                    EEPROM_WriteByte(0, j += KP_Counter, KP_User[i]); // Adding the username in EEPROM
    2192:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <KP_Counter>
    2196:	61 0f       	add	r22, r17
    2198:	48 2f       	mov	r20, r24
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>

                /*----------------->Adding New Username<-----------------*/
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter 4 numbers as username\r\n");
                for (Uint8 i = 0; i < 4; i++) {
    21a6:	14 30       	cpi	r17, 0x04	; 4
    21a8:	78 f3       	brcs	.-34     	; 0x2188 <__vector_13+0x95e>
                }

                j = 0;

                /*----------------->Adding New Password<-----------------*/
                UART_TX_Str("\r\n");
    21aa:	85 ef       	ldi	r24, 0xF5	; 245
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    21b2:	85 ef       	ldi	r24, 0xF5	; 245
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter 4 numbers as password\r\n");
    21ba:	8b e5       	ldi	r24, 0x5B	; 91
    21bc:	94 e0       	ldi	r25, 0x04	; 4
    21be:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                for (Uint8 i = 0; i < 4; i++) {
    21c2:	10 e0       	ldi	r17, 0x00	; 0
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <__vector_13+0x9ba>
                    j = i + 1;
    21c6:	1f 5f       	subi	r17, 0xFF	; 255
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    21c8:	5f 9b       	sbis	0x0b, 7	; 11
    21ca:	fe cf       	rjmp	.-4      	; 0x21c8 <__vector_13+0x99e>
                    KP_Pass[i] = UART_RX_Char(); // Receiving the character in password array
    21cc:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
                    EEPROM_WriteByte(1, j += KP_Counter, KP_Pass[i]); // Adding the password in EEPROM
    21d0:	60 91 f1 06 	lds	r22, 0x06F1	; 0x8006f1 <KP_Counter>
    21d4:	61 0f       	add	r22, r17
    21d6:	48 2f       	mov	r20, r24
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>

                /*----------------->Adding New Password<-----------------*/
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter 4 numbers as password\r\n");
                for (Uint8 i = 0; i < 4; i++) {
    21e4:	14 30       	cpi	r17, 0x04	; 4
    21e6:	78 f3       	brcs	.-34     	; 0x21c6 <__vector_13+0x99c>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
                    KP_Pass[i] = UART_RX_Char(); // Receiving the character in password array
                    EEPROM_WriteByte(1, j += KP_Counter, KP_Pass[i]); // Adding the password in EEPROM
                }

                KP_Counter += 4; // Counter to determine the number of keypad users
    21e8:	40 91 f1 06 	lds	r20, 0x06F1	; 0x8006f1 <KP_Counter>
    21ec:	4c 5f       	subi	r20, 0xFC	; 252
    21ee:	40 93 f1 06 	sts	0x06F1, r20	; 0x8006f1 <KP_Counter>
                EEPROM_WriteByte(4, 0, KP_Counter); // Saving the counter in EEPROM
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	84 e0       	ldi	r24, 0x04	; 4
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
    2200:	9b c0       	rjmp	.+310    	; 0x2338 <__vector_13+0xb0e>
            } else if (UART_GetValue == '2') {
    2202:	82 33       	cpi	r24, 0x32	; 50
    2204:	09 f0       	breq	.+2      	; 0x2208 <__vector_13+0x9de>
    2206:	4b c0       	rjmp	.+150    	; 0x229e <__vector_13+0xa74>
                /*--------------->Adding PC User<-------------------*/
                Uint8 j = 0;

                /*----------------->Adding New Username<-----------------*/
                UART_TX_Str("\r\n");
    2208:	85 ef       	ldi	r24, 0xF5	; 245
    220a:	91 e0       	ldi	r25, 0x01	; 1
    220c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    2210:	85 ef       	ldi	r24, 0xF5	; 245
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter 4 numbers as username\r\n");
    2218:	86 e3       	ldi	r24, 0x36	; 54
    221a:	94 e0       	ldi	r25, 0x04	; 4
    221c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                for (Uint8 i = 0; i < 4; i++) {
    2220:	10 e0       	ldi	r17, 0x00	; 0
    2222:	0f c0       	rjmp	.+30     	; 0x2242 <__vector_13+0xa18>
                    j = i + 1;
    2224:	1f 5f       	subi	r17, 0xFF	; 255
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    2226:	5f 9b       	sbis	0x0b, 7	; 11
    2228:	fe cf       	rjmp	.-4      	; 0x2226 <__vector_13+0x9fc>
                    PC_User[i] = UART_RX_Char(); // Receiving the character in username array
    222a:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
                    EEPROM_WriteByte(2, j += PC_Counter, PC_User[i]); // Adding the username in EEPROM
    222e:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <PC_Counter>
    2232:	61 0f       	add	r22, r17
    2234:	48 2f       	mov	r20, r24
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>

                /*----------------->Adding New Username<-----------------*/
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter 4 numbers as username\r\n");
                for (Uint8 i = 0; i < 4; i++) {
    2242:	14 30       	cpi	r17, 0x04	; 4
    2244:	78 f3       	brcs	.-34     	; 0x2224 <__vector_13+0x9fa>
                }

                j = 0;

                /*----------------->Adding New Password<-----------------*/
                UART_TX_Str("\r\n");
    2246:	85 ef       	ldi	r24, 0xF5	; 245
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    224e:	85 ef       	ldi	r24, 0xF5	; 245
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter 4 numbers as password\r\n");
    2256:	8b e5       	ldi	r24, 0x5B	; 91
    2258:	94 e0       	ldi	r25, 0x04	; 4
    225a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                for (Uint8 i = 0; i < 4; i++) {
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <__vector_13+0xa56>
                    j = i + 1;
    2262:	1f 5f       	subi	r17, 0xFF	; 255
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    2264:	5f 9b       	sbis	0x0b, 7	; 11
    2266:	fe cf       	rjmp	.-4      	; 0x2264 <__vector_13+0xa3a>
                    PC_Pass[i] = UART_RX_Char(); // Receiving the character in password array
    2268:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
                    EEPROM_WriteByte(3, j += PC_Counter, PC_Pass[i]); // Adding the password in EEPROM
    226c:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <PC_Counter>
    2270:	61 0f       	add	r22, r17
    2272:	48 2f       	mov	r20, r24
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>

                /*----------------->Adding New Password<-----------------*/
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter 4 numbers as password\r\n");
                for (Uint8 i = 0; i < 4; i++) {
    2280:	14 30       	cpi	r17, 0x04	; 4
    2282:	78 f3       	brcs	.-34     	; 0x2262 <__vector_13+0xa38>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
                    PC_Pass[i] = UART_RX_Char(); // Receiving the character in password array
                    EEPROM_WriteByte(3, j += PC_Counter, PC_Pass[i]); // Adding the password in EEPROM
                }

                PC_Counter += 4; // Counter to determine the number of PC users
    2284:	40 91 f0 06 	lds	r20, 0x06F0	; 0x8006f0 <PC_Counter>
    2288:	4c 5f       	subi	r20, 0xFC	; 252
    228a:	40 93 f0 06 	sts	0x06F0, r20	; 0x8006f0 <PC_Counter>
                EEPROM_WriteByte(4, 1, PC_Counter); // Saving the counter in EEPROM
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	84 e0       	ldi	r24, 0x04	; 4
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
    229c:	4d c0       	rjmp	.+154    	; 0x2338 <__vector_13+0xb0e>
            } else if (UART_GetValue == '3') {
    229e:	83 33       	cpi	r24, 0x33	; 51
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <__vector_13+0xa7a>
    22a2:	4a c0       	rjmp	.+148    	; 0x2338 <__vector_13+0xb0e>
                /*--------------->Adding Admin User<-------------------*/
                Uint8 j = 0;

                /*----------------->Adding New Username<-----------------*/
                UART_TX_Str("\r\n");
    22a4:	85 ef       	ldi	r24, 0xF5	; 245
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    22ac:	85 ef       	ldi	r24, 0xF5	; 245
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter 4 numbers as username\r\n");
    22b4:	86 e3       	ldi	r24, 0x36	; 54
    22b6:	94 e0       	ldi	r25, 0x04	; 4
    22b8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                for (Uint8 i = 0; i < 4; i++) {
    22bc:	10 e0       	ldi	r17, 0x00	; 0
    22be:	0f c0       	rjmp	.+30     	; 0x22de <__vector_13+0xab4>
                    j = i + 1;
    22c0:	1f 5f       	subi	r17, 0xFF	; 255
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    22c2:	5f 9b       	sbis	0x0b, 7	; 11
    22c4:	fe cf       	rjmp	.-4      	; 0x22c2 <__vector_13+0xa98>
                    AD_User[i] = UART_RX_Char(); // Receiving the character in username array
    22c6:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
                    EEPROM_WriteByte(5, j += AD_Counter, AD_User[i]); // Adding the username in EEPROM
    22ca:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <AD_Counter>
    22ce:	61 0f       	add	r22, r17
    22d0:	48 2f       	mov	r20, r24
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	85 e0       	ldi	r24, 0x05	; 5
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>

                /*----------------->Adding New Username<-----------------*/
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter 4 numbers as username\r\n");
                for (Uint8 i = 0; i < 4; i++) {
    22de:	14 30       	cpi	r17, 0x04	; 4
    22e0:	78 f3       	brcs	.-34     	; 0x22c0 <__vector_13+0xa96>
                }

                j = 0;

                /*----------------->Adding New Password<-----------------*/
                UART_TX_Str("\r\n");
    22e2:	85 ef       	ldi	r24, 0xF5	; 245
    22e4:	91 e0       	ldi	r25, 0x01	; 1
    22e6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    22ea:	85 ef       	ldi	r24, 0xF5	; 245
    22ec:	91 e0       	ldi	r25, 0x01	; 1
    22ee:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter 4 numbers as password\r\n");
    22f2:	8b e5       	ldi	r24, 0x5B	; 91
    22f4:	94 e0       	ldi	r25, 0x04	; 4
    22f6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                for (Uint8 i = 0; i < 4; i++) {
    22fa:	10 e0       	ldi	r17, 0x00	; 0
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <__vector_13+0xaf2>
                    j = i + 1;
    22fe:	1f 5f       	subi	r17, 0xFF	; 255
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    2300:	5f 9b       	sbis	0x0b, 7	; 11
    2302:	fe cf       	rjmp	.-4      	; 0x2300 <__vector_13+0xad6>
                    AD_Pass[i] = UART_RX_Char(); // Receiving the character in password array
    2304:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
                    EEPROM_WriteByte(6, j += AD_Counter, AD_Pass[i]); // Adding the password in EEPROM
    2308:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <AD_Counter>
    230c:	61 0f       	add	r22, r17
    230e:	48 2f       	mov	r20, r24
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	86 e0       	ldi	r24, 0x06	; 6
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>

                /*----------------->Adding New Password<-----------------*/
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter 4 numbers as password\r\n");
                for (Uint8 i = 0; i < 4; i++) {
    231c:	14 30       	cpi	r17, 0x04	; 4
    231e:	78 f3       	brcs	.-34     	; 0x22fe <__vector_13+0xad4>
                    while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
                    AD_Pass[i] = UART_RX_Char(); // Receiving the character in password array
                    EEPROM_WriteByte(6, j += AD_Counter, AD_Pass[i]); // Adding the password in EEPROM
                }

                AD_Counter += 4; // Counter to determine the number of PC users
    2320:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <AD_Counter>
    2324:	4c 5f       	subi	r20, 0xFC	; 252
    2326:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <AD_Counter>
                EEPROM_WriteByte(4, 2, AD_Counter); // Saving the counter in EEPROM
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	62 e0       	ldi	r22, 0x02	; 2
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	84 e0       	ldi	r24, 0x04	; 4
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
            }

            /*------------>Added Successfully<-------------------*/
            UART_TX_Str("\r\n");
    2338:	85 ef       	ldi	r24, 0xF5	; 245
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    2340:	85 ef       	ldi	r24, 0xF5	; 245
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("User added successfully\r\n");
    2348:	80 e8       	ldi	r24, 0x80	; 128
    234a:	94 e0       	ldi	r25, 0x04	; 4
    234c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    2350:	4a c2       	rjmp	.+1172   	; 0x27e6 <__vector_13+0xfbc>
        } else if (UART_GetValue == '7') {
    2352:	87 33       	cpi	r24, 0x37	; 55
    2354:	09 f0       	breq	.+2      	; 0x2358 <__vector_13+0xb2e>
    2356:	28 c2       	rjmp	.+1104   	; 0x27a8 <__vector_13+0xf7e>
            // Delete an exist user
            Uint8 j = 0;
            UART_TX_Str("\r\n");
    2358:	85 ef       	ldi	r24, 0xF5	; 245
    235a:	91 e0       	ldi	r25, 0x01	; 1
    235c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    2360:	85 ef       	ldi	r24, 0xF5	; 245
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Do you want to delete keypad user , PC user or Admin user\r\n");
    2368:	8a e9       	ldi	r24, 0x9A	; 154
    236a:	94 e0       	ldi	r25, 0x04	; 4
    236c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("1.Keypad User\r\n");
    2370:	86 ed       	ldi	r24, 0xD6	; 214
    2372:	94 e0       	ldi	r25, 0x04	; 4
    2374:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("2.PC User\r\n");
    2378:	86 ee       	ldi	r24, 0xE6	; 230
    237a:	94 e0       	ldi	r25, 0x04	; 4
    237c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("3.AD User\r\n");
    2380:	82 ef       	ldi	r24, 0xF2	; 242
    2382:	94 e0       	ldi	r25, 0x04	; 4
    2384:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

            while (!Get_Bit(UCSRA, 7));
    2388:	5f 9b       	sbis	0x0b, 7	; 11
    238a:	fe cf       	rjmp	.-4      	; 0x2388 <__vector_13+0xb5e>
            UART_GetValue = UART_RX_Char();
    238c:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    2390:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>

            if (UART_GetValue == '1') {
    2394:	81 33       	cpi	r24, 0x31	; 49
    2396:	09 f0       	breq	.+2      	; 0x239a <__vector_13+0xb70>
    2398:	a8 c0       	rjmp	.+336    	; 0x24ea <__vector_13+0xcc0>
                UART_TX_Str("\r\n");
    239a:	85 ef       	ldi	r24, 0xF5	; 245
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    23a2:	85 ef       	ldi	r24, 0xF5	; 245
    23a4:	91 e0       	ldi	r25, 0x01	; 1
    23a6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter the KP username\r\n");
    23aa:	8e ef       	ldi	r24, 0xFE	; 254
    23ac:	94 e0       	ldi	r25, 0x04	; 4
    23ae:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

                for (Uint8 i = 0; i < 4; i++) {
    23b2:	10 e0       	ldi	r17, 0x00	; 0
    23b4:	0e c0       	rjmp	.+28     	; 0x23d2 <__vector_13+0xba8>
                    while (!Get_Bit(UCSRA, 7));
    23b6:	5f 9b       	sbis	0x0b, 7	; 11
    23b8:	fe cf       	rjmp	.-4      	; 0x23b6 <__vector_13+0xb8c>
                    KP_User[i] = UART_RX_Char();
    23ba:	e1 2e       	mov	r14, r17
    23bc:	f1 2c       	mov	r15, r1
    23be:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    23c2:	e1 e0       	ldi	r30, 0x01	; 1
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	ec 0f       	add	r30, r28
    23c8:	fd 1f       	adc	r31, r29
    23ca:	ee 0d       	add	r30, r14
    23cc:	ff 1d       	adc	r31, r15
    23ce:	80 83       	st	Z, r24
            if (UART_GetValue == '1') {
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter the KP username\r\n");

                for (Uint8 i = 0; i < 4; i++) {
    23d0:	1f 5f       	subi	r17, 0xFF	; 255
    23d2:	14 30       	cpi	r17, 0x04	; 4
    23d4:	80 f3       	brcs	.-32     	; 0x23b6 <__vector_13+0xb8c>
    23d6:	10 e0       	ldi	r17, 0x00	; 0
    23d8:	00 e0       	ldi	r16, 0x00	; 0
    23da:	73 c0       	rjmp	.+230    	; 0x24c2 <__vector_13+0xc98>
                    while (!Get_Bit(UCSRA, 7));
                    KP_User[i] = UART_RX_Char();
                }

                for (Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4) {
                    if (KP_User[0] == EEPROM_ReadByte(0, Check_Counter + 1) && KP_User[1] == EEPROM_ReadByte(0, Check_Counter + 2) && KP_User[2] == EEPROM_ReadByte(0, Check_Counter + 3) && KP_User[3] == EEPROM_ReadByte(0, Check_Counter + 4)) {
    23dc:	c9 80       	ldd	r12, Y+1	; 0x01
    23de:	d1 2c       	mov	r13, r1
    23e0:	e1 2e       	mov	r14, r17
    23e2:	f1 2c       	mov	r15, r1
    23e4:	b7 01       	movw	r22, r14
    23e6:	6f 5f       	subi	r22, 0xFF	; 255
    23e8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    23f2:	c8 16       	cp	r12, r24
    23f4:	d9 06       	cpc	r13, r25
    23f6:	09 f0       	breq	.+2      	; 0x23fa <__vector_13+0xbd0>
    23f8:	63 c0       	rjmp	.+198    	; 0x24c0 <__vector_13+0xc96>
    23fa:	ca 80       	ldd	r12, Y+2	; 0x02
    23fc:	d1 2c       	mov	r13, r1
    23fe:	b7 01       	movw	r22, r14
    2400:	6e 5f       	subi	r22, 0xFE	; 254
    2402:	7f 4f       	sbci	r23, 0xFF	; 255
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    240c:	c8 16       	cp	r12, r24
    240e:	d9 06       	cpc	r13, r25
    2410:	09 f0       	breq	.+2      	; 0x2414 <__vector_13+0xbea>
    2412:	56 c0       	rjmp	.+172    	; 0x24c0 <__vector_13+0xc96>
    2414:	cb 80       	ldd	r12, Y+3	; 0x03
    2416:	d1 2c       	mov	r13, r1
    2418:	b7 01       	movw	r22, r14
    241a:	6d 5f       	subi	r22, 0xFD	; 253
    241c:	7f 4f       	sbci	r23, 0xFF	; 255
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2426:	c8 16       	cp	r12, r24
    2428:	d9 06       	cpc	r13, r25
    242a:	09 f0       	breq	.+2      	; 0x242e <__vector_13+0xc04>
    242c:	49 c0       	rjmp	.+146    	; 0x24c0 <__vector_13+0xc96>
    242e:	cc 80       	ldd	r12, Y+4	; 0x04
    2430:	d1 2c       	mov	r13, r1
    2432:	b7 01       	movw	r22, r14
    2434:	6c 5f       	subi	r22, 0xFC	; 252
    2436:	7f 4f       	sbci	r23, 0xFF	; 255
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2440:	c8 16       	cp	r12, r24
    2442:	d9 06       	cpc	r13, r25
    2444:	e9 f5       	brne	.+122    	; 0x24c0 <__vector_13+0xc96>
                        
							for (Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= KP_Counter; Check_Counter_2++) {
    2446:	1f 5f       	subi	r17, 0xFF	; 255
    2448:	1d c0       	rjmp	.+58     	; 0x2484 <__vector_13+0xc5a>
								EEPROM_WriteByte(0, Check_Counter_2, EEPROM_ReadByte(0, Check_Counter_2 + 4));
    244a:	e1 2e       	mov	r14, r17
    244c:	f1 2c       	mov	r15, r1
    244e:	67 01       	movw	r12, r14
    2450:	84 e0       	ldi	r24, 0x04	; 4
    2452:	c8 0e       	add	r12, r24
    2454:	d1 1c       	adc	r13, r1
    2456:	b6 01       	movw	r22, r12
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2460:	ac 01       	movw	r20, r24
    2462:	b7 01       	movw	r22, r14
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
								EEPROM_WriteByte(1, Check_Counter_2, EEPROM_ReadByte(1, Check_Counter_2 + 4));
    246c:	b6 01       	movw	r22, r12
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2476:	ac 01       	movw	r20, r24
    2478:	b7 01       	movw	r22, r14
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
                }

                for (Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4) {
                    if (KP_User[0] == EEPROM_ReadByte(0, Check_Counter + 1) && KP_User[1] == EEPROM_ReadByte(0, Check_Counter + 2) && KP_User[2] == EEPROM_ReadByte(0, Check_Counter + 3) && KP_User[3] == EEPROM_ReadByte(0, Check_Counter + 4)) {
                        
							for (Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= KP_Counter; Check_Counter_2++) {
    2482:	1f 5f       	subi	r17, 0xFF	; 255
    2484:	40 91 f1 06 	lds	r20, 0x06F1	; 0x8006f1 <KP_Counter>
    2488:	41 17       	cp	r20, r17
    248a:	f8 f6       	brcc	.-66     	; 0x244a <__vector_13+0xc20>
								EEPROM_WriteByte(0, Check_Counter_2, EEPROM_ReadByte(0, Check_Counter_2 + 4));
								EEPROM_WriteByte(1, Check_Counter_2, EEPROM_ReadByte(1, Check_Counter_2 + 4));
							}
						
                        KP_Counter -= 4;
    248c:	44 50       	subi	r20, 0x04	; 4
    248e:	40 93 f1 06 	sts	0x06F1, r20	; 0x8006f1 <KP_Counter>
                        EEPROM_WriteByte(4, 0, KP_Counter);
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	60 e0       	ldi	r22, 0x00	; 0
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	84 e0       	ldi	r24, 0x04	; 4
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
                        Check_Counter = KP_Counter + 1;
    24a0:	10 91 f1 06 	lds	r17, 0x06F1	; 0x8006f1 <KP_Counter>
    24a4:	1f 5f       	subi	r17, 0xFF	; 255
                        UART_TX_Str("\r\n");
    24a6:	85 ef       	ldi	r24, 0xF5	; 245
    24a8:	91 e0       	ldi	r25, 0x01	; 1
    24aa:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        UART_TX_Str("\r\n");
    24ae:	85 ef       	ldi	r24, 0xF5	; 245
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        UART_TX_Str("User deleted successfully\r\n");
    24b6:	8d e1       	ldi	r24, 0x1D	; 29
    24b8:	95 e0       	ldi	r25, 0x05	; 5
    24ba:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        j = 1;
    24be:	01 e0       	ldi	r16, 0x01	; 1
                for (Uint8 i = 0; i < 4; i++) {
                    while (!Get_Bit(UCSRA, 7));
                    KP_User[i] = UART_RX_Char();
                }

                for (Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4) {
    24c0:	1c 5f       	subi	r17, 0xFC	; 252
    24c2:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <KP_Counter>
    24c6:	81 17       	cp	r24, r17
    24c8:	08 f0       	brcs	.+2      	; 0x24cc <__vector_13+0xca2>
    24ca:	88 cf       	rjmp	.-240    	; 0x23dc <__vector_13+0xbb2>
                        UART_TX_Str("\r\n");
                        UART_TX_Str("User deleted successfully\r\n");
                        j = 1;
                    }
                }
                if (!j) {
    24cc:	01 11       	cpse	r16, r1
    24ce:	8b c1       	rjmp	.+790    	; 0x27e6 <__vector_13+0xfbc>
                    UART_TX_Str("\r\n");
    24d0:	85 ef       	ldi	r24, 0xF5	; 245
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("\r\n");
    24d8:	85 ef       	ldi	r24, 0xF5	; 245
    24da:	91 e0       	ldi	r25, 0x01	; 1
    24dc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("User is not exist\r\n");
    24e0:	89 e3       	ldi	r24, 0x39	; 57
    24e2:	95 e0       	ldi	r25, 0x05	; 5
    24e4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    24e8:	7e c1       	rjmp	.+764    	; 0x27e6 <__vector_13+0xfbc>
                }
            } else if (UART_GetValue == '2') {
    24ea:	82 33       	cpi	r24, 0x32	; 50
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <__vector_13+0xcc6>
    24ee:	a8 c0       	rjmp	.+336    	; 0x2640 <__vector_13+0xe16>
                UART_TX_Str("\r\n");
    24f0:	85 ef       	ldi	r24, 0xF5	; 245
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    24f8:	85 ef       	ldi	r24, 0xF5	; 245
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter the PC username\r\n");
    2500:	8d e4       	ldi	r24, 0x4D	; 77
    2502:	95 e0       	ldi	r25, 0x05	; 5
    2504:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

                for (Uint8 i = 0; i < 4; i++) {
    2508:	10 e0       	ldi	r17, 0x00	; 0
    250a:	0e c0       	rjmp	.+28     	; 0x2528 <__vector_13+0xcfe>
                    while (!Get_Bit(UCSRA, 7));
    250c:	5f 9b       	sbis	0x0b, 7	; 11
    250e:	fe cf       	rjmp	.-4      	; 0x250c <__vector_13+0xce2>
                    PC_User[i] = UART_RX_Char();
    2510:	e1 2e       	mov	r14, r17
    2512:	f1 2c       	mov	r15, r1
    2514:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    2518:	e5 e0       	ldi	r30, 0x05	; 5
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	ec 0f       	add	r30, r28
    251e:	fd 1f       	adc	r31, r29
    2520:	ee 0d       	add	r30, r14
    2522:	ff 1d       	adc	r31, r15
    2524:	80 83       	st	Z, r24
            } else if (UART_GetValue == '2') {
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter the PC username\r\n");

                for (Uint8 i = 0; i < 4; i++) {
    2526:	1f 5f       	subi	r17, 0xFF	; 255
    2528:	14 30       	cpi	r17, 0x04	; 4
    252a:	80 f3       	brcs	.-32     	; 0x250c <__vector_13+0xce2>
    252c:	10 e0       	ldi	r17, 0x00	; 0
    252e:	00 e0       	ldi	r16, 0x00	; 0
    2530:	73 c0       	rjmp	.+230    	; 0x2618 <__vector_13+0xdee>
                    while (!Get_Bit(UCSRA, 7));
                    PC_User[i] = UART_RX_Char();
                }

                for (Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4) {
                    if (PC_User[0] == EEPROM_ReadByte(2, Check_Counter + 1) && PC_User[1] == EEPROM_ReadByte(2, Check_Counter + 2) && PC_User[2] == EEPROM_ReadByte(2, Check_Counter + 3) && PC_User[3] == EEPROM_ReadByte(2, Check_Counter + 4)) {
    2532:	cd 80       	ldd	r12, Y+5	; 0x05
    2534:	d1 2c       	mov	r13, r1
    2536:	e1 2e       	mov	r14, r17
    2538:	f1 2c       	mov	r15, r1
    253a:	b7 01       	movw	r22, r14
    253c:	6f 5f       	subi	r22, 0xFF	; 255
    253e:	7f 4f       	sbci	r23, 0xFF	; 255
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2548:	c8 16       	cp	r12, r24
    254a:	d9 06       	cpc	r13, r25
    254c:	09 f0       	breq	.+2      	; 0x2550 <__vector_13+0xd26>
    254e:	63 c0       	rjmp	.+198    	; 0x2616 <__vector_13+0xdec>
    2550:	ce 80       	ldd	r12, Y+6	; 0x06
    2552:	d1 2c       	mov	r13, r1
    2554:	b7 01       	movw	r22, r14
    2556:	6e 5f       	subi	r22, 0xFE	; 254
    2558:	7f 4f       	sbci	r23, 0xFF	; 255
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2562:	c8 16       	cp	r12, r24
    2564:	d9 06       	cpc	r13, r25
    2566:	09 f0       	breq	.+2      	; 0x256a <__vector_13+0xd40>
    2568:	56 c0       	rjmp	.+172    	; 0x2616 <__vector_13+0xdec>
    256a:	cf 80       	ldd	r12, Y+7	; 0x07
    256c:	d1 2c       	mov	r13, r1
    256e:	b7 01       	movw	r22, r14
    2570:	6d 5f       	subi	r22, 0xFD	; 253
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    257c:	c8 16       	cp	r12, r24
    257e:	d9 06       	cpc	r13, r25
    2580:	09 f0       	breq	.+2      	; 0x2584 <__vector_13+0xd5a>
    2582:	49 c0       	rjmp	.+146    	; 0x2616 <__vector_13+0xdec>
    2584:	c8 84       	ldd	r12, Y+8	; 0x08
    2586:	d1 2c       	mov	r13, r1
    2588:	b7 01       	movw	r22, r14
    258a:	6c 5f       	subi	r22, 0xFC	; 252
    258c:	7f 4f       	sbci	r23, 0xFF	; 255
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2596:	c8 16       	cp	r12, r24
    2598:	d9 06       	cpc	r13, r25
    259a:	e9 f5       	brne	.+122    	; 0x2616 <__vector_13+0xdec>
                        
                        for (Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= PC_Counter; Check_Counter_2++) {
    259c:	1f 5f       	subi	r17, 0xFF	; 255
    259e:	1d c0       	rjmp	.+58     	; 0x25da <__vector_13+0xdb0>
                            EEPROM_WriteByte(2, Check_Counter_2, EEPROM_ReadByte(2, Check_Counter_2 + 4));
    25a0:	e1 2e       	mov	r14, r17
    25a2:	f1 2c       	mov	r15, r1
    25a4:	67 01       	movw	r12, r14
    25a6:	84 e0       	ldi	r24, 0x04	; 4
    25a8:	c8 0e       	add	r12, r24
    25aa:	d1 1c       	adc	r13, r1
    25ac:	b6 01       	movw	r22, r12
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    25b6:	ac 01       	movw	r20, r24
    25b8:	b7 01       	movw	r22, r14
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
                            EEPROM_WriteByte(3, Check_Counter_2, EEPROM_ReadByte(3, Check_Counter_2 + 4));
    25c2:	b6 01       	movw	r22, r12
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    25cc:	ac 01       	movw	r20, r24
    25ce:	b7 01       	movw	r22, r14
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
                }

                for (Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4) {
                    if (PC_User[0] == EEPROM_ReadByte(2, Check_Counter + 1) && PC_User[1] == EEPROM_ReadByte(2, Check_Counter + 2) && PC_User[2] == EEPROM_ReadByte(2, Check_Counter + 3) && PC_User[3] == EEPROM_ReadByte(2, Check_Counter + 4)) {
                        
                        for (Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= PC_Counter; Check_Counter_2++) {
    25d8:	1f 5f       	subi	r17, 0xFF	; 255
    25da:	40 91 f0 06 	lds	r20, 0x06F0	; 0x8006f0 <PC_Counter>
    25de:	41 17       	cp	r20, r17
    25e0:	f8 f6       	brcc	.-66     	; 0x25a0 <__vector_13+0xd76>
                            EEPROM_WriteByte(2, Check_Counter_2, EEPROM_ReadByte(2, Check_Counter_2 + 4));
                            EEPROM_WriteByte(3, Check_Counter_2, EEPROM_ReadByte(3, Check_Counter_2 + 4));
                        }

                        PC_Counter -= 4;
    25e2:	44 50       	subi	r20, 0x04	; 4
    25e4:	40 93 f0 06 	sts	0x06F0, r20	; 0x8006f0 <PC_Counter>
                        EEPROM_WriteByte(4, 1, PC_Counter);
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	84 e0       	ldi	r24, 0x04	; 4
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
                        Check_Counter = PC_Counter + 1;
    25f6:	10 91 f0 06 	lds	r17, 0x06F0	; 0x8006f0 <PC_Counter>
    25fa:	1f 5f       	subi	r17, 0xFF	; 255
                        UART_TX_Str("\r\n");
    25fc:	85 ef       	ldi	r24, 0xF5	; 245
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        UART_TX_Str("\r\n");
    2604:	85 ef       	ldi	r24, 0xF5	; 245
    2606:	91 e0       	ldi	r25, 0x01	; 1
    2608:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        UART_TX_Str("User deleted successfully\r\n");
    260c:	8d e1       	ldi	r24, 0x1D	; 29
    260e:	95 e0       	ldi	r25, 0x05	; 5
    2610:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        j = 1;
    2614:	01 e0       	ldi	r16, 0x01	; 1
                for (Uint8 i = 0; i < 4; i++) {
                    while (!Get_Bit(UCSRA, 7));
                    PC_User[i] = UART_RX_Char();
                }

                for (Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4) {
    2616:	1c 5f       	subi	r17, 0xFC	; 252
    2618:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <PC_Counter>
    261c:	81 17       	cp	r24, r17
    261e:	08 f0       	brcs	.+2      	; 0x2622 <__vector_13+0xdf8>
    2620:	88 cf       	rjmp	.-240    	; 0x2532 <__vector_13+0xd08>
                        UART_TX_Str("\r\n");
                        UART_TX_Str("User deleted successfully\r\n");
                        j = 1;
                    }
                }
                if (!j) {
    2622:	01 11       	cpse	r16, r1
    2624:	e0 c0       	rjmp	.+448    	; 0x27e6 <__vector_13+0xfbc>
                    UART_TX_Str("\r\n");
    2626:	85 ef       	ldi	r24, 0xF5	; 245
    2628:	91 e0       	ldi	r25, 0x01	; 1
    262a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("\r\n");
    262e:	85 ef       	ldi	r24, 0xF5	; 245
    2630:	91 e0       	ldi	r25, 0x01	; 1
    2632:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("User is not exist\r\n");
    2636:	89 e3       	ldi	r24, 0x39	; 57
    2638:	95 e0       	ldi	r25, 0x05	; 5
    263a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    263e:	d3 c0       	rjmp	.+422    	; 0x27e6 <__vector_13+0xfbc>
                }
            } else if (UART_GetValue = '3') {
    2640:	83 e3       	ldi	r24, 0x33	; 51
    2642:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>
                UART_TX_Str("\r\n");
    2646:	85 ef       	ldi	r24, 0xF5	; 245
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("\r\n");
    264e:	85 ef       	ldi	r24, 0xF5	; 245
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                UART_TX_Str("Please enter the AD username\r\n");
    2656:	8c e6       	ldi	r24, 0x6C	; 108
    2658:	95 e0       	ldi	r25, 0x05	; 5
    265a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

                for (Uint8 i = 0; i < 4; i++) {
    265e:	10 e0       	ldi	r17, 0x00	; 0
    2660:	0e c0       	rjmp	.+28     	; 0x267e <__vector_13+0xe54>
                    while (!Get_Bit(UCSRA, 7));
    2662:	5f 9b       	sbis	0x0b, 7	; 11
    2664:	fe cf       	rjmp	.-4      	; 0x2662 <__vector_13+0xe38>
                    AD_User[i] = UART_RX_Char();
    2666:	e1 2e       	mov	r14, r17
    2668:	f1 2c       	mov	r15, r1
    266a:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    266e:	ed e0       	ldi	r30, 0x0D	; 13
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	ec 0f       	add	r30, r28
    2674:	fd 1f       	adc	r31, r29
    2676:	ee 0d       	add	r30, r14
    2678:	ff 1d       	adc	r31, r15
    267a:	80 83       	st	Z, r24
            } else if (UART_GetValue = '3') {
                UART_TX_Str("\r\n");
                UART_TX_Str("\r\n");
                UART_TX_Str("Please enter the AD username\r\n");

                for (Uint8 i = 0; i < 4; i++) {
    267c:	1f 5f       	subi	r17, 0xFF	; 255
    267e:	14 30       	cpi	r17, 0x04	; 4
    2680:	80 f3       	brcs	.-32     	; 0x2662 <__vector_13+0xe38>
    2682:	04 e0       	ldi	r16, 0x04	; 4
    2684:	10 e0       	ldi	r17, 0x00	; 0
    2686:	7c c0       	rjmp	.+248    	; 0x2780 <__vector_13+0xf56>
                    while (!Get_Bit(UCSRA, 7));
                    AD_User[i] = UART_RX_Char();
                }

                for (Uint8 Check_Counter = 4; Check_Counter <= AD_Counter; Check_Counter += 4) {
                    if (AD_User[0] == EEPROM_ReadByte(5, Check_Counter + 1) && AD_User[1] == EEPROM_ReadByte(5, Check_Counter + 2) && AD_User[2] == EEPROM_ReadByte(5, Check_Counter + 3) && AD_User[3] == EEPROM_ReadByte(5, Check_Counter + 4)) {
    2688:	cd 84       	ldd	r12, Y+13	; 0x0d
    268a:	d1 2c       	mov	r13, r1
    268c:	e0 2e       	mov	r14, r16
    268e:	f1 2c       	mov	r15, r1
    2690:	b7 01       	movw	r22, r14
    2692:	6f 5f       	subi	r22, 0xFF	; 255
    2694:	7f 4f       	sbci	r23, 0xFF	; 255
    2696:	85 e0       	ldi	r24, 0x05	; 5
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    269e:	c8 16       	cp	r12, r24
    26a0:	d9 06       	cpc	r13, r25
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <__vector_13+0xe7c>
    26a4:	6c c0       	rjmp	.+216    	; 0x277e <__vector_13+0xf54>
    26a6:	ce 84       	ldd	r12, Y+14	; 0x0e
    26a8:	d1 2c       	mov	r13, r1
    26aa:	b7 01       	movw	r22, r14
    26ac:	6e 5f       	subi	r22, 0xFE	; 254
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	85 e0       	ldi	r24, 0x05	; 5
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    26b8:	c8 16       	cp	r12, r24
    26ba:	d9 06       	cpc	r13, r25
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <__vector_13+0xe96>
    26be:	5f c0       	rjmp	.+190    	; 0x277e <__vector_13+0xf54>
    26c0:	cf 84       	ldd	r12, Y+15	; 0x0f
    26c2:	d1 2c       	mov	r13, r1
    26c4:	b7 01       	movw	r22, r14
    26c6:	6d 5f       	subi	r22, 0xFD	; 253
    26c8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ca:	85 e0       	ldi	r24, 0x05	; 5
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    26d2:	c8 16       	cp	r12, r24
    26d4:	d9 06       	cpc	r13, r25
    26d6:	09 f0       	breq	.+2      	; 0x26da <__vector_13+0xeb0>
    26d8:	52 c0       	rjmp	.+164    	; 0x277e <__vector_13+0xf54>
    26da:	c8 88       	ldd	r12, Y+16	; 0x10
    26dc:	d1 2c       	mov	r13, r1
    26de:	b7 01       	movw	r22, r14
    26e0:	6c 5f       	subi	r22, 0xFC	; 252
    26e2:	7f 4f       	sbci	r23, 0xFF	; 255
    26e4:	85 e0       	ldi	r24, 0x05	; 5
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    26ec:	c8 16       	cp	r12, r24
    26ee:	d9 06       	cpc	r13, r25
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <__vector_13+0xeca>
    26f2:	45 c0       	rjmp	.+138    	; 0x277e <__vector_13+0xf54>
                        
                        for (Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= AD_Counter; Check_Counter_2++) {
    26f4:	11 e0       	ldi	r17, 0x01	; 1
    26f6:	10 0f       	add	r17, r16
    26f8:	1d c0       	rjmp	.+58     	; 0x2734 <__vector_13+0xf0a>
                            EEPROM_WriteByte(5, Check_Counter_2, EEPROM_ReadByte(5, Check_Counter_2 + 4));
    26fa:	e1 2e       	mov	r14, r17
    26fc:	f1 2c       	mov	r15, r1
    26fe:	67 01       	movw	r12, r14
    2700:	84 e0       	ldi	r24, 0x04	; 4
    2702:	c8 0e       	add	r12, r24
    2704:	d1 1c       	adc	r13, r1
    2706:	b6 01       	movw	r22, r12
    2708:	85 e0       	ldi	r24, 0x05	; 5
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2710:	ac 01       	movw	r20, r24
    2712:	b7 01       	movw	r22, r14
    2714:	85 e0       	ldi	r24, 0x05	; 5
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
                            EEPROM_WriteByte(6, Check_Counter_2, EEPROM_ReadByte(6, Check_Counter_2 + 4));
    271c:	b6 01       	movw	r22, r12
    271e:	86 e0       	ldi	r24, 0x06	; 6
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 36 02 	call	0x46c	; 0x46c <EEPROM_ReadByte>
    2726:	ac 01       	movw	r20, r24
    2728:	b7 01       	movw	r22, r14
    272a:	86 e0       	ldi	r24, 0x06	; 6
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
                }

                for (Uint8 Check_Counter = 4; Check_Counter <= AD_Counter; Check_Counter += 4) {
                    if (AD_User[0] == EEPROM_ReadByte(5, Check_Counter + 1) && AD_User[1] == EEPROM_ReadByte(5, Check_Counter + 2) && AD_User[2] == EEPROM_ReadByte(5, Check_Counter + 3) && AD_User[3] == EEPROM_ReadByte(5, Check_Counter + 4)) {
                        
                        for (Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= AD_Counter; Check_Counter_2++) {
    2732:	1f 5f       	subi	r17, 0xFF	; 255
    2734:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <AD_Counter>
    2738:	81 17       	cp	r24, r17
    273a:	f8 f6       	brcc	.-66     	; 0x26fa <__vector_13+0xed0>
                            EEPROM_WriteByte(5, Check_Counter_2, EEPROM_ReadByte(5, Check_Counter_2 + 4));
                            EEPROM_WriteByte(6, Check_Counter_2, EEPROM_ReadByte(6, Check_Counter_2 + 4));
                        }

                        AD_Counter -= 4;
    273c:	9c ef       	ldi	r25, 0xFC	; 252
    273e:	98 0f       	add	r25, r24
    2740:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <AD_Counter>
                        if (Check_Counter == 0) {
    2744:	01 11       	cpse	r16, r1
    2746:	02 c0       	rjmp	.+4      	; 0x274c <__vector_13+0xf22>
                            AD_Counter += 4;
    2748:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <AD_Counter>
                        }
                        EEPROM_WriteByte(4, 2, AD_Counter);
    274c:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <AD_Counter>
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	62 e0       	ldi	r22, 0x02	; 2
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	84 e0       	ldi	r24, 0x04	; 4
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	0e 94 15 02 	call	0x42a	; 0x42a <EEPROM_WriteByte>
                        Check_Counter = AD_Counter + 1;
    275e:	00 91 70 00 	lds	r16, 0x0070	; 0x800070 <AD_Counter>
    2762:	0f 5f       	subi	r16, 0xFF	; 255
                        UART_TX_Str("\r\n");
    2764:	85 ef       	ldi	r24, 0xF5	; 245
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        UART_TX_Str("\r\n");
    276c:	85 ef       	ldi	r24, 0xF5	; 245
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        UART_TX_Str("User deleted successfully\r\n");
    2774:	8d e1       	ldi	r24, 0x1D	; 29
    2776:	95 e0       	ldi	r25, 0x05	; 5
    2778:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                        j = 1;
    277c:	11 e0       	ldi	r17, 0x01	; 1
                for (Uint8 i = 0; i < 4; i++) {
                    while (!Get_Bit(UCSRA, 7));
                    AD_User[i] = UART_RX_Char();
                }

                for (Uint8 Check_Counter = 4; Check_Counter <= AD_Counter; Check_Counter += 4) {
    277e:	0c 5f       	subi	r16, 0xFC	; 252
    2780:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <AD_Counter>
    2784:	80 17       	cp	r24, r16
    2786:	08 f0       	brcs	.+2      	; 0x278a <__vector_13+0xf60>
    2788:	7f cf       	rjmp	.-258    	; 0x2688 <__vector_13+0xe5e>
                        UART_TX_Str("\r\n");
                        UART_TX_Str("User deleted successfully\r\n");
                        j = 1;
                    }
                }
                if (!j) {
    278a:	11 11       	cpse	r17, r1
    278c:	2c c0       	rjmp	.+88     	; 0x27e6 <__vector_13+0xfbc>
                    UART_TX_Str("\r\n");
    278e:	85 ef       	ldi	r24, 0xF5	; 245
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("\r\n");
    2796:	85 ef       	ldi	r24, 0xF5	; 245
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
                    UART_TX_Str("User is not exist\r\n");
    279e:	89 e3       	ldi	r24, 0x39	; 57
    27a0:	95 e0       	ldi	r25, 0x05	; 5
    27a2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    27a6:	1f c0       	rjmp	.+62     	; 0x27e6 <__vector_13+0xfbc>
                }
            }
		}
		else if (UART_GetValue == '0'){
    27a8:	80 33       	cpi	r24, 0x30	; 48
    27aa:	79 f4       	brne	.+30     	; 0x27ca <__vector_13+0xfa0>
			SYS_Check = 0;
    27ac:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <SYS_Check>
			UART_TX_Str("\r\n");
    27b0:	85 ef       	ldi	r24, 0xF5	; 245
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("\r\n");
    27b8:	85 ef       	ldi	r24, 0xF5	; 245
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("Bye-Bye user\r\n");
    27c0:	8b e8       	ldi	r24, 0x8B	; 139
    27c2:	95 e0       	ldi	r25, 0x05	; 5
    27c4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    27c8:	0e c0       	rjmp	.+28     	; 0x27e6 <__vector_13+0xfbc>
		}
		
		else if (UART_GetValue == 8) {
    27ca:	88 30       	cpi	r24, 0x08	; 8
    27cc:	61 f0       	breq	.+24     	; 0x27e6 <__vector_13+0xfbc>

        } 
		else {
            UART_TX_Str("\r\n");
    27ce:	85 ef       	ldi	r24, 0xF5	; 245
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    27d6:	85 ef       	ldi	r24, 0xF5	; 245
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Please enter command number\r\n");
    27de:	80 e6       	ldi	r24, 0x60	; 96
    27e0:	92 e0       	ldi	r25, 0x02	; 2
    27e2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        }
		
		if(eme_check){
    27e6:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    27ea:	88 23       	and	r24, r24
    27ec:	81 f0       	breq	.+32     	; 0x280e <__vector_13+0xfe4>
			if (UART_GetValue == '8'){
    27ee:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <UART_GetValue>
    27f2:	88 33       	cpi	r24, 0x38	; 56
    27f4:	61 f4       	brne	.+24     	; 0x280e <__vector_13+0xfe4>
				eme_check = 0;
    27f6:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <eme_check>
				LCD_Clear();
    27fa:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
				UART_TX_Str("\r\n");
    27fe:	85 ef       	ldi	r24, 0xF5	; 245
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
				UART_TX_Str("Keypad user kicked out\r\n");
    2806:	8a e9       	ldi	r24, 0x9A	; 154
    2808:	95 e0       	ldi	r25, 0x05	; 5
    280a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			}
		}
		
		if(SYS_Check){
    280e:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <SYS_Check>
    2812:	88 23       	and	r24, r24
    2814:	e9 f1       	breq	.+122    	; 0x2890 <__vector_13+0x1066>
        UART_TX_Str("\r\n");
    2816:	85 ef       	ldi	r24, 0xF5	; 245
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("Waiting for your command\r\n");
    281e:	83 eb       	ldi	r24, 0xB3	; 179
    2820:	95 e0       	ldi	r25, 0x05	; 5
    2822:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("\r\n");
    2826:	85 ef       	ldi	r24, 0xF5	; 245
    2828:	91 e0       	ldi	r25, 0x01	; 1
    282a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("1.Open the door\r\n");
    282e:	8e ec       	ldi	r24, 0xCE	; 206
    2830:	95 e0       	ldi	r25, 0x05	; 5
    2832:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("2.Close the door\r\n");
    2836:	80 ee       	ldi	r24, 0xE0	; 224
    2838:	95 e0       	ldi	r25, 0x05	; 5
    283a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("3.Open lamps\r\n");
    283e:	83 ef       	ldi	r24, 0xF3	; 243
    2840:	95 e0       	ldi	r25, 0x05	; 5
    2842:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("4.Close lamps\r\n");
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	96 e0       	ldi	r25, 0x06	; 6
    284a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("5.Variant lamp\r\n");
    284e:	82 e1       	ldi	r24, 0x12	; 18
    2850:	96 e0       	ldi	r25, 0x06	; 6
    2852:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("6Add new user\r\n");
    2856:	83 e2       	ldi	r24, 0x23	; 35
    2858:	96 e0       	ldi	r25, 0x06	; 6
    285a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("7.Delete exist user\r\n");
    285e:	83 e3       	ldi	r24, 0x33	; 51
    2860:	96 e0       	ldi	r25, 0x06	; 6
    2862:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
		if(eme_check)
    2866:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    286a:	88 23       	and	r24, r24
    286c:	21 f0       	breq	.+8      	; 0x2876 <__vector_13+0x104c>
		UART_TX_Str("8.Fire Keypad user\r\n");
    286e:	89 e4       	ldi	r24, 0x49	; 73
    2870:	96 e0       	ldi	r25, 0x06	; 6
    2872:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
		UART_TX_Str("0.Logout\r\n");
    2876:	8e e5       	ldi	r24, 0x5E	; 94
    2878:	96 e0       	ldi	r25, 0x06	; 6
    287a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("Reply with the number of the command\r\n");
    287e:	89 e6       	ldi	r24, 0x69	; 105
    2880:	96 e0       	ldi	r25, 0x06	; 6
    2882:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("\r\n");
    2886:	85 ef       	ldi	r24, 0xF5	; 245
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    288e:	66 c2       	rjmp	.+1228   	; 0x2d5c <__vector_13+0x1532>
		}else{
			UART_TX_Str("\r\n");
    2890:	85 ef       	ldi	r24, 0xF5	; 245
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("\r\n");
    2898:	85 ef       	ldi	r24, 0xF5	; 245
    289a:	91 e0       	ldi	r25, 0x01	; 1
    289c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("1.Enter Admin\r\n");
    28a0:	8e e7       	ldi	r24, 0x7E	; 126
    28a2:	92 e0       	ldi	r25, 0x02	; 2
    28a4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("2.Enter User\r\n");
    28a8:	8e e8       	ldi	r24, 0x8E	; 142
    28aa:	92 e0       	ldi	r25, 0x02	; 2
    28ac:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("\r\n");	
    28b0:	85 ef       	ldi	r24, 0xF5	; 245
    28b2:	91 e0       	ldi	r25, 0x01	; 1
    28b4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    28b8:	51 c2       	rjmp	.+1186   	; 0x2d5c <__vector_13+0x1532>
		}
		
    } else if (SYS_Check == 2) {
    28ba:	82 30       	cpi	r24, 0x02	; 2
    28bc:	09 f0       	breq	.+2      	; 0x28c0 <__vector_13+0x1096>
    28be:	4e c2       	rjmp	.+1180   	; 0x2d5c <__vector_13+0x1532>
        UART_GetValue = UDR;
    28c0:	8c b1       	in	r24, 0x0c	; 12
    28c2:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>

        if (CMD_Check) {
    28c6:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <CMD_Check>
    28ca:	88 23       	and	r24, r24
    28cc:	29 f0       	breq	.+10     	; 0x28d8 <__vector_13+0x10ae>
            UART_GetValue = 8;
    28ce:	88 e0       	ldi	r24, 0x08	; 8
    28d0:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>
            CMD_Check = 0;
    28d4:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <CMD_Check>
        }

        if (UART_GetValue == '1') {
    28d8:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <UART_GetValue>
    28dc:	81 33       	cpi	r24, 0x31	; 49
    28de:	09 f0       	breq	.+2      	; 0x28e2 <__vector_13+0x10b8>
    28e0:	8a c0       	rjmp	.+276    	; 0x29f6 <__vector_13+0x11cc>
            // Open lamps
            UART_TX_Str("\r\n");
    28e2:	85 ef       	ldi	r24, 0xF5	; 245
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    28ea:	85 ef       	ldi	r24, 0xF5	; 245
    28ec:	91 e0       	ldi	r25, 0x01	; 1
    28ee:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Which lamp do you want to be opened(From 1 to 5)\r\n");
    28f2:	87 eb       	ldi	r24, 0xB7	; 183
    28f4:	92 e0       	ldi	r25, 0x02	; 2
    28f6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("6.All Lamps\r\n");
    28fa:	8a ee       	ldi	r24, 0xEA	; 234
    28fc:	92 e0       	ldi	r25, 0x02	; 2
    28fe:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    2902:	85 ef       	ldi	r24, 0xF5	; 245
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

            while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    290a:	5f 9b       	sbis	0x0b, 7	; 11
    290c:	fe cf       	rjmp	.-4      	; 0x290a <__vector_13+0x10e0>
            UART_GetValue = UART_RX_Char(); // Receiving the command
    290e:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    2912:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>

            if (UART_GetValue == '1') {
    2916:	81 33       	cpi	r24, 0x31	; 49
    2918:	69 f4       	brne	.+26     	; 0x2934 <__vector_13+0x110a>
                LED0_ON();
    291a:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
                if (!eme_check) {
    291e:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2922:	81 11       	cpse	r24, r1
    2924:	61 c0       	rjmp	.+194    	; 0x29e8 <__vector_13+0x11be>
                    LCD_Clear();
    2926:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(1) Opened");
    292a:	88 ef       	ldi	r24, 0xF8	; 248
    292c:	92 e0       	ldi	r25, 0x02	; 2
    292e:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    2932:	5a c0       	rjmp	.+180    	; 0x29e8 <__vector_13+0x11be>
                }
            } else if (UART_GetValue == '2') {
    2934:	82 33       	cpi	r24, 0x32	; 50
    2936:	69 f4       	brne	.+26     	; 0x2952 <__vector_13+0x1128>
                LED1_ON();
    2938:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <LED1_ON>
                if (!eme_check) {
    293c:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2940:	81 11       	cpse	r24, r1
    2942:	52 c0       	rjmp	.+164    	; 0x29e8 <__vector_13+0x11be>
                    LCD_Clear();
    2944:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(2) Opened");
    2948:	87 e0       	ldi	r24, 0x07	; 7
    294a:	93 e0       	ldi	r25, 0x03	; 3
    294c:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    2950:	4b c0       	rjmp	.+150    	; 0x29e8 <__vector_13+0x11be>
                }
            } else if (UART_GetValue == '3') {
    2952:	83 33       	cpi	r24, 0x33	; 51
    2954:	69 f4       	brne	.+26     	; 0x2970 <__vector_13+0x1146>
                LED2_ON();
    2956:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
                if (!eme_check) {
    295a:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    295e:	81 11       	cpse	r24, r1
    2960:	43 c0       	rjmp	.+134    	; 0x29e8 <__vector_13+0x11be>
                    LCD_Clear();
    2962:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(3) Opened");
    2966:	86 e1       	ldi	r24, 0x16	; 22
    2968:	93 e0       	ldi	r25, 0x03	; 3
    296a:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    296e:	3c c0       	rjmp	.+120    	; 0x29e8 <__vector_13+0x11be>
                }
            } else if (UART_GetValue == '4') {
    2970:	84 33       	cpi	r24, 0x34	; 52
    2972:	69 f4       	brne	.+26     	; 0x298e <__vector_13+0x1164>
                LED3_ON();
    2974:	0e 94 a8 09 	call	0x1350	; 0x1350 <LED3_ON>
                if (!eme_check) {
    2978:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    297c:	81 11       	cpse	r24, r1
    297e:	34 c0       	rjmp	.+104    	; 0x29e8 <__vector_13+0x11be>
                    LCD_Clear();
    2980:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(4) Opened");
    2984:	85 e2       	ldi	r24, 0x25	; 37
    2986:	93 e0       	ldi	r25, 0x03	; 3
    2988:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    298c:	2d c0       	rjmp	.+90     	; 0x29e8 <__vector_13+0x11be>
                }
            } else if (UART_GetValue == '5') {
    298e:	85 33       	cpi	r24, 0x35	; 53
    2990:	69 f4       	brne	.+26     	; 0x29ac <__vector_13+0x1182>
                LED4_ON();
    2992:	0e 94 b9 09 	call	0x1372	; 0x1372 <LED4_ON>
                if (!eme_check) {
    2996:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    299a:	81 11       	cpse	r24, r1
    299c:	25 c0       	rjmp	.+74     	; 0x29e8 <__vector_13+0x11be>
                    LCD_Clear();
    299e:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(5) Opened");
    29a2:	84 e3       	ldi	r24, 0x34	; 52
    29a4:	93 e0       	ldi	r25, 0x03	; 3
    29a6:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    29aa:	1e c0       	rjmp	.+60     	; 0x29e8 <__vector_13+0x11be>
                }
            } else if (UART_GetValue == '6') {
    29ac:	86 33       	cpi	r24, 0x36	; 54
    29ae:	e1 f4       	brne	.+56     	; 0x29e8 <__vector_13+0x11be>
                LED0_ON();
    29b0:	0e 94 5f 09 	call	0x12be	; 0x12be <LED0_ON>
                LED1_ON();
    29b4:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <LED1_ON>
                LED2_ON();
    29b8:	0e 94 97 09 	call	0x132e	; 0x132e <LED2_ON>
                LED3_ON();
    29bc:	0e 94 a8 09 	call	0x1350	; 0x1350 <LED3_ON>
                LED4_ON();
    29c0:	0e 94 b9 09 	call	0x1372	; 0x1372 <LED4_ON>
                if (!eme_check) {
    29c4:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    29c8:	81 11       	cpse	r24, r1
    29ca:	0e c0       	rjmp	.+28     	; 0x29e8 <__vector_13+0x11be>
                    LCD_Clear();
    29cc:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("All Lamps Are");
    29d0:	83 e4       	ldi	r24, 0x43	; 67
    29d2:	93 e0       	ldi	r25, 0x03	; 3
    29d4:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                    LCD_Goto(1, 0);
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
                    LCD_Write_String("Opened");
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	93 e0       	ldi	r25, 0x03	; 3
    29e4:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                }
            }
            Timer2_SetDelay(2000);
    29e8:	60 ed       	ldi	r22, 0xD0	; 208
    29ea:	77 e0       	ldi	r23, 0x07	; 7
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 36 0b 	call	0x166c	; 0x166c <Timer2_SetDelay>
    29f4:	7a c1       	rjmp	.+756    	; 0x2cea <__vector_13+0x14c0>
        } else if (UART_GetValue == '2') {
    29f6:	82 33       	cpi	r24, 0x32	; 50
    29f8:	09 f0       	breq	.+2      	; 0x29fc <__vector_13+0x11d2>
    29fa:	8a c0       	rjmp	.+276    	; 0x2b10 <__vector_13+0x12e6>
            // Close lamps
            UART_TX_Str("\r\n");
    29fc:	85 ef       	ldi	r24, 0xF5	; 245
    29fe:	91 e0       	ldi	r25, 0x01	; 1
    2a00:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    2a04:	85 ef       	ldi	r24, 0xF5	; 245
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Which lamp do you want to be Closed(From 1 to 5)\r\n");
    2a0c:	81 e5       	ldi	r24, 0x51	; 81
    2a0e:	93 e0       	ldi	r25, 0x03	; 3
    2a10:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("6.All Lamps\r\n");
    2a14:	8a ee       	ldi	r24, 0xEA	; 234
    2a16:	92 e0       	ldi	r25, 0x02	; 2
    2a18:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    2a1c:	85 ef       	ldi	r24, 0xF5	; 245
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

            while (!Get_Bit(UCSRA, 7)); // Polling until the user enter a character
    2a24:	5f 9b       	sbis	0x0b, 7	; 11
    2a26:	fe cf       	rjmp	.-4      	; 0x2a24 <__vector_13+0x11fa>
            UART_GetValue = UART_RX_Char(); // Receiving the command
    2a28:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    2a2c:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <UART_GetValue>

            if (UART_GetValue == '1') {
    2a30:	81 33       	cpi	r24, 0x31	; 49
    2a32:	69 f4       	brne	.+26     	; 0x2a4e <__vector_13+0x1224>
                LED0_OFF();
    2a34:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
                if (!eme_check) {
    2a38:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2a3c:	81 11       	cpse	r24, r1
    2a3e:	61 c0       	rjmp	.+194    	; 0x2b02 <__vector_13+0x12d8>
                    LCD_Clear();
    2a40:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(1) Closed");
    2a44:	84 e8       	ldi	r24, 0x84	; 132
    2a46:	93 e0       	ldi	r25, 0x03	; 3
    2a48:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    2a4c:	5a c0       	rjmp	.+180    	; 0x2b02 <__vector_13+0x12d8>
                }
            } else if (UART_GetValue == '2') {
    2a4e:	82 33       	cpi	r24, 0x32	; 50
    2a50:	69 f4       	brne	.+26     	; 0x2a6c <__vector_13+0x1242>
                LED1_OFF();
    2a52:	0e 94 81 09 	call	0x1302	; 0x1302 <LED1_OFF>
                if (!eme_check) {
    2a56:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2a5a:	81 11       	cpse	r24, r1
    2a5c:	52 c0       	rjmp	.+164    	; 0x2b02 <__vector_13+0x12d8>
                    LCD_Clear();
    2a5e:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(2) Closed");
    2a62:	83 e9       	ldi	r24, 0x93	; 147
    2a64:	93 e0       	ldi	r25, 0x03	; 3
    2a66:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    2a6a:	4b c0       	rjmp	.+150    	; 0x2b02 <__vector_13+0x12d8>
                }
            } else if (UART_GetValue == '3') {
    2a6c:	83 33       	cpi	r24, 0x33	; 51
    2a6e:	69 f4       	brne	.+26     	; 0x2a8a <__vector_13+0x1260>
                LED2_OFF();
    2a70:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
                if (!eme_check) {
    2a74:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2a78:	81 11       	cpse	r24, r1
    2a7a:	43 c0       	rjmp	.+134    	; 0x2b02 <__vector_13+0x12d8>
                    LCD_Clear();
    2a7c:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(3) Closed");
    2a80:	82 ea       	ldi	r24, 0xA2	; 162
    2a82:	93 e0       	ldi	r25, 0x03	; 3
    2a84:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    2a88:	3c c0       	rjmp	.+120    	; 0x2b02 <__vector_13+0x12d8>
                }
            } else if (UART_GetValue == '4') {
    2a8a:	84 33       	cpi	r24, 0x34	; 52
    2a8c:	69 f4       	brne	.+26     	; 0x2aa8 <__vector_13+0x127e>
                LED3_OFF();
    2a8e:	0e 94 ae 09 	call	0x135c	; 0x135c <LED3_OFF>
                if (!eme_check) {
    2a92:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2a96:	81 11       	cpse	r24, r1
    2a98:	34 c0       	rjmp	.+104    	; 0x2b02 <__vector_13+0x12d8>
                    LCD_Clear();
    2a9a:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(4) Closed");
    2a9e:	81 eb       	ldi	r24, 0xB1	; 177
    2aa0:	93 e0       	ldi	r25, 0x03	; 3
    2aa2:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    2aa6:	2d c0       	rjmp	.+90     	; 0x2b02 <__vector_13+0x12d8>
                }
            } else if (UART_GetValue == '5') {
    2aa8:	85 33       	cpi	r24, 0x35	; 53
    2aaa:	69 f4       	brne	.+26     	; 0x2ac6 <__vector_13+0x129c>
                LED4_OFF();
    2aac:	0e 94 bf 09 	call	0x137e	; 0x137e <LED4_OFF>
                if (!eme_check) {
    2ab0:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2ab4:	81 11       	cpse	r24, r1
    2ab6:	25 c0       	rjmp	.+74     	; 0x2b02 <__vector_13+0x12d8>
                    LCD_Clear();
    2ab8:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                    LCD_Write_String("Lamp(5) Closed");
    2abc:	80 ec       	ldi	r24, 0xC0	; 192
    2abe:	93 e0       	ldi	r25, 0x03	; 3
    2ac0:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
    2ac4:	1e c0       	rjmp	.+60     	; 0x2b02 <__vector_13+0x12d8>
                }
            } else if (UART_GetValue == '6') {
    2ac6:	86 33       	cpi	r24, 0x36	; 54
    2ac8:	e1 f4       	brne	.+56     	; 0x2b02 <__vector_13+0x12d8>
                LED0_OFF();
    2aca:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED0_OFF>
                LED1_OFF();
    2ace:	0e 94 81 09 	call	0x1302	; 0x1302 <LED1_OFF>
                LED2_OFF();
    2ad2:	0e 94 9d 09 	call	0x133a	; 0x133a <LED2_OFF>
                LED3_OFF();
    2ad6:	0e 94 ae 09 	call	0x135c	; 0x135c <LED3_OFF>
                LED4_OFF();
    2ada:	0e 94 bf 09 	call	0x137e	; 0x137e <LED4_OFF>
                LCD_Clear();
    2ade:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                if (!eme_check) {
    2ae2:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2ae6:	81 11       	cpse	r24, r1
    2ae8:	0c c0       	rjmp	.+24     	; 0x2b02 <__vector_13+0x12d8>
                    LCD_Write_String("All Lamps Are");
    2aea:	83 e4       	ldi	r24, 0x43	; 67
    2aec:	93 e0       	ldi	r25, 0x03	; 3
    2aee:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                    LCD_Goto(1, 0);
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
                    LCD_Write_String("Closed");
    2afa:	8c e8       	ldi	r24, 0x8C	; 140
    2afc:	93 e0       	ldi	r25, 0x03	; 3
    2afe:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                }
            }
            Timer2_SetDelay(2000);
    2b02:	60 ed       	ldi	r22, 0xD0	; 208
    2b04:	77 e0       	ldi	r23, 0x07	; 7
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 36 0b 	call	0x166c	; 0x166c <Timer2_SetDelay>
    2b0e:	ed c0       	rjmp	.+474    	; 0x2cea <__vector_13+0x14c0>
        } else if (UART_GetValue == '3') {
    2b10:	83 33       	cpi	r24, 0x33	; 51
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <__vector_13+0x12ec>
    2b14:	cf c0       	rjmp	.+414    	; 0x2cb4 <__vector_13+0x148a>
            // Dimmer Circuit
            UART_TX_Str("\r\n");
    2b16:	85 ef       	ldi	r24, 0xF5	; 245
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    2b1e:	85 ef       	ldi	r24, 0xF5	; 245
    2b20:	91 e0       	ldi	r25, 0x01	; 1
    2b22:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Please enter the percentage of the lamp\r\n");
    2b26:	8f ec       	ldi	r24, 0xCF	; 207
    2b28:	93 e0       	ldi	r25, 0x03	; 3
    2b2a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    2b2e:	85 ef       	ldi	r24, 0xF5	; 245
    2b30:	91 e0       	ldi	r25, 0x01	; 1
    2b32:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>

            Dimmer_Value = 0;
    2b36:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <Dimmer_Value>
    2b3a:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <Dimmer_Value+0x1>
    2b3e:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <Dimmer_Value+0x2>
    2b42:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <Dimmer_Value+0x3>

            for (Uint8 i = 0; i < 3; i++) {
    2b46:	00 e0       	ldi	r16, 0x00	; 0
    2b48:	38 c0       	rjmp	.+112    	; 0x2bba <__vector_13+0x1390>
                while (!Get_Bit(UCSRA, 7));
    2b4a:	5f 9b       	sbis	0x0b, 7	; 11
    2b4c:	fe cf       	rjmp	.-4      	; 0x2b4a <__vector_13+0x1320>
                Dimmer_Array[i] = UART_RX_Char();
    2b4e:	e0 2e       	mov	r14, r16
    2b50:	f1 2c       	mov	r15, r1
    2b52:	0e 94 11 0c 	call	0x1822	; 0x1822 <UART_RX_Char>
    2b56:	18 2f       	mov	r17, r24
    2b58:	f7 01       	movw	r30, r14
    2b5a:	e3 51       	subi	r30, 0x13	; 19
    2b5c:	f9 4f       	sbci	r31, 0xF9	; 249
    2b5e:	80 83       	st	Z, r24

                if (Dimmer_Array[i] >= 48 && Dimmer_Array[i] <= 57) {
    2b60:	80 ed       	ldi	r24, 0xD0	; 208
    2b62:	81 0f       	add	r24, r17
    2b64:	8a 30       	cpi	r24, 0x0A	; 10
    2b66:	38 f5       	brcc	.+78     	; 0x2bb6 <__vector_13+0x138c>
                    Dimmer_Value = Dimmer_Value * 10 + (Dimmer_Array[i] - 48);
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	60 91 e9 06 	lds	r22, 0x06E9	; 0x8006e9 <Dimmer_Value>
    2b74:	70 91 ea 06 	lds	r23, 0x06EA	; 0x8006ea <Dimmer_Value+0x1>
    2b78:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <Dimmer_Value+0x2>
    2b7c:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <Dimmer_Value+0x3>
    2b80:	0e 94 37 18 	call	0x306e	; 0x306e <__mulsf3>
    2b84:	6b 01       	movw	r12, r22
    2b86:	7c 01       	movw	r14, r24
    2b88:	61 2f       	mov	r22, r17
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	60 53       	subi	r22, 0x30	; 48
    2b8e:	71 09       	sbc	r23, r1
    2b90:	07 2e       	mov	r0, r23
    2b92:	00 0c       	add	r0, r0
    2b94:	88 0b       	sbc	r24, r24
    2b96:	99 0b       	sbc	r25, r25
    2b98:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__floatsisf>
    2b9c:	a7 01       	movw	r20, r14
    2b9e:	96 01       	movw	r18, r12
    2ba0:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__addsf3>
    2ba4:	60 93 e9 06 	sts	0x06E9, r22	; 0x8006e9 <Dimmer_Value>
    2ba8:	70 93 ea 06 	sts	0x06EA, r23	; 0x8006ea <Dimmer_Value+0x1>
    2bac:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <Dimmer_Value+0x2>
    2bb0:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <Dimmer_Value+0x3>
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <__vector_13+0x138e>
                } else {
                    i = 5;
    2bb6:	05 e0       	ldi	r16, 0x05	; 5
            UART_TX_Str("Please enter the percentage of the lamp\r\n");
            UART_TX_Str("\r\n");

            Dimmer_Value = 0;

            for (Uint8 i = 0; i < 3; i++) {
    2bb8:	0f 5f       	subi	r16, 0xFF	; 255
    2bba:	03 30       	cpi	r16, 0x03	; 3
    2bbc:	30 f2       	brcs	.-116    	; 0x2b4a <__vector_13+0x1320>
                    i = 5;
                }

            }

            if (!eme_check) {
    2bbe:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <eme_check>
    2bc2:	81 11       	cpse	r24, r1
    2bc4:	23 c0       	rjmp	.+70     	; 0x2c0c <__vector_13+0x13e2>
                LCD_Clear();
    2bc6:	0e 94 32 09 	call	0x1264	; 0x1264 <LCD_Clear>
                LCD_Write_String("Lamp ON!");
    2bca:	89 ef       	ldi	r24, 0xF9	; 249
    2bcc:	93 e0       	ldi	r25, 0x03	; 3
    2bce:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                LCD_Goto(1, 0);
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	0e 94 36 09 	call	0x126c	; 0x126c <LCD_Goto>
                LCD_Write_String("Percentage:");
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	94 e0       	ldi	r25, 0x04	; 4
    2bde:	0e 94 ac 08 	call	0x1158	; 0x1158 <LCD_Write_String>
                LCD_Write_Integer(Dimmer_Value);
    2be2:	60 91 e9 06 	lds	r22, 0x06E9	; 0x8006e9 <Dimmer_Value>
    2be6:	70 91 ea 06 	lds	r23, 0x06EA	; 0x8006ea <Dimmer_Value+0x1>
    2bea:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <Dimmer_Value+0x2>
    2bee:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <Dimmer_Value+0x3>
    2bf2:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <__fixunssfsi>
    2bf6:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_Write_Integer>
                LCD_Write_Char('%');
    2bfa:	85 e2       	ldi	r24, 0x25	; 37
    2bfc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <LCD_Write_Char>
                Timer2_SetDelay(2000);
    2c00:	60 ed       	ldi	r22, 0xD0	; 208
    2c02:	77 e0       	ldi	r23, 0x07	; 7
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0e 94 36 0b 	call	0x166c	; 0x166c <Timer2_SetDelay>
            }

            if (Dimmer_Value >= 58 && Dimmer_Value <= 60) {
    2c0c:	c0 90 e9 06 	lds	r12, 0x06E9	; 0x8006e9 <Dimmer_Value>
    2c10:	d0 90 ea 06 	lds	r13, 0x06EA	; 0x8006ea <Dimmer_Value+0x1>
    2c14:	e0 90 eb 06 	lds	r14, 0x06EB	; 0x8006eb <Dimmer_Value+0x2>
    2c18:	f0 90 ec 06 	lds	r15, 0x06EC	; 0x8006ec <Dimmer_Value+0x3>
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	48 e6       	ldi	r20, 0x68	; 104
    2c22:	52 e4       	ldi	r21, 0x42	; 66
    2c24:	c7 01       	movw	r24, r14
    2c26:	b6 01       	movw	r22, r12
    2c28:	0e 94 32 18 	call	0x3064	; 0x3064 <__gesf2>
    2c2c:	88 23       	and	r24, r24
    2c2e:	bc f0       	brlt	.+46     	; 0x2c5e <__vector_13+0x1434>
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e7       	ldi	r20, 0x70	; 112
    2c36:	52 e4       	ldi	r21, 0x42	; 66
    2c38:	c7 01       	movw	r24, r14
    2c3a:	b6 01       	movw	r22, r12
    2c3c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__cmpsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	6c f0       	brlt	.+26     	; 0x2c5e <__vector_13+0x1434>
                Dimmer_Value = 55;
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	ac e5       	ldi	r26, 0x5C	; 92
    2c4a:	b2 e4       	ldi	r27, 0x42	; 66
    2c4c:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <Dimmer_Value>
    2c50:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <Dimmer_Value+0x1>
    2c54:	a0 93 eb 06 	sts	0x06EB, r26	; 0x8006eb <Dimmer_Value+0x2>
    2c58:	b0 93 ec 06 	sts	0x06EC, r27	; 0x8006ec <Dimmer_Value+0x3>
    2c5c:	20 c0       	rjmp	.+64     	; 0x2c9e <__vector_13+0x1474>
            } else if (Dimmer_Value > 60 && Dimmer_Value <= 62) {
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e7       	ldi	r20, 0x70	; 112
    2c64:	52 e4       	ldi	r21, 0x42	; 66
    2c66:	c7 01       	movw	r24, r14
    2c68:	b6 01       	movw	r22, r12
    2c6a:	0e 94 32 18 	call	0x3064	; 0x3064 <__gesf2>
    2c6e:	18 16       	cp	r1, r24
    2c70:	b4 f4       	brge	.+44     	; 0x2c9e <__vector_13+0x1474>
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	48 e7       	ldi	r20, 0x78	; 120
    2c78:	52 e4       	ldi	r21, 0x42	; 66
    2c7a:	c7 01       	movw	r24, r14
    2c7c:	b6 01       	movw	r22, r12
    2c7e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__cmpsf2>
    2c82:	18 16       	cp	r1, r24
    2c84:	64 f0       	brlt	.+24     	; 0x2c9e <__vector_13+0x1474>
                Dimmer_Value = 65;
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a2 e8       	ldi	r26, 0x82	; 130
    2c8c:	b2 e4       	ldi	r27, 0x42	; 66
    2c8e:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <Dimmer_Value>
    2c92:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <Dimmer_Value+0x1>
    2c96:	a0 93 eb 06 	sts	0x06EB, r26	; 0x8006eb <Dimmer_Value+0x2>
    2c9a:	b0 93 ec 06 	sts	0x06EC, r27	; 0x8006ec <Dimmer_Value+0x3>
            }

            PWM0_Gen(Dimmer_Value);
    2c9e:	60 91 e9 06 	lds	r22, 0x06E9	; 0x8006e9 <Dimmer_Value>
    2ca2:	70 91 ea 06 	lds	r23, 0x06EA	; 0x8006ea <Dimmer_Value+0x1>
    2ca6:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <Dimmer_Value+0x2>
    2caa:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <Dimmer_Value+0x3>
    2cae:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <PWM0_Gen>
    2cb2:	1b c0       	rjmp	.+54     	; 0x2cea <__vector_13+0x14c0>
        }else if (UART_GetValue == '0'){
    2cb4:	80 33       	cpi	r24, 0x30	; 48
    2cb6:	59 f4       	brne	.+22     	; 0x2cce <__vector_13+0x14a4>
			SYS_Check = 0;
    2cb8:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <SYS_Check>
			UART_TX_Str("\r\n");
    2cbc:	85 ef       	ldi	r24, 0xF5	; 245
    2cbe:	91 e0       	ldi	r25, 0x01	; 1
    2cc0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("Bye-Bye user");
    2cc4:	80 e9       	ldi	r24, 0x90	; 144
    2cc6:	96 e0       	ldi	r25, 0x06	; 6
    2cc8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    2ccc:	0e c0       	rjmp	.+28     	; 0x2cea <__vector_13+0x14c0>
        } else if (UART_GetValue == 8) {
    2cce:	88 30       	cpi	r24, 0x08	; 8
    2cd0:	61 f0       	breq	.+24     	; 0x2cea <__vector_13+0x14c0>

        } else {
            UART_TX_Str("\r\n");
    2cd2:	85 ef       	ldi	r24, 0xF5	; 245
    2cd4:	91 e0       	ldi	r25, 0x01	; 1
    2cd6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("\r\n");
    2cda:	85 ef       	ldi	r24, 0xF5	; 245
    2cdc:	91 e0       	ldi	r25, 0x01	; 1
    2cde:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
            UART_TX_Str("Please enter command number\r\n");
    2ce2:	80 e6       	ldi	r24, 0x60	; 96
    2ce4:	92 e0       	ldi	r25, 0x02	; 2
    2ce6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        }
		if (SYS_Check)
    2cea:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <SYS_Check>
    2cee:	88 23       	and	r24, r24
    2cf0:	49 f1       	breq	.+82     	; 0x2d44 <__vector_13+0x151a>
		{
        UART_TX_Str("\r\n");
    2cf2:	85 ef       	ldi	r24, 0xF5	; 245
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("\r\n");
    2cfa:	85 ef       	ldi	r24, 0xF5	; 245
    2cfc:	91 e0       	ldi	r25, 0x01	; 1
    2cfe:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("Waiting for your command\r\n");
    2d02:	83 eb       	ldi	r24, 0xB3	; 179
    2d04:	95 e0       	ldi	r25, 0x05	; 5
    2d06:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("\r\n");
    2d0a:	85 ef       	ldi	r24, 0xF5	; 245
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("1.Open lamps\r\n");
    2d12:	8d e9       	ldi	r24, 0x9D	; 157
    2d14:	96 e0       	ldi	r25, 0x06	; 6
    2d16:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("2.Close lamps\r\n");
    2d1a:	8c ea       	ldi	r24, 0xAC	; 172
    2d1c:	96 e0       	ldi	r25, 0x06	; 6
    2d1e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("3.Variant lamp\r\n");
    2d22:	8c eb       	ldi	r24, 0xBC	; 188
    2d24:	96 e0       	ldi	r25, 0x06	; 6
    2d26:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
		UART_TX_Str("0.Logout\r\n");
    2d2a:	8e e5       	ldi	r24, 0x5E	; 94
    2d2c:	96 e0       	ldi	r25, 0x06	; 6
    2d2e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("Reply with the number of the command\r\n");
    2d32:	89 e6       	ldi	r24, 0x69	; 105
    2d34:	96 e0       	ldi	r25, 0x06	; 6
    2d36:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
        UART_TX_Str("\r\n");
    2d3a:	85 ef       	ldi	r24, 0xF5	; 245
    2d3c:	91 e0       	ldi	r25, 0x01	; 1
    2d3e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
    2d42:	0c c0       	rjmp	.+24     	; 0x2d5c <__vector_13+0x1532>
		}
		else
		{
			UART_TX_Str("1.Enter Admin\r\n");
    2d44:	8e e7       	ldi	r24, 0x7E	; 126
    2d46:	92 e0       	ldi	r25, 0x02	; 2
    2d48:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("2.Enter User\r\n");
    2d4c:	8e e8       	ldi	r24, 0x8E	; 142
    2d4e:	92 e0       	ldi	r25, 0x02	; 2
    2d50:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
			UART_TX_Str("\r\n");	
    2d54:	85 ef       	ldi	r24, 0xF5	; 245
    2d56:	91 e0       	ldi	r25, 0x01	; 1
    2d58:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <UART_TX_Str>
		}
    }
}
    2d5c:	64 96       	adiw	r28, 0x14	; 20
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	ff 91       	pop	r31
    2d6e:	ef 91       	pop	r30
    2d70:	bf 91       	pop	r27
    2d72:	af 91       	pop	r26
    2d74:	9f 91       	pop	r25
    2d76:	8f 91       	pop	r24
    2d78:	7f 91       	pop	r23
    2d7a:	6f 91       	pop	r22
    2d7c:	5f 91       	pop	r21
    2d7e:	4f 91       	pop	r20
    2d80:	3f 91       	pop	r19
    2d82:	2f 91       	pop	r18
    2d84:	1f 91       	pop	r17
    2d86:	0f 91       	pop	r16
    2d88:	ff 90       	pop	r15
    2d8a:	ef 90       	pop	r14
    2d8c:	df 90       	pop	r13
    2d8e:	cf 90       	pop	r12
    2d90:	bf 90       	pop	r11
    2d92:	af 90       	pop	r10
    2d94:	9f 90       	pop	r9
    2d96:	8f 90       	pop	r8
    2d98:	7f 90       	pop	r7
    2d9a:	6f 90       	pop	r6
    2d9c:	5f 90       	pop	r5
    2d9e:	4f 90       	pop	r4
    2da0:	0f 90       	pop	r0
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	0f 90       	pop	r0
    2da6:	1f 90       	pop	r1
    2da8:	18 95       	reti

00002daa <__vector_15>:

ISR(USART_TXC_vect) {
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    // Write UART transmit handler here

    2db4:	0f 90       	pop	r0
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	0f 90       	pop	r0
    2dba:	1f 90       	pop	r1
    2dbc:	18 95       	reti

00002dbe <__subsf3>:
    2dbe:	50 58       	subi	r21, 0x80	; 128

00002dc0 <__addsf3>:
    2dc0:	bb 27       	eor	r27, r27
    2dc2:	aa 27       	eor	r26, r26
    2dc4:	0e 94 f7 16 	call	0x2dee	; 0x2dee <__addsf3x>
    2dc8:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <__fp_round>
    2dcc:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__fp_pscA>
    2dd0:	38 f0       	brcs	.+14     	; 0x2de0 <__addsf3+0x20>
    2dd2:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__fp_pscB>
    2dd6:	20 f0       	brcs	.+8      	; 0x2de0 <__addsf3+0x20>
    2dd8:	39 f4       	brne	.+14     	; 0x2de8 <__addsf3+0x28>
    2dda:	9f 3f       	cpi	r25, 0xFF	; 255
    2ddc:	19 f4       	brne	.+6      	; 0x2de4 <__addsf3+0x24>
    2dde:	26 f4       	brtc	.+8      	; 0x2de8 <__addsf3+0x28>
    2de0:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__fp_nan>
    2de4:	0e f4       	brtc	.+2      	; 0x2de8 <__addsf3+0x28>
    2de6:	e0 95       	com	r30
    2de8:	e7 fb       	bst	r30, 7
    2dea:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__fp_inf>

00002dee <__addsf3x>:
    2dee:	e9 2f       	mov	r30, r25
    2df0:	0e 94 09 18 	call	0x3012	; 0x3012 <__fp_split3>
    2df4:	58 f3       	brcs	.-42     	; 0x2dcc <__addsf3+0xc>
    2df6:	ba 17       	cp	r27, r26
    2df8:	62 07       	cpc	r22, r18
    2dfa:	73 07       	cpc	r23, r19
    2dfc:	84 07       	cpc	r24, r20
    2dfe:	95 07       	cpc	r25, r21
    2e00:	20 f0       	brcs	.+8      	; 0x2e0a <__addsf3x+0x1c>
    2e02:	79 f4       	brne	.+30     	; 0x2e22 <__addsf3x+0x34>
    2e04:	a6 f5       	brtc	.+104    	; 0x2e6e <__addsf3x+0x80>
    2e06:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__fp_zero>
    2e0a:	0e f4       	brtc	.+2      	; 0x2e0e <__addsf3x+0x20>
    2e0c:	e0 95       	com	r30
    2e0e:	0b 2e       	mov	r0, r27
    2e10:	ba 2f       	mov	r27, r26
    2e12:	a0 2d       	mov	r26, r0
    2e14:	0b 01       	movw	r0, r22
    2e16:	b9 01       	movw	r22, r18
    2e18:	90 01       	movw	r18, r0
    2e1a:	0c 01       	movw	r0, r24
    2e1c:	ca 01       	movw	r24, r20
    2e1e:	a0 01       	movw	r20, r0
    2e20:	11 24       	eor	r1, r1
    2e22:	ff 27       	eor	r31, r31
    2e24:	59 1b       	sub	r21, r25
    2e26:	99 f0       	breq	.+38     	; 0x2e4e <__addsf3x+0x60>
    2e28:	59 3f       	cpi	r21, 0xF9	; 249
    2e2a:	50 f4       	brcc	.+20     	; 0x2e40 <__addsf3x+0x52>
    2e2c:	50 3e       	cpi	r21, 0xE0	; 224
    2e2e:	68 f1       	brcs	.+90     	; 0x2e8a <__addsf3x+0x9c>
    2e30:	1a 16       	cp	r1, r26
    2e32:	f0 40       	sbci	r31, 0x00	; 0
    2e34:	a2 2f       	mov	r26, r18
    2e36:	23 2f       	mov	r18, r19
    2e38:	34 2f       	mov	r19, r20
    2e3a:	44 27       	eor	r20, r20
    2e3c:	58 5f       	subi	r21, 0xF8	; 248
    2e3e:	f3 cf       	rjmp	.-26     	; 0x2e26 <__addsf3x+0x38>
    2e40:	46 95       	lsr	r20
    2e42:	37 95       	ror	r19
    2e44:	27 95       	ror	r18
    2e46:	a7 95       	ror	r26
    2e48:	f0 40       	sbci	r31, 0x00	; 0
    2e4a:	53 95       	inc	r21
    2e4c:	c9 f7       	brne	.-14     	; 0x2e40 <__addsf3x+0x52>
    2e4e:	7e f4       	brtc	.+30     	; 0x2e6e <__addsf3x+0x80>
    2e50:	1f 16       	cp	r1, r31
    2e52:	ba 0b       	sbc	r27, r26
    2e54:	62 0b       	sbc	r22, r18
    2e56:	73 0b       	sbc	r23, r19
    2e58:	84 0b       	sbc	r24, r20
    2e5a:	ba f0       	brmi	.+46     	; 0x2e8a <__addsf3x+0x9c>
    2e5c:	91 50       	subi	r25, 0x01	; 1
    2e5e:	a1 f0       	breq	.+40     	; 0x2e88 <__addsf3x+0x9a>
    2e60:	ff 0f       	add	r31, r31
    2e62:	bb 1f       	adc	r27, r27
    2e64:	66 1f       	adc	r22, r22
    2e66:	77 1f       	adc	r23, r23
    2e68:	88 1f       	adc	r24, r24
    2e6a:	c2 f7       	brpl	.-16     	; 0x2e5c <__addsf3x+0x6e>
    2e6c:	0e c0       	rjmp	.+28     	; 0x2e8a <__addsf3x+0x9c>
    2e6e:	ba 0f       	add	r27, r26
    2e70:	62 1f       	adc	r22, r18
    2e72:	73 1f       	adc	r23, r19
    2e74:	84 1f       	adc	r24, r20
    2e76:	48 f4       	brcc	.+18     	; 0x2e8a <__addsf3x+0x9c>
    2e78:	87 95       	ror	r24
    2e7a:	77 95       	ror	r23
    2e7c:	67 95       	ror	r22
    2e7e:	b7 95       	ror	r27
    2e80:	f7 95       	ror	r31
    2e82:	9e 3f       	cpi	r25, 0xFE	; 254
    2e84:	08 f0       	brcs	.+2      	; 0x2e88 <__addsf3x+0x9a>
    2e86:	b0 cf       	rjmp	.-160    	; 0x2de8 <__addsf3+0x28>
    2e88:	93 95       	inc	r25
    2e8a:	88 0f       	add	r24, r24
    2e8c:	08 f0       	brcs	.+2      	; 0x2e90 <__addsf3x+0xa2>
    2e8e:	99 27       	eor	r25, r25
    2e90:	ee 0f       	add	r30, r30
    2e92:	97 95       	ror	r25
    2e94:	87 95       	ror	r24
    2e96:	08 95       	ret

00002e98 <__cmpsf2>:
    2e98:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__fp_cmp>
    2e9c:	08 f4       	brcc	.+2      	; 0x2ea0 <__cmpsf2+0x8>
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	08 95       	ret

00002ea2 <__fixunssfsi>:
    2ea2:	0e 94 11 18 	call	0x3022	; 0x3022 <__fp_splitA>
    2ea6:	88 f0       	brcs	.+34     	; 0x2eca <__fixunssfsi+0x28>
    2ea8:	9f 57       	subi	r25, 0x7F	; 127
    2eaa:	98 f0       	brcs	.+38     	; 0x2ed2 <__fixunssfsi+0x30>
    2eac:	b9 2f       	mov	r27, r25
    2eae:	99 27       	eor	r25, r25
    2eb0:	b7 51       	subi	r27, 0x17	; 23
    2eb2:	b0 f0       	brcs	.+44     	; 0x2ee0 <__fixunssfsi+0x3e>
    2eb4:	e1 f0       	breq	.+56     	; 0x2eee <__fixunssfsi+0x4c>
    2eb6:	66 0f       	add	r22, r22
    2eb8:	77 1f       	adc	r23, r23
    2eba:	88 1f       	adc	r24, r24
    2ebc:	99 1f       	adc	r25, r25
    2ebe:	1a f0       	brmi	.+6      	; 0x2ec6 <__fixunssfsi+0x24>
    2ec0:	ba 95       	dec	r27
    2ec2:	c9 f7       	brne	.-14     	; 0x2eb6 <__fixunssfsi+0x14>
    2ec4:	14 c0       	rjmp	.+40     	; 0x2eee <__fixunssfsi+0x4c>
    2ec6:	b1 30       	cpi	r27, 0x01	; 1
    2ec8:	91 f0       	breq	.+36     	; 0x2eee <__fixunssfsi+0x4c>
    2eca:	0e 94 2b 18 	call	0x3056	; 0x3056 <__fp_zero>
    2ece:	b1 e0       	ldi	r27, 0x01	; 1
    2ed0:	08 95       	ret
    2ed2:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__fp_zero>
    2ed6:	67 2f       	mov	r22, r23
    2ed8:	78 2f       	mov	r23, r24
    2eda:	88 27       	eor	r24, r24
    2edc:	b8 5f       	subi	r27, 0xF8	; 248
    2ede:	39 f0       	breq	.+14     	; 0x2eee <__fixunssfsi+0x4c>
    2ee0:	b9 3f       	cpi	r27, 0xF9	; 249
    2ee2:	cc f3       	brlt	.-14     	; 0x2ed6 <__fixunssfsi+0x34>
    2ee4:	86 95       	lsr	r24
    2ee6:	77 95       	ror	r23
    2ee8:	67 95       	ror	r22
    2eea:	b3 95       	inc	r27
    2eec:	d9 f7       	brne	.-10     	; 0x2ee4 <__fixunssfsi+0x42>
    2eee:	3e f4       	brtc	.+14     	; 0x2efe <__fixunssfsi+0x5c>
    2ef0:	90 95       	com	r25
    2ef2:	80 95       	com	r24
    2ef4:	70 95       	com	r23
    2ef6:	61 95       	neg	r22
    2ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    2efa:	8f 4f       	sbci	r24, 0xFF	; 255
    2efc:	9f 4f       	sbci	r25, 0xFF	; 255
    2efe:	08 95       	ret

00002f00 <__floatunsisf>:
    2f00:	e8 94       	clt
    2f02:	09 c0       	rjmp	.+18     	; 0x2f16 <__floatsisf+0x12>

00002f04 <__floatsisf>:
    2f04:	97 fb       	bst	r25, 7
    2f06:	3e f4       	brtc	.+14     	; 0x2f16 <__floatsisf+0x12>
    2f08:	90 95       	com	r25
    2f0a:	80 95       	com	r24
    2f0c:	70 95       	com	r23
    2f0e:	61 95       	neg	r22
    2f10:	7f 4f       	sbci	r23, 0xFF	; 255
    2f12:	8f 4f       	sbci	r24, 0xFF	; 255
    2f14:	9f 4f       	sbci	r25, 0xFF	; 255
    2f16:	99 23       	and	r25, r25
    2f18:	a9 f0       	breq	.+42     	; 0x2f44 <__floatsisf+0x40>
    2f1a:	f9 2f       	mov	r31, r25
    2f1c:	96 e9       	ldi	r25, 0x96	; 150
    2f1e:	bb 27       	eor	r27, r27
    2f20:	93 95       	inc	r25
    2f22:	f6 95       	lsr	r31
    2f24:	87 95       	ror	r24
    2f26:	77 95       	ror	r23
    2f28:	67 95       	ror	r22
    2f2a:	b7 95       	ror	r27
    2f2c:	f1 11       	cpse	r31, r1
    2f2e:	f8 cf       	rjmp	.-16     	; 0x2f20 <__floatsisf+0x1c>
    2f30:	fa f4       	brpl	.+62     	; 0x2f70 <__floatsisf+0x6c>
    2f32:	bb 0f       	add	r27, r27
    2f34:	11 f4       	brne	.+4      	; 0x2f3a <__floatsisf+0x36>
    2f36:	60 ff       	sbrs	r22, 0
    2f38:	1b c0       	rjmp	.+54     	; 0x2f70 <__floatsisf+0x6c>
    2f3a:	6f 5f       	subi	r22, 0xFF	; 255
    2f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f40:	9f 4f       	sbci	r25, 0xFF	; 255
    2f42:	16 c0       	rjmp	.+44     	; 0x2f70 <__floatsisf+0x6c>
    2f44:	88 23       	and	r24, r24
    2f46:	11 f0       	breq	.+4      	; 0x2f4c <__floatsisf+0x48>
    2f48:	96 e9       	ldi	r25, 0x96	; 150
    2f4a:	11 c0       	rjmp	.+34     	; 0x2f6e <__floatsisf+0x6a>
    2f4c:	77 23       	and	r23, r23
    2f4e:	21 f0       	breq	.+8      	; 0x2f58 <__floatsisf+0x54>
    2f50:	9e e8       	ldi	r25, 0x8E	; 142
    2f52:	87 2f       	mov	r24, r23
    2f54:	76 2f       	mov	r23, r22
    2f56:	05 c0       	rjmp	.+10     	; 0x2f62 <__floatsisf+0x5e>
    2f58:	66 23       	and	r22, r22
    2f5a:	71 f0       	breq	.+28     	; 0x2f78 <__floatsisf+0x74>
    2f5c:	96 e8       	ldi	r25, 0x86	; 134
    2f5e:	86 2f       	mov	r24, r22
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	60 e0       	ldi	r22, 0x00	; 0
    2f64:	2a f0       	brmi	.+10     	; 0x2f70 <__floatsisf+0x6c>
    2f66:	9a 95       	dec	r25
    2f68:	66 0f       	add	r22, r22
    2f6a:	77 1f       	adc	r23, r23
    2f6c:	88 1f       	adc	r24, r24
    2f6e:	da f7       	brpl	.-10     	; 0x2f66 <__floatsisf+0x62>
    2f70:	88 0f       	add	r24, r24
    2f72:	96 95       	lsr	r25
    2f74:	87 95       	ror	r24
    2f76:	97 f9       	bld	r25, 7
    2f78:	08 95       	ret

00002f7a <__fp_cmp>:
    2f7a:	99 0f       	add	r25, r25
    2f7c:	00 08       	sbc	r0, r0
    2f7e:	55 0f       	add	r21, r21
    2f80:	aa 0b       	sbc	r26, r26
    2f82:	e0 e8       	ldi	r30, 0x80	; 128
    2f84:	fe ef       	ldi	r31, 0xFE	; 254
    2f86:	16 16       	cp	r1, r22
    2f88:	17 06       	cpc	r1, r23
    2f8a:	e8 07       	cpc	r30, r24
    2f8c:	f9 07       	cpc	r31, r25
    2f8e:	c0 f0       	brcs	.+48     	; 0x2fc0 <__fp_cmp+0x46>
    2f90:	12 16       	cp	r1, r18
    2f92:	13 06       	cpc	r1, r19
    2f94:	e4 07       	cpc	r30, r20
    2f96:	f5 07       	cpc	r31, r21
    2f98:	98 f0       	brcs	.+38     	; 0x2fc0 <__fp_cmp+0x46>
    2f9a:	62 1b       	sub	r22, r18
    2f9c:	73 0b       	sbc	r23, r19
    2f9e:	84 0b       	sbc	r24, r20
    2fa0:	95 0b       	sbc	r25, r21
    2fa2:	39 f4       	brne	.+14     	; 0x2fb2 <__fp_cmp+0x38>
    2fa4:	0a 26       	eor	r0, r26
    2fa6:	61 f0       	breq	.+24     	; 0x2fc0 <__fp_cmp+0x46>
    2fa8:	23 2b       	or	r18, r19
    2faa:	24 2b       	or	r18, r20
    2fac:	25 2b       	or	r18, r21
    2fae:	21 f4       	brne	.+8      	; 0x2fb8 <__fp_cmp+0x3e>
    2fb0:	08 95       	ret
    2fb2:	0a 26       	eor	r0, r26
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <__fp_cmp+0x3e>
    2fb6:	a1 40       	sbci	r26, 0x01	; 1
    2fb8:	a6 95       	lsr	r26
    2fba:	8f ef       	ldi	r24, 0xFF	; 255
    2fbc:	81 1d       	adc	r24, r1
    2fbe:	81 1d       	adc	r24, r1
    2fc0:	08 95       	ret

00002fc2 <__fp_inf>:
    2fc2:	97 f9       	bld	r25, 7
    2fc4:	9f 67       	ori	r25, 0x7F	; 127
    2fc6:	80 e8       	ldi	r24, 0x80	; 128
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	60 e0       	ldi	r22, 0x00	; 0
    2fcc:	08 95       	ret

00002fce <__fp_nan>:
    2fce:	9f ef       	ldi	r25, 0xFF	; 255
    2fd0:	80 ec       	ldi	r24, 0xC0	; 192
    2fd2:	08 95       	ret

00002fd4 <__fp_pscA>:
    2fd4:	00 24       	eor	r0, r0
    2fd6:	0a 94       	dec	r0
    2fd8:	16 16       	cp	r1, r22
    2fda:	17 06       	cpc	r1, r23
    2fdc:	18 06       	cpc	r1, r24
    2fde:	09 06       	cpc	r0, r25
    2fe0:	08 95       	ret

00002fe2 <__fp_pscB>:
    2fe2:	00 24       	eor	r0, r0
    2fe4:	0a 94       	dec	r0
    2fe6:	12 16       	cp	r1, r18
    2fe8:	13 06       	cpc	r1, r19
    2fea:	14 06       	cpc	r1, r20
    2fec:	05 06       	cpc	r0, r21
    2fee:	08 95       	ret

00002ff0 <__fp_round>:
    2ff0:	09 2e       	mov	r0, r25
    2ff2:	03 94       	inc	r0
    2ff4:	00 0c       	add	r0, r0
    2ff6:	11 f4       	brne	.+4      	; 0x2ffc <__fp_round+0xc>
    2ff8:	88 23       	and	r24, r24
    2ffa:	52 f0       	brmi	.+20     	; 0x3010 <__fp_round+0x20>
    2ffc:	bb 0f       	add	r27, r27
    2ffe:	40 f4       	brcc	.+16     	; 0x3010 <__fp_round+0x20>
    3000:	bf 2b       	or	r27, r31
    3002:	11 f4       	brne	.+4      	; 0x3008 <__fp_round+0x18>
    3004:	60 ff       	sbrs	r22, 0
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <__fp_round+0x20>
    3008:	6f 5f       	subi	r22, 0xFF	; 255
    300a:	7f 4f       	sbci	r23, 0xFF	; 255
    300c:	8f 4f       	sbci	r24, 0xFF	; 255
    300e:	9f 4f       	sbci	r25, 0xFF	; 255
    3010:	08 95       	ret

00003012 <__fp_split3>:
    3012:	57 fd       	sbrc	r21, 7
    3014:	90 58       	subi	r25, 0x80	; 128
    3016:	44 0f       	add	r20, r20
    3018:	55 1f       	adc	r21, r21
    301a:	59 f0       	breq	.+22     	; 0x3032 <__fp_splitA+0x10>
    301c:	5f 3f       	cpi	r21, 0xFF	; 255
    301e:	71 f0       	breq	.+28     	; 0x303c <__fp_splitA+0x1a>
    3020:	47 95       	ror	r20

00003022 <__fp_splitA>:
    3022:	88 0f       	add	r24, r24
    3024:	97 fb       	bst	r25, 7
    3026:	99 1f       	adc	r25, r25
    3028:	61 f0       	breq	.+24     	; 0x3042 <__fp_splitA+0x20>
    302a:	9f 3f       	cpi	r25, 0xFF	; 255
    302c:	79 f0       	breq	.+30     	; 0x304c <__fp_splitA+0x2a>
    302e:	87 95       	ror	r24
    3030:	08 95       	ret
    3032:	12 16       	cp	r1, r18
    3034:	13 06       	cpc	r1, r19
    3036:	14 06       	cpc	r1, r20
    3038:	55 1f       	adc	r21, r21
    303a:	f2 cf       	rjmp	.-28     	; 0x3020 <__fp_split3+0xe>
    303c:	46 95       	lsr	r20
    303e:	f1 df       	rcall	.-30     	; 0x3022 <__fp_splitA>
    3040:	08 c0       	rjmp	.+16     	; 0x3052 <__fp_splitA+0x30>
    3042:	16 16       	cp	r1, r22
    3044:	17 06       	cpc	r1, r23
    3046:	18 06       	cpc	r1, r24
    3048:	99 1f       	adc	r25, r25
    304a:	f1 cf       	rjmp	.-30     	; 0x302e <__fp_splitA+0xc>
    304c:	86 95       	lsr	r24
    304e:	71 05       	cpc	r23, r1
    3050:	61 05       	cpc	r22, r1
    3052:	08 94       	sec
    3054:	08 95       	ret

00003056 <__fp_zero>:
    3056:	e8 94       	clt

00003058 <__fp_szero>:
    3058:	bb 27       	eor	r27, r27
    305a:	66 27       	eor	r22, r22
    305c:	77 27       	eor	r23, r23
    305e:	cb 01       	movw	r24, r22
    3060:	97 f9       	bld	r25, 7
    3062:	08 95       	ret

00003064 <__gesf2>:
    3064:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__fp_cmp>
    3068:	08 f4       	brcc	.+2      	; 0x306c <__gesf2+0x8>
    306a:	8f ef       	ldi	r24, 0xFF	; 255
    306c:	08 95       	ret

0000306e <__mulsf3>:
    306e:	0e 94 4a 18 	call	0x3094	; 0x3094 <__mulsf3x>
    3072:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <__fp_round>
    3076:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__fp_pscA>
    307a:	38 f0       	brcs	.+14     	; 0x308a <__mulsf3+0x1c>
    307c:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__fp_pscB>
    3080:	20 f0       	brcs	.+8      	; 0x308a <__mulsf3+0x1c>
    3082:	95 23       	and	r25, r21
    3084:	11 f0       	breq	.+4      	; 0x308a <__mulsf3+0x1c>
    3086:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__fp_inf>
    308a:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__fp_nan>
    308e:	11 24       	eor	r1, r1
    3090:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__fp_szero>

00003094 <__mulsf3x>:
    3094:	0e 94 09 18 	call	0x3012	; 0x3012 <__fp_split3>
    3098:	70 f3       	brcs	.-36     	; 0x3076 <__mulsf3+0x8>

0000309a <__mulsf3_pse>:
    309a:	95 9f       	mul	r25, r21
    309c:	c1 f3       	breq	.-16     	; 0x308e <__mulsf3+0x20>
    309e:	95 0f       	add	r25, r21
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	55 1f       	adc	r21, r21
    30a4:	62 9f       	mul	r22, r18
    30a6:	f0 01       	movw	r30, r0
    30a8:	72 9f       	mul	r23, r18
    30aa:	bb 27       	eor	r27, r27
    30ac:	f0 0d       	add	r31, r0
    30ae:	b1 1d       	adc	r27, r1
    30b0:	63 9f       	mul	r22, r19
    30b2:	aa 27       	eor	r26, r26
    30b4:	f0 0d       	add	r31, r0
    30b6:	b1 1d       	adc	r27, r1
    30b8:	aa 1f       	adc	r26, r26
    30ba:	64 9f       	mul	r22, r20
    30bc:	66 27       	eor	r22, r22
    30be:	b0 0d       	add	r27, r0
    30c0:	a1 1d       	adc	r26, r1
    30c2:	66 1f       	adc	r22, r22
    30c4:	82 9f       	mul	r24, r18
    30c6:	22 27       	eor	r18, r18
    30c8:	b0 0d       	add	r27, r0
    30ca:	a1 1d       	adc	r26, r1
    30cc:	62 1f       	adc	r22, r18
    30ce:	73 9f       	mul	r23, r19
    30d0:	b0 0d       	add	r27, r0
    30d2:	a1 1d       	adc	r26, r1
    30d4:	62 1f       	adc	r22, r18
    30d6:	83 9f       	mul	r24, r19
    30d8:	a0 0d       	add	r26, r0
    30da:	61 1d       	adc	r22, r1
    30dc:	22 1f       	adc	r18, r18
    30de:	74 9f       	mul	r23, r20
    30e0:	33 27       	eor	r19, r19
    30e2:	a0 0d       	add	r26, r0
    30e4:	61 1d       	adc	r22, r1
    30e6:	23 1f       	adc	r18, r19
    30e8:	84 9f       	mul	r24, r20
    30ea:	60 0d       	add	r22, r0
    30ec:	21 1d       	adc	r18, r1
    30ee:	82 2f       	mov	r24, r18
    30f0:	76 2f       	mov	r23, r22
    30f2:	6a 2f       	mov	r22, r26
    30f4:	11 24       	eor	r1, r1
    30f6:	9f 57       	subi	r25, 0x7F	; 127
    30f8:	50 40       	sbci	r21, 0x00	; 0
    30fa:	9a f0       	brmi	.+38     	; 0x3122 <__mulsf3_pse+0x88>
    30fc:	f1 f0       	breq	.+60     	; 0x313a <__mulsf3_pse+0xa0>
    30fe:	88 23       	and	r24, r24
    3100:	4a f0       	brmi	.+18     	; 0x3114 <__mulsf3_pse+0x7a>
    3102:	ee 0f       	add	r30, r30
    3104:	ff 1f       	adc	r31, r31
    3106:	bb 1f       	adc	r27, r27
    3108:	66 1f       	adc	r22, r22
    310a:	77 1f       	adc	r23, r23
    310c:	88 1f       	adc	r24, r24
    310e:	91 50       	subi	r25, 0x01	; 1
    3110:	50 40       	sbci	r21, 0x00	; 0
    3112:	a9 f7       	brne	.-22     	; 0x30fe <__mulsf3_pse+0x64>
    3114:	9e 3f       	cpi	r25, 0xFE	; 254
    3116:	51 05       	cpc	r21, r1
    3118:	80 f0       	brcs	.+32     	; 0x313a <__mulsf3_pse+0xa0>
    311a:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__fp_inf>
    311e:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__fp_szero>
    3122:	5f 3f       	cpi	r21, 0xFF	; 255
    3124:	e4 f3       	brlt	.-8      	; 0x311e <__mulsf3_pse+0x84>
    3126:	98 3e       	cpi	r25, 0xE8	; 232
    3128:	d4 f3       	brlt	.-12     	; 0x311e <__mulsf3_pse+0x84>
    312a:	86 95       	lsr	r24
    312c:	77 95       	ror	r23
    312e:	67 95       	ror	r22
    3130:	b7 95       	ror	r27
    3132:	f7 95       	ror	r31
    3134:	e7 95       	ror	r30
    3136:	9f 5f       	subi	r25, 0xFF	; 255
    3138:	c1 f7       	brne	.-16     	; 0x312a <__mulsf3_pse+0x90>
    313a:	fe 2b       	or	r31, r30
    313c:	88 0f       	add	r24, r24
    313e:	91 1d       	adc	r25, r1
    3140:	96 95       	lsr	r25
    3142:	87 95       	ror	r24
    3144:	97 f9       	bld	r25, 7
    3146:	08 95       	ret

00003148 <__divmodhi4>:
    3148:	97 fb       	bst	r25, 7
    314a:	07 2e       	mov	r0, r23
    314c:	16 f4       	brtc	.+4      	; 0x3152 <__divmodhi4+0xa>
    314e:	00 94       	com	r0
    3150:	07 d0       	rcall	.+14     	; 0x3160 <__divmodhi4_neg1>
    3152:	77 fd       	sbrc	r23, 7
    3154:	09 d0       	rcall	.+18     	; 0x3168 <__divmodhi4_neg2>
    3156:	0e 94 e5 18 	call	0x31ca	; 0x31ca <__udivmodhi4>
    315a:	07 fc       	sbrc	r0, 7
    315c:	05 d0       	rcall	.+10     	; 0x3168 <__divmodhi4_neg2>
    315e:	3e f4       	brtc	.+14     	; 0x316e <__divmodhi4_exit>

00003160 <__divmodhi4_neg1>:
    3160:	90 95       	com	r25
    3162:	81 95       	neg	r24
    3164:	9f 4f       	sbci	r25, 0xFF	; 255
    3166:	08 95       	ret

00003168 <__divmodhi4_neg2>:
    3168:	70 95       	com	r23
    316a:	61 95       	neg	r22
    316c:	7f 4f       	sbci	r23, 0xFF	; 255

0000316e <__divmodhi4_exit>:
    316e:	08 95       	ret

00003170 <__udivmodsi4>:
    3170:	a1 e2       	ldi	r26, 0x21	; 33
    3172:	1a 2e       	mov	r1, r26
    3174:	aa 1b       	sub	r26, r26
    3176:	bb 1b       	sub	r27, r27
    3178:	fd 01       	movw	r30, r26
    317a:	0d c0       	rjmp	.+26     	; 0x3196 <__udivmodsi4_ep>

0000317c <__udivmodsi4_loop>:
    317c:	aa 1f       	adc	r26, r26
    317e:	bb 1f       	adc	r27, r27
    3180:	ee 1f       	adc	r30, r30
    3182:	ff 1f       	adc	r31, r31
    3184:	a2 17       	cp	r26, r18
    3186:	b3 07       	cpc	r27, r19
    3188:	e4 07       	cpc	r30, r20
    318a:	f5 07       	cpc	r31, r21
    318c:	20 f0       	brcs	.+8      	; 0x3196 <__udivmodsi4_ep>
    318e:	a2 1b       	sub	r26, r18
    3190:	b3 0b       	sbc	r27, r19
    3192:	e4 0b       	sbc	r30, r20
    3194:	f5 0b       	sbc	r31, r21

00003196 <__udivmodsi4_ep>:
    3196:	66 1f       	adc	r22, r22
    3198:	77 1f       	adc	r23, r23
    319a:	88 1f       	adc	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	1a 94       	dec	r1
    31a0:	69 f7       	brne	.-38     	; 0x317c <__udivmodsi4_loop>
    31a2:	60 95       	com	r22
    31a4:	70 95       	com	r23
    31a6:	80 95       	com	r24
    31a8:	90 95       	com	r25
    31aa:	9b 01       	movw	r18, r22
    31ac:	ac 01       	movw	r20, r24
    31ae:	bd 01       	movw	r22, r26
    31b0:	cf 01       	movw	r24, r30
    31b2:	08 95       	ret

000031b4 <__muluhisi3>:
    31b4:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <__umulhisi3>
    31b8:	a5 9f       	mul	r26, r21
    31ba:	90 0d       	add	r25, r0
    31bc:	b4 9f       	mul	r27, r20
    31be:	90 0d       	add	r25, r0
    31c0:	a4 9f       	mul	r26, r20
    31c2:	80 0d       	add	r24, r0
    31c4:	91 1d       	adc	r25, r1
    31c6:	11 24       	eor	r1, r1
    31c8:	08 95       	ret

000031ca <__udivmodhi4>:
    31ca:	aa 1b       	sub	r26, r26
    31cc:	bb 1b       	sub	r27, r27
    31ce:	51 e1       	ldi	r21, 0x11	; 17
    31d0:	07 c0       	rjmp	.+14     	; 0x31e0 <__udivmodhi4_ep>

000031d2 <__udivmodhi4_loop>:
    31d2:	aa 1f       	adc	r26, r26
    31d4:	bb 1f       	adc	r27, r27
    31d6:	a6 17       	cp	r26, r22
    31d8:	b7 07       	cpc	r27, r23
    31da:	10 f0       	brcs	.+4      	; 0x31e0 <__udivmodhi4_ep>
    31dc:	a6 1b       	sub	r26, r22
    31de:	b7 0b       	sbc	r27, r23

000031e0 <__udivmodhi4_ep>:
    31e0:	88 1f       	adc	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	5a 95       	dec	r21
    31e6:	a9 f7       	brne	.-22     	; 0x31d2 <__udivmodhi4_loop>
    31e8:	80 95       	com	r24
    31ea:	90 95       	com	r25
    31ec:	bc 01       	movw	r22, r24
    31ee:	cd 01       	movw	r24, r26
    31f0:	08 95       	ret

000031f2 <__umulhisi3>:
    31f2:	a2 9f       	mul	r26, r18
    31f4:	b0 01       	movw	r22, r0
    31f6:	b3 9f       	mul	r27, r19
    31f8:	c0 01       	movw	r24, r0
    31fa:	a3 9f       	mul	r26, r19
    31fc:	70 0d       	add	r23, r0
    31fe:	81 1d       	adc	r24, r1
    3200:	11 24       	eor	r1, r1
    3202:	91 1d       	adc	r25, r1
    3204:	b2 9f       	mul	r27, r18
    3206:	70 0d       	add	r23, r0
    3208:	81 1d       	adc	r24, r1
    320a:	11 24       	eor	r1, r1
    320c:	91 1d       	adc	r25, r1
    320e:	08 95       	ret

00003210 <_exit>:
    3210:	f8 94       	cli

00003212 <__stop_program>:
    3212:	ff cf       	rjmp	.-2      	; 0x3212 <__stop_program>
